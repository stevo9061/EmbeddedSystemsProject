
FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009588  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e4  08009718  08009718  00019718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099fc  080099fc  000200e4  2**0
                  CONTENTS
  4 .ARM          00000008  080099fc  080099fc  000199fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a04  08009a04  000200e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a04  08009a04  00019a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a08  08009a08  00019a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e4  20000000  08009a0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002930  200000e4  08009af0  000200e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002a14  08009af0  00022a14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002aa0f  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a6a  00000000  00000000  0004ab23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c90  00000000  00000000  0004f590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ad8  00000000  00000000  00051220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000255c3  00000000  00000000  00052cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020b89  00000000  00000000  000782bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d9a11  00000000  00000000  00098e44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00172855  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008310  00000000  00000000  001728a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000e4 	.word	0x200000e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009700 	.word	0x08009700

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000e8 	.word	0x200000e8
 80001cc:	08009700 	.word	0x08009700

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_dmul>:
 80002a0:	b570      	push	{r4, r5, r6, lr}
 80002a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ae:	bf1d      	ittte	ne
 80002b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002b4:	ea94 0f0c 	teqne	r4, ip
 80002b8:	ea95 0f0c 	teqne	r5, ip
 80002bc:	f000 f8de 	bleq	800047c <__aeabi_dmul+0x1dc>
 80002c0:	442c      	add	r4, r5
 80002c2:	ea81 0603 	eor.w	r6, r1, r3
 80002c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002d2:	bf18      	it	ne
 80002d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002e0:	d038      	beq.n	8000354 <__aeabi_dmul+0xb4>
 80002e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002e6:	f04f 0500 	mov.w	r5, #0
 80002ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002f6:	f04f 0600 	mov.w	r6, #0
 80002fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002fe:	f09c 0f00 	teq	ip, #0
 8000302:	bf18      	it	ne
 8000304:	f04e 0e01 	orrne.w	lr, lr, #1
 8000308:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800030c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000310:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000314:	d204      	bcs.n	8000320 <__aeabi_dmul+0x80>
 8000316:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800031a:	416d      	adcs	r5, r5
 800031c:	eb46 0606 	adc.w	r6, r6, r6
 8000320:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000324:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000328:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800032c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000330:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000334:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000338:	bf88      	it	hi
 800033a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800033e:	d81e      	bhi.n	800037e <__aeabi_dmul+0xde>
 8000340:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000358:	ea46 0101 	orr.w	r1, r6, r1
 800035c:	ea40 0002 	orr.w	r0, r0, r2
 8000360:	ea81 0103 	eor.w	r1, r1, r3
 8000364:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000368:	bfc2      	ittt	gt
 800036a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800036e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000372:	bd70      	popgt	{r4, r5, r6, pc}
 8000374:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000378:	f04f 0e00 	mov.w	lr, #0
 800037c:	3c01      	subs	r4, #1
 800037e:	f300 80ab 	bgt.w	80004d8 <__aeabi_dmul+0x238>
 8000382:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000386:	bfde      	ittt	le
 8000388:	2000      	movle	r0, #0
 800038a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800038e:	bd70      	pople	{r4, r5, r6, pc}
 8000390:	f1c4 0400 	rsb	r4, r4, #0
 8000394:	3c20      	subs	r4, #32
 8000396:	da35      	bge.n	8000404 <__aeabi_dmul+0x164>
 8000398:	340c      	adds	r4, #12
 800039a:	dc1b      	bgt.n	80003d4 <__aeabi_dmul+0x134>
 800039c:	f104 0414 	add.w	r4, r4, #20
 80003a0:	f1c4 0520 	rsb	r5, r4, #32
 80003a4:	fa00 f305 	lsl.w	r3, r0, r5
 80003a8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ac:	fa01 f205 	lsl.w	r2, r1, r5
 80003b0:	ea40 0002 	orr.w	r0, r0, r2
 80003b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c0:	fa21 f604 	lsr.w	r6, r1, r4
 80003c4:	eb42 0106 	adc.w	r1, r2, r6
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 040c 	rsb	r4, r4, #12
 80003d8:	f1c4 0520 	rsb	r5, r4, #32
 80003dc:	fa00 f304 	lsl.w	r3, r0, r4
 80003e0:	fa20 f005 	lsr.w	r0, r0, r5
 80003e4:	fa01 f204 	lsl.w	r2, r1, r4
 80003e8:	ea40 0002 	orr.w	r0, r0, r2
 80003ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003f4:	f141 0100 	adc.w	r1, r1, #0
 80003f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003fc:	bf08      	it	eq
 80003fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000402:	bd70      	pop	{r4, r5, r6, pc}
 8000404:	f1c4 0520 	rsb	r5, r4, #32
 8000408:	fa00 f205 	lsl.w	r2, r0, r5
 800040c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000410:	fa20 f304 	lsr.w	r3, r0, r4
 8000414:	fa01 f205 	lsl.w	r2, r1, r5
 8000418:	ea43 0302 	orr.w	r3, r3, r2
 800041c:	fa21 f004 	lsr.w	r0, r1, r4
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000424:	fa21 f204 	lsr.w	r2, r1, r4
 8000428:	ea20 0002 	bic.w	r0, r0, r2
 800042c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000430:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000434:	bf08      	it	eq
 8000436:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800043a:	bd70      	pop	{r4, r5, r6, pc}
 800043c:	f094 0f00 	teq	r4, #0
 8000440:	d10f      	bne.n	8000462 <__aeabi_dmul+0x1c2>
 8000442:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000446:	0040      	lsls	r0, r0, #1
 8000448:	eb41 0101 	adc.w	r1, r1, r1
 800044c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3c01      	subeq	r4, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1a6>
 8000456:	ea41 0106 	orr.w	r1, r1, r6
 800045a:	f095 0f00 	teq	r5, #0
 800045e:	bf18      	it	ne
 8000460:	4770      	bxne	lr
 8000462:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000466:	0052      	lsls	r2, r2, #1
 8000468:	eb43 0303 	adc.w	r3, r3, r3
 800046c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000470:	bf08      	it	eq
 8000472:	3d01      	subeq	r5, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1c6>
 8000476:	ea43 0306 	orr.w	r3, r3, r6
 800047a:	4770      	bx	lr
 800047c:	ea94 0f0c 	teq	r4, ip
 8000480:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000484:	bf18      	it	ne
 8000486:	ea95 0f0c 	teqne	r5, ip
 800048a:	d00c      	beq.n	80004a6 <__aeabi_dmul+0x206>
 800048c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000490:	bf18      	it	ne
 8000492:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000496:	d1d1      	bne.n	800043c <__aeabi_dmul+0x19c>
 8000498:	ea81 0103 	eor.w	r1, r1, r3
 800049c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004a0:	f04f 0000 	mov.w	r0, #0
 80004a4:	bd70      	pop	{r4, r5, r6, pc}
 80004a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004aa:	bf06      	itte	eq
 80004ac:	4610      	moveq	r0, r2
 80004ae:	4619      	moveq	r1, r3
 80004b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b4:	d019      	beq.n	80004ea <__aeabi_dmul+0x24a>
 80004b6:	ea94 0f0c 	teq	r4, ip
 80004ba:	d102      	bne.n	80004c2 <__aeabi_dmul+0x222>
 80004bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004c0:	d113      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004c2:	ea95 0f0c 	teq	r5, ip
 80004c6:	d105      	bne.n	80004d4 <__aeabi_dmul+0x234>
 80004c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004cc:	bf1c      	itt	ne
 80004ce:	4610      	movne	r0, r2
 80004d0:	4619      	movne	r1, r3
 80004d2:	d10a      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004d4:	ea81 0103 	eor.w	r1, r1, r3
 80004d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd70      	pop	{r4, r5, r6, pc}
 80004ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004f2:	bd70      	pop	{r4, r5, r6, pc}

080004f4 <__aeabi_drsub>:
 80004f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e002      	b.n	8000500 <__adddf3>
 80004fa:	bf00      	nop

080004fc <__aeabi_dsub>:
 80004fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000500 <__adddf3>:
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000506:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800050a:	ea94 0f05 	teq	r4, r5
 800050e:	bf08      	it	eq
 8000510:	ea90 0f02 	teqeq	r0, r2
 8000514:	bf1f      	itttt	ne
 8000516:	ea54 0c00 	orrsne.w	ip, r4, r0
 800051a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800051e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000522:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000526:	f000 80e2 	beq.w	80006ee <__adddf3+0x1ee>
 800052a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800052e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000532:	bfb8      	it	lt
 8000534:	426d      	neglt	r5, r5
 8000536:	dd0c      	ble.n	8000552 <__adddf3+0x52>
 8000538:	442c      	add	r4, r5
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	ea82 0000 	eor.w	r0, r2, r0
 8000546:	ea83 0101 	eor.w	r1, r3, r1
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	2d36      	cmp	r5, #54	; 0x36
 8000554:	bf88      	it	hi
 8000556:	bd30      	pophi	{r4, r5, pc}
 8000558:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800055c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000560:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000564:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000568:	d002      	beq.n	8000570 <__adddf3+0x70>
 800056a:	4240      	negs	r0, r0
 800056c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000570:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000574:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000578:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800057c:	d002      	beq.n	8000584 <__adddf3+0x84>
 800057e:	4252      	negs	r2, r2
 8000580:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000584:	ea94 0f05 	teq	r4, r5
 8000588:	f000 80a7 	beq.w	80006da <__adddf3+0x1da>
 800058c:	f1a4 0401 	sub.w	r4, r4, #1
 8000590:	f1d5 0e20 	rsbs	lr, r5, #32
 8000594:	db0d      	blt.n	80005b2 <__adddf3+0xb2>
 8000596:	fa02 fc0e 	lsl.w	ip, r2, lr
 800059a:	fa22 f205 	lsr.w	r2, r2, r5
 800059e:	1880      	adds	r0, r0, r2
 80005a0:	f141 0100 	adc.w	r1, r1, #0
 80005a4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005a8:	1880      	adds	r0, r0, r2
 80005aa:	fa43 f305 	asr.w	r3, r3, r5
 80005ae:	4159      	adcs	r1, r3
 80005b0:	e00e      	b.n	80005d0 <__adddf3+0xd0>
 80005b2:	f1a5 0520 	sub.w	r5, r5, #32
 80005b6:	f10e 0e20 	add.w	lr, lr, #32
 80005ba:	2a01      	cmp	r2, #1
 80005bc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005c0:	bf28      	it	cs
 80005c2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005c6:	fa43 f305 	asr.w	r3, r3, r5
 80005ca:	18c0      	adds	r0, r0, r3
 80005cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	d507      	bpl.n	80005e6 <__adddf3+0xe6>
 80005d6:	f04f 0e00 	mov.w	lr, #0
 80005da:	f1dc 0c00 	rsbs	ip, ip, #0
 80005de:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005e2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005e6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ea:	d31b      	bcc.n	8000624 <__adddf3+0x124>
 80005ec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005f0:	d30c      	bcc.n	800060c <__adddf3+0x10c>
 80005f2:	0849      	lsrs	r1, r1, #1
 80005f4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005fc:	f104 0401 	add.w	r4, r4, #1
 8000600:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000604:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000608:	f080 809a 	bcs.w	8000740 <__adddf3+0x240>
 800060c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000610:	bf08      	it	eq
 8000612:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000616:	f150 0000 	adcs.w	r0, r0, #0
 800061a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061e:	ea41 0105 	orr.w	r1, r1, r5
 8000622:	bd30      	pop	{r4, r5, pc}
 8000624:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000628:	4140      	adcs	r0, r0
 800062a:	eb41 0101 	adc.w	r1, r1, r1
 800062e:	3c01      	subs	r4, #1
 8000630:	bf28      	it	cs
 8000632:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000636:	d2e9      	bcs.n	800060c <__adddf3+0x10c>
 8000638:	f091 0f00 	teq	r1, #0
 800063c:	bf04      	itt	eq
 800063e:	4601      	moveq	r1, r0
 8000640:	2000      	moveq	r0, #0
 8000642:	fab1 f381 	clz	r3, r1
 8000646:	bf08      	it	eq
 8000648:	3320      	addeq	r3, #32
 800064a:	f1a3 030b 	sub.w	r3, r3, #11
 800064e:	f1b3 0220 	subs.w	r2, r3, #32
 8000652:	da0c      	bge.n	800066e <__adddf3+0x16e>
 8000654:	320c      	adds	r2, #12
 8000656:	dd08      	ble.n	800066a <__adddf3+0x16a>
 8000658:	f102 0c14 	add.w	ip, r2, #20
 800065c:	f1c2 020c 	rsb	r2, r2, #12
 8000660:	fa01 f00c 	lsl.w	r0, r1, ip
 8000664:	fa21 f102 	lsr.w	r1, r1, r2
 8000668:	e00c      	b.n	8000684 <__adddf3+0x184>
 800066a:	f102 0214 	add.w	r2, r2, #20
 800066e:	bfd8      	it	le
 8000670:	f1c2 0c20 	rsble	ip, r2, #32
 8000674:	fa01 f102 	lsl.w	r1, r1, r2
 8000678:	fa20 fc0c 	lsr.w	ip, r0, ip
 800067c:	bfdc      	itt	le
 800067e:	ea41 010c 	orrle.w	r1, r1, ip
 8000682:	4090      	lslle	r0, r2
 8000684:	1ae4      	subs	r4, r4, r3
 8000686:	bfa2      	ittt	ge
 8000688:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800068c:	4329      	orrge	r1, r5
 800068e:	bd30      	popge	{r4, r5, pc}
 8000690:	ea6f 0404 	mvn.w	r4, r4
 8000694:	3c1f      	subs	r4, #31
 8000696:	da1c      	bge.n	80006d2 <__adddf3+0x1d2>
 8000698:	340c      	adds	r4, #12
 800069a:	dc0e      	bgt.n	80006ba <__adddf3+0x1ba>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0220 	rsb	r2, r4, #32
 80006a4:	fa20 f004 	lsr.w	r0, r0, r4
 80006a8:	fa01 f302 	lsl.w	r3, r1, r2
 80006ac:	ea40 0003 	orr.w	r0, r0, r3
 80006b0:	fa21 f304 	lsr.w	r3, r1, r4
 80006b4:	ea45 0103 	orr.w	r1, r5, r3
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f1c4 040c 	rsb	r4, r4, #12
 80006be:	f1c4 0220 	rsb	r2, r4, #32
 80006c2:	fa20 f002 	lsr.w	r0, r0, r2
 80006c6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ca:	ea40 0003 	orr.w	r0, r0, r3
 80006ce:	4629      	mov	r1, r5
 80006d0:	bd30      	pop	{r4, r5, pc}
 80006d2:	fa21 f004 	lsr.w	r0, r1, r4
 80006d6:	4629      	mov	r1, r5
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f094 0f00 	teq	r4, #0
 80006de:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006e2:	bf06      	itte	eq
 80006e4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006e8:	3401      	addeq	r4, #1
 80006ea:	3d01      	subne	r5, #1
 80006ec:	e74e      	b.n	800058c <__adddf3+0x8c>
 80006ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006f2:	bf18      	it	ne
 80006f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006f8:	d029      	beq.n	800074e <__adddf3+0x24e>
 80006fa:	ea94 0f05 	teq	r4, r5
 80006fe:	bf08      	it	eq
 8000700:	ea90 0f02 	teqeq	r0, r2
 8000704:	d005      	beq.n	8000712 <__adddf3+0x212>
 8000706:	ea54 0c00 	orrs.w	ip, r4, r0
 800070a:	bf04      	itt	eq
 800070c:	4619      	moveq	r1, r3
 800070e:	4610      	moveq	r0, r2
 8000710:	bd30      	pop	{r4, r5, pc}
 8000712:	ea91 0f03 	teq	r1, r3
 8000716:	bf1e      	ittt	ne
 8000718:	2100      	movne	r1, #0
 800071a:	2000      	movne	r0, #0
 800071c:	bd30      	popne	{r4, r5, pc}
 800071e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000722:	d105      	bne.n	8000730 <__adddf3+0x230>
 8000724:	0040      	lsls	r0, r0, #1
 8000726:	4149      	adcs	r1, r1
 8000728:	bf28      	it	cs
 800072a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd30      	pop	{r4, r5, pc}
 8000730:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000734:	bf3c      	itt	cc
 8000736:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800073a:	bd30      	popcc	{r4, r5, pc}
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000740:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000744:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd30      	pop	{r4, r5, pc}
 800074e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000752:	bf1a      	itte	ne
 8000754:	4619      	movne	r1, r3
 8000756:	4610      	movne	r0, r2
 8000758:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800075c:	bf1c      	itt	ne
 800075e:	460b      	movne	r3, r1
 8000760:	4602      	movne	r2, r0
 8000762:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000766:	bf06      	itte	eq
 8000768:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800076c:	ea91 0f03 	teqeq	r1, r3
 8000770:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000774:	bd30      	pop	{r4, r5, pc}
 8000776:	bf00      	nop

08000778 <__aeabi_ui2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f04f 0500 	mov.w	r5, #0
 8000790:	f04f 0100 	mov.w	r1, #0
 8000794:	e750      	b.n	8000638 <__adddf3+0x138>
 8000796:	bf00      	nop

08000798 <__aeabi_i2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007b0:	bf48      	it	mi
 80007b2:	4240      	negmi	r0, r0
 80007b4:	f04f 0100 	mov.w	r1, #0
 80007b8:	e73e      	b.n	8000638 <__adddf3+0x138>
 80007ba:	bf00      	nop

080007bc <__aeabi_f2d>:
 80007bc:	0042      	lsls	r2, r0, #1
 80007be:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ca:	bf1f      	itttt	ne
 80007cc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007d4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007d8:	4770      	bxne	lr
 80007da:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007de:	bf08      	it	eq
 80007e0:	4770      	bxeq	lr
 80007e2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007e6:	bf04      	itt	eq
 80007e8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007ec:	4770      	bxeq	lr
 80007ee:	b530      	push	{r4, r5, lr}
 80007f0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007fc:	e71c      	b.n	8000638 <__adddf3+0x138>
 80007fe:	bf00      	nop

08000800 <__aeabi_ul2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f04f 0500 	mov.w	r5, #0
 800080e:	e00a      	b.n	8000826 <__aeabi_l2d+0x16>

08000810 <__aeabi_l2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800081e:	d502      	bpl.n	8000826 <__aeabi_l2d+0x16>
 8000820:	4240      	negs	r0, r0
 8000822:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000826:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800082a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800082e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000832:	f43f aed8 	beq.w	80005e6 <__adddf3+0xe6>
 8000836:	f04f 0203 	mov.w	r2, #3
 800083a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800083e:	bf18      	it	ne
 8000840:	3203      	addne	r2, #3
 8000842:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000846:	bf18      	it	ne
 8000848:	3203      	addne	r2, #3
 800084a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800084e:	f1c2 0320 	rsb	r3, r2, #32
 8000852:	fa00 fc03 	lsl.w	ip, r0, r3
 8000856:	fa20 f002 	lsr.w	r0, r0, r2
 800085a:	fa01 fe03 	lsl.w	lr, r1, r3
 800085e:	ea40 000e 	orr.w	r0, r0, lr
 8000862:	fa21 f102 	lsr.w	r1, r1, r2
 8000866:	4414      	add	r4, r2
 8000868:	e6bd      	b.n	80005e6 <__adddf3+0xe6>
 800086a:	bf00      	nop

0800086c <__aeabi_d2f>:
 800086c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000870:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000874:	bf24      	itt	cs
 8000876:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800087a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800087e:	d90d      	bls.n	800089c <__aeabi_d2f+0x30>
 8000880:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000884:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000888:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800088c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000890:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000894:	bf08      	it	eq
 8000896:	f020 0001 	biceq.w	r0, r0, #1
 800089a:	4770      	bx	lr
 800089c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80008a0:	d121      	bne.n	80008e6 <__aeabi_d2f+0x7a>
 80008a2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80008a6:	bfbc      	itt	lt
 80008a8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80008ac:	4770      	bxlt	lr
 80008ae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008b2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008b6:	f1c2 0218 	rsb	r2, r2, #24
 80008ba:	f1c2 0c20 	rsb	ip, r2, #32
 80008be:	fa10 f30c 	lsls.w	r3, r0, ip
 80008c2:	fa20 f002 	lsr.w	r0, r0, r2
 80008c6:	bf18      	it	ne
 80008c8:	f040 0001 	orrne.w	r0, r0, #1
 80008cc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008d4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008d8:	ea40 000c 	orr.w	r0, r0, ip
 80008dc:	fa23 f302 	lsr.w	r3, r3, r2
 80008e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008e4:	e7cc      	b.n	8000880 <__aeabi_d2f+0x14>
 80008e6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008ea:	d107      	bne.n	80008fc <__aeabi_d2f+0x90>
 80008ec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008f0:	bf1e      	ittt	ne
 80008f2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80008f6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80008fa:	4770      	bxne	lr
 80008fc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000900:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000904:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop

0800090c <__aeabi_uldivmod>:
 800090c:	b953      	cbnz	r3, 8000924 <__aeabi_uldivmod+0x18>
 800090e:	b94a      	cbnz	r2, 8000924 <__aeabi_uldivmod+0x18>
 8000910:	2900      	cmp	r1, #0
 8000912:	bf08      	it	eq
 8000914:	2800      	cmpeq	r0, #0
 8000916:	bf1c      	itt	ne
 8000918:	f04f 31ff 	movne.w	r1, #4294967295
 800091c:	f04f 30ff 	movne.w	r0, #4294967295
 8000920:	f000 b96e 	b.w	8000c00 <__aeabi_idiv0>
 8000924:	f1ad 0c08 	sub.w	ip, sp, #8
 8000928:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800092c:	f000 f806 	bl	800093c <__udivmoddi4>
 8000930:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000934:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000938:	b004      	add	sp, #16
 800093a:	4770      	bx	lr

0800093c <__udivmoddi4>:
 800093c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000940:	9d08      	ldr	r5, [sp, #32]
 8000942:	4604      	mov	r4, r0
 8000944:	468c      	mov	ip, r1
 8000946:	2b00      	cmp	r3, #0
 8000948:	f040 8083 	bne.w	8000a52 <__udivmoddi4+0x116>
 800094c:	428a      	cmp	r2, r1
 800094e:	4617      	mov	r7, r2
 8000950:	d947      	bls.n	80009e2 <__udivmoddi4+0xa6>
 8000952:	fab2 f282 	clz	r2, r2
 8000956:	b142      	cbz	r2, 800096a <__udivmoddi4+0x2e>
 8000958:	f1c2 0020 	rsb	r0, r2, #32
 800095c:	fa24 f000 	lsr.w	r0, r4, r0
 8000960:	4091      	lsls	r1, r2
 8000962:	4097      	lsls	r7, r2
 8000964:	ea40 0c01 	orr.w	ip, r0, r1
 8000968:	4094      	lsls	r4, r2
 800096a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800096e:	0c23      	lsrs	r3, r4, #16
 8000970:	fbbc f6f8 	udiv	r6, ip, r8
 8000974:	fa1f fe87 	uxth.w	lr, r7
 8000978:	fb08 c116 	mls	r1, r8, r6, ip
 800097c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000980:	fb06 f10e 	mul.w	r1, r6, lr
 8000984:	4299      	cmp	r1, r3
 8000986:	d909      	bls.n	800099c <__udivmoddi4+0x60>
 8000988:	18fb      	adds	r3, r7, r3
 800098a:	f106 30ff 	add.w	r0, r6, #4294967295
 800098e:	f080 8119 	bcs.w	8000bc4 <__udivmoddi4+0x288>
 8000992:	4299      	cmp	r1, r3
 8000994:	f240 8116 	bls.w	8000bc4 <__udivmoddi4+0x288>
 8000998:	3e02      	subs	r6, #2
 800099a:	443b      	add	r3, r7
 800099c:	1a5b      	subs	r3, r3, r1
 800099e:	b2a4      	uxth	r4, r4
 80009a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80009a4:	fb08 3310 	mls	r3, r8, r0, r3
 80009a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009ac:	fb00 fe0e 	mul.w	lr, r0, lr
 80009b0:	45a6      	cmp	lr, r4
 80009b2:	d909      	bls.n	80009c8 <__udivmoddi4+0x8c>
 80009b4:	193c      	adds	r4, r7, r4
 80009b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80009ba:	f080 8105 	bcs.w	8000bc8 <__udivmoddi4+0x28c>
 80009be:	45a6      	cmp	lr, r4
 80009c0:	f240 8102 	bls.w	8000bc8 <__udivmoddi4+0x28c>
 80009c4:	3802      	subs	r0, #2
 80009c6:	443c      	add	r4, r7
 80009c8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009cc:	eba4 040e 	sub.w	r4, r4, lr
 80009d0:	2600      	movs	r6, #0
 80009d2:	b11d      	cbz	r5, 80009dc <__udivmoddi4+0xa0>
 80009d4:	40d4      	lsrs	r4, r2
 80009d6:	2300      	movs	r3, #0
 80009d8:	e9c5 4300 	strd	r4, r3, [r5]
 80009dc:	4631      	mov	r1, r6
 80009de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009e2:	b902      	cbnz	r2, 80009e6 <__udivmoddi4+0xaa>
 80009e4:	deff      	udf	#255	; 0xff
 80009e6:	fab2 f282 	clz	r2, r2
 80009ea:	2a00      	cmp	r2, #0
 80009ec:	d150      	bne.n	8000a90 <__udivmoddi4+0x154>
 80009ee:	1bcb      	subs	r3, r1, r7
 80009f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009f4:	fa1f f887 	uxth.w	r8, r7
 80009f8:	2601      	movs	r6, #1
 80009fa:	fbb3 fcfe 	udiv	ip, r3, lr
 80009fe:	0c21      	lsrs	r1, r4, #16
 8000a00:	fb0e 331c 	mls	r3, lr, ip, r3
 8000a04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a08:	fb08 f30c 	mul.w	r3, r8, ip
 8000a0c:	428b      	cmp	r3, r1
 8000a0e:	d907      	bls.n	8000a20 <__udivmoddi4+0xe4>
 8000a10:	1879      	adds	r1, r7, r1
 8000a12:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000a16:	d202      	bcs.n	8000a1e <__udivmoddi4+0xe2>
 8000a18:	428b      	cmp	r3, r1
 8000a1a:	f200 80e9 	bhi.w	8000bf0 <__udivmoddi4+0x2b4>
 8000a1e:	4684      	mov	ip, r0
 8000a20:	1ac9      	subs	r1, r1, r3
 8000a22:	b2a3      	uxth	r3, r4
 8000a24:	fbb1 f0fe 	udiv	r0, r1, lr
 8000a28:	fb0e 1110 	mls	r1, lr, r0, r1
 8000a2c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000a30:	fb08 f800 	mul.w	r8, r8, r0
 8000a34:	45a0      	cmp	r8, r4
 8000a36:	d907      	bls.n	8000a48 <__udivmoddi4+0x10c>
 8000a38:	193c      	adds	r4, r7, r4
 8000a3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a3e:	d202      	bcs.n	8000a46 <__udivmoddi4+0x10a>
 8000a40:	45a0      	cmp	r8, r4
 8000a42:	f200 80d9 	bhi.w	8000bf8 <__udivmoddi4+0x2bc>
 8000a46:	4618      	mov	r0, r3
 8000a48:	eba4 0408 	sub.w	r4, r4, r8
 8000a4c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000a50:	e7bf      	b.n	80009d2 <__udivmoddi4+0x96>
 8000a52:	428b      	cmp	r3, r1
 8000a54:	d909      	bls.n	8000a6a <__udivmoddi4+0x12e>
 8000a56:	2d00      	cmp	r5, #0
 8000a58:	f000 80b1 	beq.w	8000bbe <__udivmoddi4+0x282>
 8000a5c:	2600      	movs	r6, #0
 8000a5e:	e9c5 0100 	strd	r0, r1, [r5]
 8000a62:	4630      	mov	r0, r6
 8000a64:	4631      	mov	r1, r6
 8000a66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a6a:	fab3 f683 	clz	r6, r3
 8000a6e:	2e00      	cmp	r6, #0
 8000a70:	d14a      	bne.n	8000b08 <__udivmoddi4+0x1cc>
 8000a72:	428b      	cmp	r3, r1
 8000a74:	d302      	bcc.n	8000a7c <__udivmoddi4+0x140>
 8000a76:	4282      	cmp	r2, r0
 8000a78:	f200 80b8 	bhi.w	8000bec <__udivmoddi4+0x2b0>
 8000a7c:	1a84      	subs	r4, r0, r2
 8000a7e:	eb61 0103 	sbc.w	r1, r1, r3
 8000a82:	2001      	movs	r0, #1
 8000a84:	468c      	mov	ip, r1
 8000a86:	2d00      	cmp	r5, #0
 8000a88:	d0a8      	beq.n	80009dc <__udivmoddi4+0xa0>
 8000a8a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000a8e:	e7a5      	b.n	80009dc <__udivmoddi4+0xa0>
 8000a90:	f1c2 0320 	rsb	r3, r2, #32
 8000a94:	fa20 f603 	lsr.w	r6, r0, r3
 8000a98:	4097      	lsls	r7, r2
 8000a9a:	fa01 f002 	lsl.w	r0, r1, r2
 8000a9e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000aa2:	40d9      	lsrs	r1, r3
 8000aa4:	4330      	orrs	r0, r6
 8000aa6:	0c03      	lsrs	r3, r0, #16
 8000aa8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000aac:	fa1f f887 	uxth.w	r8, r7
 8000ab0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ab4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ab8:	fb06 f108 	mul.w	r1, r6, r8
 8000abc:	4299      	cmp	r1, r3
 8000abe:	fa04 f402 	lsl.w	r4, r4, r2
 8000ac2:	d909      	bls.n	8000ad8 <__udivmoddi4+0x19c>
 8000ac4:	18fb      	adds	r3, r7, r3
 8000ac6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000aca:	f080 808d 	bcs.w	8000be8 <__udivmoddi4+0x2ac>
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	f240 808a 	bls.w	8000be8 <__udivmoddi4+0x2ac>
 8000ad4:	3e02      	subs	r6, #2
 8000ad6:	443b      	add	r3, r7
 8000ad8:	1a5b      	subs	r3, r3, r1
 8000ada:	b281      	uxth	r1, r0
 8000adc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ae0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ae4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ae8:	fb00 f308 	mul.w	r3, r0, r8
 8000aec:	428b      	cmp	r3, r1
 8000aee:	d907      	bls.n	8000b00 <__udivmoddi4+0x1c4>
 8000af0:	1879      	adds	r1, r7, r1
 8000af2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000af6:	d273      	bcs.n	8000be0 <__udivmoddi4+0x2a4>
 8000af8:	428b      	cmp	r3, r1
 8000afa:	d971      	bls.n	8000be0 <__udivmoddi4+0x2a4>
 8000afc:	3802      	subs	r0, #2
 8000afe:	4439      	add	r1, r7
 8000b00:	1acb      	subs	r3, r1, r3
 8000b02:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000b06:	e778      	b.n	80009fa <__udivmoddi4+0xbe>
 8000b08:	f1c6 0c20 	rsb	ip, r6, #32
 8000b0c:	fa03 f406 	lsl.w	r4, r3, r6
 8000b10:	fa22 f30c 	lsr.w	r3, r2, ip
 8000b14:	431c      	orrs	r4, r3
 8000b16:	fa20 f70c 	lsr.w	r7, r0, ip
 8000b1a:	fa01 f306 	lsl.w	r3, r1, r6
 8000b1e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000b22:	fa21 f10c 	lsr.w	r1, r1, ip
 8000b26:	431f      	orrs	r7, r3
 8000b28:	0c3b      	lsrs	r3, r7, #16
 8000b2a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b2e:	fa1f f884 	uxth.w	r8, r4
 8000b32:	fb0e 1119 	mls	r1, lr, r9, r1
 8000b36:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000b3a:	fb09 fa08 	mul.w	sl, r9, r8
 8000b3e:	458a      	cmp	sl, r1
 8000b40:	fa02 f206 	lsl.w	r2, r2, r6
 8000b44:	fa00 f306 	lsl.w	r3, r0, r6
 8000b48:	d908      	bls.n	8000b5c <__udivmoddi4+0x220>
 8000b4a:	1861      	adds	r1, r4, r1
 8000b4c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000b50:	d248      	bcs.n	8000be4 <__udivmoddi4+0x2a8>
 8000b52:	458a      	cmp	sl, r1
 8000b54:	d946      	bls.n	8000be4 <__udivmoddi4+0x2a8>
 8000b56:	f1a9 0902 	sub.w	r9, r9, #2
 8000b5a:	4421      	add	r1, r4
 8000b5c:	eba1 010a 	sub.w	r1, r1, sl
 8000b60:	b2bf      	uxth	r7, r7
 8000b62:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b66:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b6a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000b6e:	fb00 f808 	mul.w	r8, r0, r8
 8000b72:	45b8      	cmp	r8, r7
 8000b74:	d907      	bls.n	8000b86 <__udivmoddi4+0x24a>
 8000b76:	19e7      	adds	r7, r4, r7
 8000b78:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b7c:	d22e      	bcs.n	8000bdc <__udivmoddi4+0x2a0>
 8000b7e:	45b8      	cmp	r8, r7
 8000b80:	d92c      	bls.n	8000bdc <__udivmoddi4+0x2a0>
 8000b82:	3802      	subs	r0, #2
 8000b84:	4427      	add	r7, r4
 8000b86:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b8a:	eba7 0708 	sub.w	r7, r7, r8
 8000b8e:	fba0 8902 	umull	r8, r9, r0, r2
 8000b92:	454f      	cmp	r7, r9
 8000b94:	46c6      	mov	lr, r8
 8000b96:	4649      	mov	r1, r9
 8000b98:	d31a      	bcc.n	8000bd0 <__udivmoddi4+0x294>
 8000b9a:	d017      	beq.n	8000bcc <__udivmoddi4+0x290>
 8000b9c:	b15d      	cbz	r5, 8000bb6 <__udivmoddi4+0x27a>
 8000b9e:	ebb3 020e 	subs.w	r2, r3, lr
 8000ba2:	eb67 0701 	sbc.w	r7, r7, r1
 8000ba6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000baa:	40f2      	lsrs	r2, r6
 8000bac:	ea4c 0202 	orr.w	r2, ip, r2
 8000bb0:	40f7      	lsrs	r7, r6
 8000bb2:	e9c5 2700 	strd	r2, r7, [r5]
 8000bb6:	2600      	movs	r6, #0
 8000bb8:	4631      	mov	r1, r6
 8000bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bbe:	462e      	mov	r6, r5
 8000bc0:	4628      	mov	r0, r5
 8000bc2:	e70b      	b.n	80009dc <__udivmoddi4+0xa0>
 8000bc4:	4606      	mov	r6, r0
 8000bc6:	e6e9      	b.n	800099c <__udivmoddi4+0x60>
 8000bc8:	4618      	mov	r0, r3
 8000bca:	e6fd      	b.n	80009c8 <__udivmoddi4+0x8c>
 8000bcc:	4543      	cmp	r3, r8
 8000bce:	d2e5      	bcs.n	8000b9c <__udivmoddi4+0x260>
 8000bd0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000bd4:	eb69 0104 	sbc.w	r1, r9, r4
 8000bd8:	3801      	subs	r0, #1
 8000bda:	e7df      	b.n	8000b9c <__udivmoddi4+0x260>
 8000bdc:	4608      	mov	r0, r1
 8000bde:	e7d2      	b.n	8000b86 <__udivmoddi4+0x24a>
 8000be0:	4660      	mov	r0, ip
 8000be2:	e78d      	b.n	8000b00 <__udivmoddi4+0x1c4>
 8000be4:	4681      	mov	r9, r0
 8000be6:	e7b9      	b.n	8000b5c <__udivmoddi4+0x220>
 8000be8:	4666      	mov	r6, ip
 8000bea:	e775      	b.n	8000ad8 <__udivmoddi4+0x19c>
 8000bec:	4630      	mov	r0, r6
 8000bee:	e74a      	b.n	8000a86 <__udivmoddi4+0x14a>
 8000bf0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000bf4:	4439      	add	r1, r7
 8000bf6:	e713      	b.n	8000a20 <__udivmoddi4+0xe4>
 8000bf8:	3802      	subs	r0, #2
 8000bfa:	443c      	add	r4, r7
 8000bfc:	e724      	b.n	8000a48 <__udivmoddi4+0x10c>
 8000bfe:	bf00      	nop

08000c00 <__aeabi_idiv0>:
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop

08000c04 <checkInput>:
#include <stdlib.h>

uint32_t red_val = 0;
uint32_t red_average = 0;

void checkInput(I2C_HandleTypeDef handleI2C, UART_HandleTypeDef handleUART, uint8_t ringBuffer[], uint8_t size) {
 8000c04:	b084      	sub	sp, #16
 8000c06:	b5b0      	push	{r4, r5, r7, lr}
 8000c08:	b0de      	sub	sp, #376	; 0x178
 8000c0a:	af32      	add	r7, sp, #200	; 0xc8
 8000c0c:	f107 04c0 	add.w	r4, r7, #192	; 0xc0
 8000c10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	char *receive = "\r\ndata: #a,";
 8000c14:	4b70      	ldr	r3, [pc, #448]	; (8000dd8 <checkInput+0x1d4>)
 8000c16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

	char *ackStm32 = "\r\nSTM32: ACK\r\n";
 8000c1a:	4b70      	ldr	r3, [pc, #448]	; (8000ddc <checkInput+0x1d8>)
 8000c1c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	char *nackStm32 = "\r\nSTM32: NACK\r\n";
 8000c20:	4b6f      	ldr	r3, [pc, #444]	; (8000de0 <checkInput+0x1dc>)
 8000c22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	char *ackPc = "\r\nPC: ACK\\n\r\n";
 8000c26:	4b6f      	ldr	r3, [pc, #444]	; (8000de4 <checkInput+0x1e0>)
 8000c28:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

			char *cmdt = NULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			cmdt = (char *) ringBuffer;
 8000c32:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8000c36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			char* comparisonCmdt = "#t,tempa\\n";
 8000c3a:	4b6b      	ldr	r3, [pc, #428]	; (8000de8 <checkInput+0x1e4>)
 8000c3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

			// Check each character from my input with the allowed command (#t,tempa\n).
			int result = strcmp(comparisonCmdt, cmdt);
 8000c40:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8000c44:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8000c48:	f7ff fac2 	bl	80001d0 <strcmp>
 8000c4c:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

			// Check each element from my input with the allowed command.
			// If the input != 0, the command is forbidden and we return to our command prompt
			if(result != 0)
 8000c50:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	f040 80b7 	bne.w	8000dc8 <checkInput+0x1c4>

				return;
			}


	if(ringBuffer[1] == 't') {
 8000c5a:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8000c5e:	3301      	adds	r3, #1
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	2b74      	cmp	r3, #116	; 0x74
 8000c64:	f040 809c 	bne.w	8000da0 <checkInput+0x19c>

			return;
		}*/


		uint8_t temperature[] = "\r\n**** Temperature values measurement ****\n\r";
 8000c68:	4b60      	ldr	r3, [pc, #384]	; (8000dec <checkInput+0x1e8>)
 8000c6a:	463c      	mov	r4, r7
 8000c6c:	461d      	mov	r5, r3
 8000c6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c76:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000c7a:	c407      	stmia	r4!, {r0, r1, r2}
 8000c7c:	7023      	strb	r3, [r4, #0]
		uint8_t initTempMsg[] = "===> Initialize Temperature Sensor MAX30101 \r\n";
 8000c7e:	4b5c      	ldr	r3, [pc, #368]	; (8000df0 <checkInput+0x1ec>)
 8000c80:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8000c84:	461d      	mov	r5, r3
 8000c86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c8e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000c92:	c407      	stmia	r4!, {r0, r1, r2}
 8000c94:	8023      	strh	r3, [r4, #0]
 8000c96:	3402      	adds	r4, #2
 8000c98:	0c1b      	lsrs	r3, r3, #16
 8000c9a:	7023      	strb	r3, [r4, #0]
		uint8_t initTempMsgFinish[] = "=====> Temperature Sensor MAX30101 initialized\n\r";
 8000c9c:	4b55      	ldr	r3, [pc, #340]	; (8000df4 <checkInput+0x1f0>)
 8000c9e:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8000ca2:	461d      	mov	r5, r3
 8000ca4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ca6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ca8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000caa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cb0:	682b      	ldr	r3, [r5, #0]
 8000cb2:	7023      	strb	r3, [r4, #0]

		// TODO: Repeating code, maybe put it in a separate function, gives less lines of code
		// Print Acknowledgment from Stm32
		if (HAL_UART_Transmit(&handleUART, (uint8_t *) ackStm32, strlen(ackStm32), 1000) == HAL_ERROR)
 8000cb4:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8000cb8:	f7ff fa94 	bl	80001e4 <strlen>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	b29a      	uxth	r2, r3
 8000cc0:	f507 708a 	add.w	r0, r7, #276	; 0x114
 8000cc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cc8:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8000ccc:	f003 fc82 	bl	80045d4 <HAL_UART_Transmit>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d101      	bne.n	8000cda <checkInput+0xd6>
		{
			Error_Handler();
 8000cd6:	f000 fc85 	bl	80015e4 <Error_Handler>




		// Print temperature messages
		if(HAL_UART_Transmit(&handleUART, (uint8_t *)temperature, sizeof(temperature), 1000) == HAL_ERROR)
 8000cda:	4639      	mov	r1, r7
 8000cdc:	f507 708a 	add.w	r0, r7, #276	; 0x114
 8000ce0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ce4:	222d      	movs	r2, #45	; 0x2d
 8000ce6:	f003 fc75 	bl	80045d4 <HAL_UART_Transmit>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d101      	bne.n	8000cf4 <checkInput+0xf0>
		{
			Error_Handler();
 8000cf0:	f000 fc78 	bl	80015e4 <Error_Handler>
		}

		//TODO: Edit initTempMsg with the real Temperature Chip Name
		if(HAL_UART_Transmit(&handleUART, (uint8_t *)initTempMsg, sizeof(initTempMsg), 1000) == HAL_ERROR)
 8000cf4:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000cf8:	f507 708a 	add.w	r0, r7, #276	; 0x114
 8000cfc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d00:	222f      	movs	r2, #47	; 0x2f
 8000d02:	f003 fc67 	bl	80045d4 <HAL_UART_Transmit>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d101      	bne.n	8000d10 <checkInput+0x10c>
		{
			Error_Handler();
 8000d0c:	f000 fc6a 	bl	80015e4 <Error_Handler>
		}
		//TODO: Edit initTempMsgFinish with the real Temperature Chip Name

		if(HAL_UART_Transmit(&handleUART, (uint8_t *)initTempMsgFinish, sizeof(initTempMsgFinish), 1000) == HAL_ERROR)
 8000d10:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000d14:	f507 708a 	add.w	r0, r7, #276	; 0x114
 8000d18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d1c:	2231      	movs	r2, #49	; 0x31
 8000d1e:	f003 fc59 	bl	80045d4 <HAL_UART_Transmit>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d101      	bne.n	8000d2c <checkInput+0x128>
		{
			Error_Handler();
 8000d28:	f000 fc5c 	bl	80015e4 <Error_Handler>
		}

		// Print data:
		if (HAL_UART_Transmit(&handleUART, (uint8_t *)receive, strlen(receive), 1000) == HAL_ERROR)
 8000d2c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8000d30:	f7ff fa58 	bl	80001e4 <strlen>
 8000d34:	4603      	mov	r3, r0
 8000d36:	b29a      	uxth	r2, r3
 8000d38:	f507 708a 	add.w	r0, r7, #276	; 0x114
 8000d3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d40:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8000d44:	f003 fc46 	bl	80045d4 <HAL_UART_Transmit>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d101      	bne.n	8000d52 <checkInput+0x14e>

		{
			Error_Handler();
 8000d4e:	f000 fc49 	bl	80015e4 <Error_Handler>
		}


		// Get Temperature from chip
		hr4_get_chipTemp(handleI2C, handleUART);
 8000d52:	a811      	add	r0, sp, #68	; 0x44
 8000d54:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8000d58:	2284      	movs	r2, #132	; 0x84
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	f007 fd29 	bl	80087b2 <memcpy>
 8000d60:	4668      	mov	r0, sp
 8000d62:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000d66:	2244      	movs	r2, #68	; 0x44
 8000d68:	4619      	mov	r1, r3
 8000d6a:	f007 fd22 	bl	80087b2 <memcpy>
 8000d6e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8000d72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d74:	f000 f840 	bl	8000df8 <hr4_get_chipTemp>

		// Print Acknowledgment from PC
		if (HAL_UART_Transmit(&handleUART, (uint8_t *) ackPc, strlen(ackPc), 1000) == HAL_ERROR)
 8000d78:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8000d7c:	f7ff fa32 	bl	80001e4 <strlen>
 8000d80:	4603      	mov	r3, r0
 8000d82:	b29a      	uxth	r2, r3
 8000d84:	f507 708a 	add.w	r0, r7, #276	; 0x114
 8000d88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d8c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8000d90:	f003 fc20 	bl	80045d4 <HAL_UART_Transmit>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d117      	bne.n	8000dca <checkInput+0x1c6>
		{
			Error_Handler();
 8000d9a:	f000 fc23 	bl	80015e4 <Error_Handler>
 8000d9e:	e014      	b.n	8000dca <checkInput+0x1c6>


	} else {

		// Print Nack for negative acknowledge
		if (HAL_UART_Transmit(&handleUART, (uint8_t *) nackStm32, strlen(nackStm32), 1000) == HAL_ERROR)
 8000da0:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8000da4:	f7ff fa1e 	bl	80001e4 <strlen>
 8000da8:	4603      	mov	r3, r0
 8000daa:	b29a      	uxth	r2, r3
 8000dac:	f507 708a 	add.w	r0, r7, #276	; 0x114
 8000db0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000db4:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8000db8:	f003 fc0c 	bl	80045d4 <HAL_UART_Transmit>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d103      	bne.n	8000dca <checkInput+0x1c6>
		{
			Error_Handler();
 8000dc2:	f000 fc0f 	bl	80015e4 <Error_Handler>
 8000dc6:	e000      	b.n	8000dca <checkInput+0x1c6>
				return;
 8000dc8:	bf00      	nop
		}


	}
}
 8000dca:	37b0      	adds	r7, #176	; 0xb0
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000dd2:	b004      	add	sp, #16
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	08009718 	.word	0x08009718
 8000ddc:	08009724 	.word	0x08009724
 8000de0:	08009734 	.word	0x08009734
 8000de4:	08009744 	.word	0x08009744
 8000de8:	08009754 	.word	0x08009754
 8000dec:	08009760 	.word	0x08009760
 8000df0:	08009790 	.word	0x08009790
 8000df4:	080097c0 	.word	0x080097c0

08000df8 <hr4_get_chipTemp>:


}


void hr4_get_chipTemp(I2C_HandleTypeDef handleI2C, UART_HandleTypeDef handleUART) {
 8000df8:	b084      	sub	sp, #16
 8000dfa:	b5b0      	push	{r4, r5, r7, lr}
 8000dfc:	b08c      	sub	sp, #48	; 0x30
 8000dfe:	af02      	add	r7, sp, #8
 8000e00:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000e04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	static const uint8_t temp_EN = 0x21;


	uint8_t buf[BUFFERSIZE];

	buf[0] = temp_EN;
 8000e08:	4b3e      	ldr	r3, [pc, #248]	; (8000f04 <hr4_get_chipTemp+0x10c>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	763b      	strb	r3, [r7, #24]
	buf[1] = 1; //R/W-Bit = 1 für lesen
 8000e0e:	2301      	movs	r3, #1
 8000e10:	767b      	strb	r3, [r7, #25]
	uint8_t str_tmp[21] ="";
 8000e12:	2300      	movs	r3, #0
 8000e14:	603b      	str	r3, [r7, #0]
 8000e16:	1d3b      	adds	r3, r7, #4
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	741a      	strb	r2, [r3, #16]
	 *  We set HEARTRATE4_ADDR << 1 in I2C_Master_Transmit to start the communication with the click module,  and enable
	 *  TEMP_EN with the register address 0x21 and the second byte with 1 to enable it .
	 *  We select with our master the slave and start an event
	 */

	if (HAL_I2C_Master_Transmit(&handleI2C, HEARTRATE4_ADDR << 1, buf, 2, HAL_MAX_DELAY) == HAL_ERROR) {
 8000e24:	f107 0218 	add.w	r2, r7, #24
 8000e28:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2c:	9300      	str	r3, [sp, #0]
 8000e2e:	2302      	movs	r3, #2
 8000e30:	21ae      	movs	r1, #174	; 0xae
 8000e32:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8000e36:	f001 fa33 	bl	80022a0 <HAL_I2C_Master_Transmit>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d101      	bne.n	8000e44 <hr4_get_chipTemp+0x4c>
		Error_Handler();
 8000e40:	f000 fbd0 	bl	80015e4 <Error_Handler>
	/**
	 * We set the first byte of the buffer to the location of the register (temp_integer).
	 *  Tell heartrate4 that we want to read from this register.
	 */

	buf[0] = temp_integer;
 8000e44:	4b30      	ldr	r3, [pc, #192]	; (8000f08 <hr4_get_chipTemp+0x110>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	763b      	strb	r3, [r7, #24]

	if (HAL_I2C_Master_Transmit(&handleI2C, HEARTRATE4_ADDR << 1, buf, 1, HAL_MAX_DELAY) == HAL_ERROR) {
 8000e4a:	f107 0218 	add.w	r2, r7, #24
 8000e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e52:	9300      	str	r3, [sp, #0]
 8000e54:	2301      	movs	r3, #1
 8000e56:	21ae      	movs	r1, #174	; 0xae
 8000e58:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8000e5c:	f001 fa20 	bl	80022a0 <HAL_I2C_Master_Transmit>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d101      	bne.n	8000e6a <hr4_get_chipTemp+0x72>
		Error_Handler();
 8000e66:	f000 fbbd 	bl	80015e4 <Error_Handler>

	/**
	 * Here we tell the temp sensor that we want to read two bytes from
	 * the register (temp_Integer (0x1F = 31) and the next byte temp_fraction (0x20 = 32).
	 */
	if (HAL_I2C_Master_Receive(&handleI2C, HEARTRATE4_ADDR << 1, buf, 2, HAL_MAX_DELAY) == HAL_ERROR) {
 8000e6a:	f107 0218 	add.w	r2, r7, #24
 8000e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e72:	9300      	str	r3, [sp, #0]
 8000e74:	2302      	movs	r3, #2
 8000e76:	21ae      	movs	r1, #174	; 0xae
 8000e78:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8000e7c:	f001 fb04 	bl	8002488 <HAL_I2C_Master_Receive>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d101      	bne.n	8000e8a <hr4_get_chipTemp+0x92>
		Error_Handler();
 8000e86:	f000 fbad 	bl	80015e4 <Error_Handler>
	}




	float floatSum = buf[0] + 0.0625 * buf[1];
 8000e8a:	7e3b      	ldrb	r3, [r7, #24]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff fc83 	bl	8000798 <__aeabi_i2d>
 8000e92:	4604      	mov	r4, r0
 8000e94:	460d      	mov	r5, r1
 8000e96:	7e7b      	ldrb	r3, [r7, #25]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff fc7d 	bl	8000798 <__aeabi_i2d>
 8000e9e:	f04f 0200 	mov.w	r2, #0
 8000ea2:	4b1a      	ldr	r3, [pc, #104]	; (8000f0c <hr4_get_chipTemp+0x114>)
 8000ea4:	f7ff f9fc 	bl	80002a0 <__aeabi_dmul>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	460b      	mov	r3, r1
 8000eac:	4620      	mov	r0, r4
 8000eae:	4629      	mov	r1, r5
 8000eb0:	f7ff fb26 	bl	8000500 <__adddf3>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	460b      	mov	r3, r1
 8000eb8:	4610      	mov	r0, r2
 8000eba:	4619      	mov	r1, r3
 8000ebc:	f7ff fcd6 	bl	800086c <__aeabi_d2f>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	627b      	str	r3, [r7, #36]	; 0x24



	// Nonblocking Function
	// Print temperature
	if (HAL_UART_Transmit(&handleUART, str_tmp, sprintf((char *) str_tmp, "%d\\n\r", (int) floatSum), 1000) == HAL_ERROR)
 8000ec4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000ec8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ecc:	463b      	mov	r3, r7
 8000ece:	ee17 2a90 	vmov	r2, s15
 8000ed2:	490f      	ldr	r1, [pc, #60]	; (8000f10 <hr4_get_chipTemp+0x118>)
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f007 fdcd 	bl	8008a74 <siprintf>
 8000eda:	4603      	mov	r3, r0
 8000edc:	b29a      	uxth	r2, r3
 8000ede:	4639      	mov	r1, r7
 8000ee0:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 8000ee4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ee8:	f003 fb74 	bl	80045d4 <HAL_UART_Transmit>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d101      	bne.n	8000ef6 <hr4_get_chipTemp+0xfe>
	{
		Error_Handler();
 8000ef2:	f000 fb77 	bl	80015e4 <Error_Handler>
	}




}
 8000ef6:	bf00      	nop
 8000ef8:	3728      	adds	r7, #40	; 0x28
 8000efa:	46bd      	mov	sp, r7
 8000efc:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000f00:	b004      	add	sp, #16
 8000f02:	4770      	bx	lr
 8000f04:	080098d1 	.word	0x080098d1
 8000f08:	080098d2 	.word	0x080098d2
 8000f0c:	3fb00000 	.word	0x3fb00000
 8000f10:	0800980c 	.word	0x0800980c

08000f14 <wifi_click_init>:

char AT_GETIP[] = "AT+CIFSR\r\n";

char RX_Buffer[500];

void wifi_click_init(void) {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, (uint8_t*)AT_TEST, strlen(AT_TEST), HAL_MAX_DELAY);
 8000f18:	4856      	ldr	r0, [pc, #344]	; (8001074 <wifi_click_init+0x160>)
 8000f1a:	f7ff f963 	bl	80001e4 <strlen>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	b29a      	uxth	r2, r3
 8000f22:	f04f 33ff 	mov.w	r3, #4294967295
 8000f26:	4953      	ldr	r1, [pc, #332]	; (8001074 <wifi_click_init+0x160>)
 8000f28:	4853      	ldr	r0, [pc, #332]	; (8001078 <wifi_click_init+0x164>)
 8000f2a:	f003 fb53 	bl	80045d4 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1,(uint8_t*)RX_Buffer,500,5000);
 8000f2e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000f32:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000f36:	4951      	ldr	r1, [pc, #324]	; (800107c <wifi_click_init+0x168>)
 8000f38:	484f      	ldr	r0, [pc, #316]	; (8001078 <wifi_click_init+0x164>)
 8000f3a:	f003 fbdf 	bl	80046fc <HAL_UART_Receive>
	HAL_UART_Transmit(&huart2, (uint8_t*)RX_Buffer, strlen(RX_Buffer), HAL_MAX_DELAY);
 8000f3e:	484f      	ldr	r0, [pc, #316]	; (800107c <wifi_click_init+0x168>)
 8000f40:	f7ff f950 	bl	80001e4 <strlen>
 8000f44:	4603      	mov	r3, r0
 8000f46:	b29a      	uxth	r2, r3
 8000f48:	f04f 33ff 	mov.w	r3, #4294967295
 8000f4c:	494b      	ldr	r1, [pc, #300]	; (800107c <wifi_click_init+0x168>)
 8000f4e:	484c      	ldr	r0, [pc, #304]	; (8001080 <wifi_click_init+0x16c>)
 8000f50:	f003 fb40 	bl	80045d4 <HAL_UART_Transmit>
	HAL_Delay(2000);
 8000f54:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f58:	f000 fe0a 	bl	8001b70 <HAL_Delay>

	HAL_UART_Transmit(&huart1, (uint8_t*)AT_MODESEL, strlen(AT_MODESEL), HAL_MAX_DELAY);
 8000f5c:	4849      	ldr	r0, [pc, #292]	; (8001084 <wifi_click_init+0x170>)
 8000f5e:	f7ff f941 	bl	80001e4 <strlen>
 8000f62:	4603      	mov	r3, r0
 8000f64:	b29a      	uxth	r2, r3
 8000f66:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6a:	4946      	ldr	r1, [pc, #280]	; (8001084 <wifi_click_init+0x170>)
 8000f6c:	4842      	ldr	r0, [pc, #264]	; (8001078 <wifi_click_init+0x164>)
 8000f6e:	f003 fb31 	bl	80045d4 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1,(uint8_t*)RX_Buffer,500,5000);
 8000f72:	f241 3388 	movw	r3, #5000	; 0x1388
 8000f76:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000f7a:	4940      	ldr	r1, [pc, #256]	; (800107c <wifi_click_init+0x168>)
 8000f7c:	483e      	ldr	r0, [pc, #248]	; (8001078 <wifi_click_init+0x164>)
 8000f7e:	f003 fbbd 	bl	80046fc <HAL_UART_Receive>
	HAL_UART_Transmit(&huart2, (uint8_t*)RX_Buffer, strlen(RX_Buffer), HAL_MAX_DELAY);
 8000f82:	483e      	ldr	r0, [pc, #248]	; (800107c <wifi_click_init+0x168>)
 8000f84:	f7ff f92e 	bl	80001e4 <strlen>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	b29a      	uxth	r2, r3
 8000f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f90:	493a      	ldr	r1, [pc, #232]	; (800107c <wifi_click_init+0x168>)
 8000f92:	483b      	ldr	r0, [pc, #236]	; (8001080 <wifi_click_init+0x16c>)
 8000f94:	f003 fb1e 	bl	80045d4 <HAL_UART_Transmit>
	HAL_Delay(2000);
 8000f98:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f9c:	f000 fde8 	bl	8001b70 <HAL_Delay>

	HAL_UART_Transmit(&huart1, (uint8_t*)AT_SETIPSTATIC, strlen(AT_SETIPSTATIC), HAL_MAX_DELAY);
 8000fa0:	4839      	ldr	r0, [pc, #228]	; (8001088 <wifi_click_init+0x174>)
 8000fa2:	f7ff f91f 	bl	80001e4 <strlen>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	b29a      	uxth	r2, r3
 8000faa:	f04f 33ff 	mov.w	r3, #4294967295
 8000fae:	4936      	ldr	r1, [pc, #216]	; (8001088 <wifi_click_init+0x174>)
 8000fb0:	4831      	ldr	r0, [pc, #196]	; (8001078 <wifi_click_init+0x164>)
 8000fb2:	f003 fb0f 	bl	80045d4 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1,(uint8_t*)RX_Buffer,500,5000);
 8000fb6:	f241 3388 	movw	r3, #5000	; 0x1388
 8000fba:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000fbe:	492f      	ldr	r1, [pc, #188]	; (800107c <wifi_click_init+0x168>)
 8000fc0:	482d      	ldr	r0, [pc, #180]	; (8001078 <wifi_click_init+0x164>)
 8000fc2:	f003 fb9b 	bl	80046fc <HAL_UART_Receive>
	HAL_UART_Transmit(&huart2, (uint8_t*)RX_Buffer, strlen(RX_Buffer), HAL_MAX_DELAY);
 8000fc6:	482d      	ldr	r0, [pc, #180]	; (800107c <wifi_click_init+0x168>)
 8000fc8:	f7ff f90c 	bl	80001e4 <strlen>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	b29a      	uxth	r2, r3
 8000fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd4:	4929      	ldr	r1, [pc, #164]	; (800107c <wifi_click_init+0x168>)
 8000fd6:	482a      	ldr	r0, [pc, #168]	; (8001080 <wifi_click_init+0x16c>)
 8000fd8:	f003 fafc 	bl	80045d4 <HAL_UART_Transmit>
	HAL_Delay(2000);
 8000fdc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000fe0:	f000 fdc6 	bl	8001b70 <HAL_Delay>

	HAL_UART_Transmit(&huart1, (uint8_t*)AT_WIFICONNECT, strlen(AT_WIFICONNECT), HAL_MAX_DELAY);
 8000fe4:	4829      	ldr	r0, [pc, #164]	; (800108c <wifi_click_init+0x178>)
 8000fe6:	f7ff f8fd 	bl	80001e4 <strlen>
 8000fea:	4603      	mov	r3, r0
 8000fec:	b29a      	uxth	r2, r3
 8000fee:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff2:	4926      	ldr	r1, [pc, #152]	; (800108c <wifi_click_init+0x178>)
 8000ff4:	4820      	ldr	r0, [pc, #128]	; (8001078 <wifi_click_init+0x164>)
 8000ff6:	f003 faed 	bl	80045d4 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1,(uint8_t*)RX_Buffer,500,5000);
 8000ffa:	f241 3388 	movw	r3, #5000	; 0x1388
 8000ffe:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001002:	491e      	ldr	r1, [pc, #120]	; (800107c <wifi_click_init+0x168>)
 8001004:	481c      	ldr	r0, [pc, #112]	; (8001078 <wifi_click_init+0x164>)
 8001006:	f003 fb79 	bl	80046fc <HAL_UART_Receive>
	HAL_UART_Transmit(&huart2, (uint8_t*)RX_Buffer, strlen(RX_Buffer), HAL_MAX_DELAY);
 800100a:	481c      	ldr	r0, [pc, #112]	; (800107c <wifi_click_init+0x168>)
 800100c:	f7ff f8ea 	bl	80001e4 <strlen>
 8001010:	4603      	mov	r3, r0
 8001012:	b29a      	uxth	r2, r3
 8001014:	f04f 33ff 	mov.w	r3, #4294967295
 8001018:	4918      	ldr	r1, [pc, #96]	; (800107c <wifi_click_init+0x168>)
 800101a:	4819      	ldr	r0, [pc, #100]	; (8001080 <wifi_click_init+0x16c>)
 800101c:	f003 fada 	bl	80045d4 <HAL_UART_Transmit>
	HAL_Delay(5000);
 8001020:	f241 3088 	movw	r0, #5000	; 0x1388
 8001024:	f000 fda4 	bl	8001b70 <HAL_Delay>

	memset(RX_Buffer,0,sizeof(RX_Buffer));
 8001028:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800102c:	2100      	movs	r1, #0
 800102e:	4813      	ldr	r0, [pc, #76]	; (800107c <wifi_click_init+0x168>)
 8001030:	f007 fbcd 	bl	80087ce <memset>

	HAL_UART_Transmit(&huart1, (uint8_t*)AT_GETIP, strlen(AT_GETIP), HAL_MAX_DELAY);
 8001034:	4816      	ldr	r0, [pc, #88]	; (8001090 <wifi_click_init+0x17c>)
 8001036:	f7ff f8d5 	bl	80001e4 <strlen>
 800103a:	4603      	mov	r3, r0
 800103c:	b29a      	uxth	r2, r3
 800103e:	f04f 33ff 	mov.w	r3, #4294967295
 8001042:	4913      	ldr	r1, [pc, #76]	; (8001090 <wifi_click_init+0x17c>)
 8001044:	480c      	ldr	r0, [pc, #48]	; (8001078 <wifi_click_init+0x164>)
 8001046:	f003 fac5 	bl	80045d4 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1,(uint8_t*)RX_Buffer,500,5000);
 800104a:	f241 3388 	movw	r3, #5000	; 0x1388
 800104e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001052:	490a      	ldr	r1, [pc, #40]	; (800107c <wifi_click_init+0x168>)
 8001054:	4808      	ldr	r0, [pc, #32]	; (8001078 <wifi_click_init+0x164>)
 8001056:	f003 fb51 	bl	80046fc <HAL_UART_Receive>
	HAL_UART_Transmit(&huart2, (uint8_t*)RX_Buffer, strlen(RX_Buffer), HAL_MAX_DELAY);
 800105a:	4808      	ldr	r0, [pc, #32]	; (800107c <wifi_click_init+0x168>)
 800105c:	f7ff f8c2 	bl	80001e4 <strlen>
 8001060:	4603      	mov	r3, r0
 8001062:	b29a      	uxth	r2, r3
 8001064:	f04f 33ff 	mov.w	r3, #4294967295
 8001068:	4904      	ldr	r1, [pc, #16]	; (800107c <wifi_click_init+0x168>)
 800106a:	4805      	ldr	r0, [pc, #20]	; (8001080 <wifi_click_init+0x16c>)
 800106c:	f003 fab2 	bl	80045d4 <HAL_UART_Transmit>
}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20000000 	.word	0x20000000
 8001078:	20001a98 	.word	0x20001a98
 800107c:	20001bec 	.word	0x20001bec
 8001080:	20001b68 	.word	0x20001b68
 8001084:	20000008 	.word	0x20000008
 8001088:	20000018 	.word	0x20000018
 800108c:	20000038 	.word	0x20000038
 8001090:	20000060 	.word	0x20000060

08001094 <wifi_click_send_test>:

void wifi_click_send_test(void) {
 8001094:	b5b0      	push	{r4, r5, r7, lr}
 8001096:	b09e      	sub	sp, #120	; 0x78
 8001098:	af00      	add	r7, sp, #0
//	char AT_CIPSTART[]="AT+CIPSTART=\"TCP\",\"192.168.1.69\",6000\r\n";
	char AT_CIPSTART[]="AT+CIPSTART=\"TCP\",\"192.168.157.53\",6000\r\n";
 800109a:	4b39      	ldr	r3, [pc, #228]	; (8001180 <wifi_click_send_test+0xec>)
 800109c:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80010a0:	461d      	mov	r5, r3
 80010a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010ae:	c403      	stmia	r4!, {r0, r1}
 80010b0:	8022      	strh	r2, [r4, #0]
	char AT_CIPCLOSE[]="AT+CIPCLOSE\r\n"; //close TCP connection string
 80010b2:	4b34      	ldr	r3, [pc, #208]	; (8001184 <wifi_click_send_test+0xf0>)
 80010b4:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80010b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010ba:	c407      	stmia	r4!, {r0, r1, r2}
 80010bc:	8023      	strh	r3, [r4, #0]
	char TEST_MSG[]="A big brown fox jumps over...\r\n";  //prepare string to be send - just a test message
 80010be:	4b32      	ldr	r3, [pc, #200]	; (8001188 <wifi_click_send_test+0xf4>)
 80010c0:	f107 0418 	add.w	r4, r7, #24
 80010c4:	461d      	mov	r5, r3
 80010c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010ca:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80010ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
						      "api_key=tPmAT5Ab3j7F9&sensor=BME280&location=Office&value1=24.75&value2=49.54&value3=1005.14";
*/
	char AT_CIPSEND_MSG[20];

	//get length
	int lenghtOfData = strlen(TEST_MSG);
 80010d2:	f107 0318 	add.w	r3, r7, #24
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff f884 	bl	80001e4 <strlen>
 80010dc:	4603      	mov	r3, r0
 80010de:	677b      	str	r3, [r7, #116]	; 0x74

	//prepare string with the length of data to be expected by WiFi-Click
	sprintf(AT_CIPSEND_MSG, "AT+CIPSEND=%d\r\n", lenghtOfData);
 80010e0:	1d3b      	adds	r3, r7, #4
 80010e2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80010e4:	4929      	ldr	r1, [pc, #164]	; (800118c <wifi_click_send_test+0xf8>)
 80010e6:	4618      	mov	r0, r3
 80010e8:	f007 fcc4 	bl	8008a74 <siprintf>

	/* sending string variables via UART -> UART1 = wi-fi; UART2 = serial terminal;*/
	//establish TCP connection
	HAL_UART_Transmit(&huart1, (uint8_t*)AT_CIPSTART, strlen(AT_CIPSTART), HAL_MAX_DELAY);
 80010ec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff f877 	bl	80001e4 <strlen>
 80010f6:	4603      	mov	r3, r0
 80010f8:	b29a      	uxth	r2, r3
 80010fa:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80010fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001102:	4823      	ldr	r0, [pc, #140]	; (8001190 <wifi_click_send_test+0xfc>)
 8001104:	f003 fa66 	bl	80045d4 <HAL_UART_Transmit>
	osDelay(1000);
 8001108:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800110c:	f004 fd8e 	bl	8005c2c <osDelay>

	//let esp32 know how much data to expect
	HAL_UART_Transmit(&huart1, (uint8_t*)AT_CIPSEND_MSG, strlen(AT_CIPSEND_MSG), HAL_MAX_DELAY);
 8001110:	1d3b      	adds	r3, r7, #4
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff f866 	bl	80001e4 <strlen>
 8001118:	4603      	mov	r3, r0
 800111a:	b29a      	uxth	r2, r3
 800111c:	1d39      	adds	r1, r7, #4
 800111e:	f04f 33ff 	mov.w	r3, #4294967295
 8001122:	481b      	ldr	r0, [pc, #108]	; (8001190 <wifi_click_send_test+0xfc>)
 8001124:	f003 fa56 	bl	80045d4 <HAL_UART_Transmit>
	osDelay(1000);
 8001128:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800112c:	f004 fd7e 	bl	8005c2c <osDelay>

	// send data via wifi
	HAL_UART_Transmit(&huart1, (uint8_t*)TEST_MSG, strlen(TEST_MSG), HAL_MAX_DELAY);
 8001130:	f107 0318 	add.w	r3, r7, #24
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff f855 	bl	80001e4 <strlen>
 800113a:	4603      	mov	r3, r0
 800113c:	b29a      	uxth	r2, r3
 800113e:	f107 0118 	add.w	r1, r7, #24
 8001142:	f04f 33ff 	mov.w	r3, #4294967295
 8001146:	4812      	ldr	r0, [pc, #72]	; (8001190 <wifi_click_send_test+0xfc>)
 8001148:	f003 fa44 	bl	80045d4 <HAL_UART_Transmit>
//	osDelay(1000);
	osDelay(5000);
 800114c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001150:	f004 fd6c 	bl	8005c2c <osDelay>

	//close TCP connection
	HAL_UART_Transmit(&huart1, (uint8_t*)AT_CIPCLOSE, strlen(AT_CIPCLOSE), HAL_MAX_DELAY);
 8001154:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff f843 	bl	80001e4 <strlen>
 800115e:	4603      	mov	r3, r0
 8001160:	b29a      	uxth	r2, r3
 8001162:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001166:	f04f 33ff 	mov.w	r3, #4294967295
 800116a:	4809      	ldr	r0, [pc, #36]	; (8001190 <wifi_click_send_test+0xfc>)
 800116c:	f003 fa32 	bl	80045d4 <HAL_UART_Transmit>
	osDelay(1000);
 8001170:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001174:	f004 fd5a 	bl	8005c2c <osDelay>
}
 8001178:	bf00      	nop
 800117a:	3778      	adds	r7, #120	; 0x78
 800117c:	46bd      	mov	sp, r7
 800117e:	bdb0      	pop	{r4, r5, r7, pc}
 8001180:	08009828 	.word	0x08009828
 8001184:	08009854 	.word	0x08009854
 8001188:	08009864 	.word	0x08009864
 800118c:	08009818 	.word	0x08009818
 8001190:	20001a98 	.word	0x20001a98

08001194 <__io_putchar>:
/* USER CODE BEGIN 0 */
uint8_t ringBuffer[BUFFERSIZE]; // I receive my input from the Hal_Uart_Receive Function
char *welcome = "\n\radmin@work:~$: ";

// Print given character on UART 2. Translate '\n' to "\r\n" on the fly.
int __io_putchar(int ch) {
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
	int ret;
	while ((ret = HAL_UART_GetState(&huart2)) != HAL_UART_STATE_READY)
 800119c:	bf00      	nop
 800119e:	480f      	ldr	r0, [pc, #60]	; (80011dc <__io_putchar+0x48>)
 80011a0:	f003 feee 	bl	8004f80 <HAL_UART_GetState>
 80011a4:	4603      	mov	r3, r0
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	2b20      	cmp	r3, #32
 80011ac:	d1f7      	bne.n	800119e <__io_putchar+0xa>
		;
	if (ch == '\n') {
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2b0a      	cmp	r3, #10
 80011b2:	d105      	bne.n	80011c0 <__io_putchar+0x2c>
		static uint8_t buf[2] = {'\r', '\n'};
		HAL_UART_Transmit_IT(&huart2, buf, sizeof(buf));
 80011b4:	2202      	movs	r2, #2
 80011b6:	490a      	ldr	r1, [pc, #40]	; (80011e0 <__io_putchar+0x4c>)
 80011b8:	4808      	ldr	r0, [pc, #32]	; (80011dc <__io_putchar+0x48>)
 80011ba:	f003 fb71 	bl	80048a0 <HAL_UART_Transmit_IT>
 80011be:	e008      	b.n	80011d2 <__io_putchar+0x3e>
	} else {
		static char buf;
		buf = ch;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	b2da      	uxtb	r2, r3
 80011c4:	4b07      	ldr	r3, [pc, #28]	; (80011e4 <__io_putchar+0x50>)
 80011c6:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart2, (uint8_t *)&buf, 1);
 80011c8:	2201      	movs	r2, #1
 80011ca:	4906      	ldr	r1, [pc, #24]	; (80011e4 <__io_putchar+0x50>)
 80011cc:	4803      	ldr	r0, [pc, #12]	; (80011dc <__io_putchar+0x48>)
 80011ce:	f003 fb67 	bl	80048a0 <HAL_UART_Transmit_IT>
	}
	return ch;
 80011d2:	687b      	ldr	r3, [r7, #4]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20001b68 	.word	0x20001b68
 80011e0:	2000006c 	.word	0x2000006c
 80011e4:	20000100 	.word	0x20000100

080011e8 <_write>:

// So we do not use the printf on the stdio but bend it to UART */
int _write(int file, char *ptr, int len)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
	for (int DataIdx = 0; DataIdx < len; DataIdx++) {
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]
 80011f8:	e009      	b.n	800120e <_write+0x26>
		__io_putchar(*ptr++);
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	1c5a      	adds	r2, r3, #1
 80011fe:	60ba      	str	r2, [r7, #8]
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff ffc6 	bl	8001194 <__io_putchar>
	for (int DataIdx = 0; DataIdx < len; DataIdx++) {
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	3301      	adds	r3, #1
 800120c:	617b      	str	r3, [r7, #20]
 800120e:	697a      	ldr	r2, [r7, #20]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	429a      	cmp	r2, r3
 8001214:	dbf1      	blt.n	80011fa <_write+0x12>
	}
	return len;
 8001216:	687b      	ldr	r3, [r7, #4]
}
 8001218:	4618      	mov	r0, r3
 800121a:	3718      	adds	r7, #24
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001224:	f000 fc6b 	bl	8001afe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001228:	f000 f82c 	bl	8001284 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800122c:	f000 f92c 	bl	8001488 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001230:	f000 f8fa 	bl	8001428 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001234:	f000 f888 	bl	8001348 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001238:	f000 f8c6 	bl	80013c8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

	//connect to the wifi
	wifi_click_init();
 800123c:	f7ff fe6a 	bl	8000f14 <wifi_click_init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001240:	f004 fc18 	bl	8005a74 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ChipTemp */
  ChipTempHandle = osThreadNew(StartChipTemp, NULL, &ChipTemp_attributes);
 8001244:	4a09      	ldr	r2, [pc, #36]	; (800126c <main+0x4c>)
 8001246:	2100      	movs	r1, #0
 8001248:	4809      	ldr	r0, [pc, #36]	; (8001270 <main+0x50>)
 800124a:	f004 fc5d 	bl	8005b08 <osThreadNew>
 800124e:	4603      	mov	r3, r0
 8001250:	4a08      	ldr	r2, [pc, #32]	; (8001274 <main+0x54>)
 8001252:	6013      	str	r3, [r2, #0]

  /* creation of wifi_click_tx */
  wifi_click_txHandle = osThreadNew(wifi_click_tx_func, NULL, &wifi_click_tx_attributes);
 8001254:	4a08      	ldr	r2, [pc, #32]	; (8001278 <main+0x58>)
 8001256:	2100      	movs	r1, #0
 8001258:	4808      	ldr	r0, [pc, #32]	; (800127c <main+0x5c>)
 800125a:	f004 fc55 	bl	8005b08 <osThreadNew>
 800125e:	4603      	mov	r3, r0
 8001260:	4a07      	ldr	r2, [pc, #28]	; (8001280 <main+0x60>)
 8001262:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001264:	f004 fc2a 	bl	8005abc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001268:	e7fe      	b.n	8001268 <main+0x48>
 800126a:	bf00      	nop
 800126c:	080098d4 	.word	0x080098d4
 8001270:	0800151d 	.word	0x0800151d
 8001274:	20001ef0 	.word	0x20001ef0
 8001278:	080098f8 	.word	0x080098f8
 800127c:	080015a9 	.word	0x080015a9
 8001280:	200020f4 	.word	0x200020f4

08001284 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b096      	sub	sp, #88	; 0x58
 8001288:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800128a:	f107 0314 	add.w	r3, r7, #20
 800128e:	2244      	movs	r2, #68	; 0x44
 8001290:	2100      	movs	r1, #0
 8001292:	4618      	mov	r0, r3
 8001294:	f007 fa9b 	bl	80087ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001298:	463b      	mov	r3, r7
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
 80012a0:	609a      	str	r2, [r3, #8]
 80012a2:	60da      	str	r2, [r3, #12]
 80012a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80012a6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80012aa:	f001 fd11 	bl	8002cd0 <HAL_PWREx_ControlVoltageScaling>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80012b4:	f000 f996 	bl	80015e4 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80012b8:	f001 fcec 	bl	8002c94 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80012bc:	4b21      	ldr	r3, [pc, #132]	; (8001344 <SystemClock_Config+0xc0>)
 80012be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012c2:	4a20      	ldr	r2, [pc, #128]	; (8001344 <SystemClock_Config+0xc0>)
 80012c4:	f023 0318 	bic.w	r3, r3, #24
 80012c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80012cc:	2314      	movs	r3, #20
 80012ce:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80012d0:	2301      	movs	r3, #1
 80012d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80012d4:	2301      	movs	r3, #1
 80012d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80012d8:	2300      	movs	r3, #0
 80012da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80012dc:	2360      	movs	r3, #96	; 0x60
 80012de:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012e0:	2302      	movs	r3, #2
 80012e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80012e4:	2301      	movs	r3, #1
 80012e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80012e8:	2301      	movs	r3, #1
 80012ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80012ec:	2310      	movs	r3, #16
 80012ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80012f0:	2307      	movs	r3, #7
 80012f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80012f4:	2302      	movs	r3, #2
 80012f6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80012f8:	2302      	movs	r3, #2
 80012fa:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012fc:	f107 0314 	add.w	r3, r7, #20
 8001300:	4618      	mov	r0, r3
 8001302:	f001 fd3b 	bl	8002d7c <HAL_RCC_OscConfig>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800130c:	f000 f96a 	bl	80015e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001310:	230f      	movs	r3, #15
 8001312:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001314:	2303      	movs	r3, #3
 8001316:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001318:	2300      	movs	r3, #0
 800131a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800131c:	2300      	movs	r3, #0
 800131e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001320:	2300      	movs	r3, #0
 8001322:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001324:	463b      	mov	r3, r7
 8001326:	2101      	movs	r1, #1
 8001328:	4618      	mov	r0, r3
 800132a:	f002 f939 	bl	80035a0 <HAL_RCC_ClockConfig>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001334:	f000 f956 	bl	80015e4 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001338:	f002 fd7c 	bl	8003e34 <HAL_RCCEx_EnableMSIPLLMode>
}
 800133c:	bf00      	nop
 800133e:	3758      	adds	r7, #88	; 0x58
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40021000 	.word	0x40021000

08001348 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800134c:	4b1b      	ldr	r3, [pc, #108]	; (80013bc <MX_I2C1_Init+0x74>)
 800134e:	4a1c      	ldr	r2, [pc, #112]	; (80013c0 <MX_I2C1_Init+0x78>)
 8001350:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8001352:	4b1a      	ldr	r3, [pc, #104]	; (80013bc <MX_I2C1_Init+0x74>)
 8001354:	4a1b      	ldr	r2, [pc, #108]	; (80013c4 <MX_I2C1_Init+0x7c>)
 8001356:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001358:	4b18      	ldr	r3, [pc, #96]	; (80013bc <MX_I2C1_Init+0x74>)
 800135a:	2200      	movs	r2, #0
 800135c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800135e:	4b17      	ldr	r3, [pc, #92]	; (80013bc <MX_I2C1_Init+0x74>)
 8001360:	2201      	movs	r2, #1
 8001362:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001364:	4b15      	ldr	r3, [pc, #84]	; (80013bc <MX_I2C1_Init+0x74>)
 8001366:	2200      	movs	r2, #0
 8001368:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800136a:	4b14      	ldr	r3, [pc, #80]	; (80013bc <MX_I2C1_Init+0x74>)
 800136c:	2200      	movs	r2, #0
 800136e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001370:	4b12      	ldr	r3, [pc, #72]	; (80013bc <MX_I2C1_Init+0x74>)
 8001372:	2200      	movs	r2, #0
 8001374:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001376:	4b11      	ldr	r3, [pc, #68]	; (80013bc <MX_I2C1_Init+0x74>)
 8001378:	2200      	movs	r2, #0
 800137a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800137c:	4b0f      	ldr	r3, [pc, #60]	; (80013bc <MX_I2C1_Init+0x74>)
 800137e:	2200      	movs	r2, #0
 8001380:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001382:	480e      	ldr	r0, [pc, #56]	; (80013bc <MX_I2C1_Init+0x74>)
 8001384:	f000 fefc 	bl	8002180 <HAL_I2C_Init>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800138e:	f000 f929 	bl	80015e4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001392:	2100      	movs	r1, #0
 8001394:	4809      	ldr	r0, [pc, #36]	; (80013bc <MX_I2C1_Init+0x74>)
 8001396:	f001 fbe5 	bl	8002b64 <HAL_I2CEx_ConfigAnalogFilter>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80013a0:	f000 f920 	bl	80015e4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80013a4:	2100      	movs	r1, #0
 80013a6:	4805      	ldr	r0, [pc, #20]	; (80013bc <MX_I2C1_Init+0x74>)
 80013a8:	f001 fc27 	bl	8002bfa <HAL_I2CEx_ConfigDigitalFilter>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80013b2:	f000 f917 	bl	80015e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20001e9c 	.word	0x20001e9c
 80013c0:	40005400 	.word	0x40005400
 80013c4:	00707cbb 	.word	0x00707cbb

080013c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013cc:	4b14      	ldr	r3, [pc, #80]	; (8001420 <MX_USART1_UART_Init+0x58>)
 80013ce:	4a15      	ldr	r2, [pc, #84]	; (8001424 <MX_USART1_UART_Init+0x5c>)
 80013d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013d2:	4b13      	ldr	r3, [pc, #76]	; (8001420 <MX_USART1_UART_Init+0x58>)
 80013d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013da:	4b11      	ldr	r3, [pc, #68]	; (8001420 <MX_USART1_UART_Init+0x58>)
 80013dc:	2200      	movs	r2, #0
 80013de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013e0:	4b0f      	ldr	r3, [pc, #60]	; (8001420 <MX_USART1_UART_Init+0x58>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013e6:	4b0e      	ldr	r3, [pc, #56]	; (8001420 <MX_USART1_UART_Init+0x58>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013ec:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <MX_USART1_UART_Init+0x58>)
 80013ee:	220c      	movs	r2, #12
 80013f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013f2:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <MX_USART1_UART_Init+0x58>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013f8:	4b09      	ldr	r3, [pc, #36]	; (8001420 <MX_USART1_UART_Init+0x58>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013fe:	4b08      	ldr	r3, [pc, #32]	; (8001420 <MX_USART1_UART_Init+0x58>)
 8001400:	2200      	movs	r2, #0
 8001402:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001404:	4b06      	ldr	r3, [pc, #24]	; (8001420 <MX_USART1_UART_Init+0x58>)
 8001406:	2200      	movs	r2, #0
 8001408:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800140a:	4805      	ldr	r0, [pc, #20]	; (8001420 <MX_USART1_UART_Init+0x58>)
 800140c:	f003 f894 	bl	8004538 <HAL_UART_Init>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001416:	f000 f8e5 	bl	80015e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20001a98 	.word	0x20001a98
 8001424:	40013800 	.word	0x40013800

08001428 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800142c:	4b14      	ldr	r3, [pc, #80]	; (8001480 <MX_USART2_UART_Init+0x58>)
 800142e:	4a15      	ldr	r2, [pc, #84]	; (8001484 <MX_USART2_UART_Init+0x5c>)
 8001430:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001432:	4b13      	ldr	r3, [pc, #76]	; (8001480 <MX_USART2_UART_Init+0x58>)
 8001434:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001438:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800143a:	4b11      	ldr	r3, [pc, #68]	; (8001480 <MX_USART2_UART_Init+0x58>)
 800143c:	2200      	movs	r2, #0
 800143e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001440:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <MX_USART2_UART_Init+0x58>)
 8001442:	2200      	movs	r2, #0
 8001444:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001446:	4b0e      	ldr	r3, [pc, #56]	; (8001480 <MX_USART2_UART_Init+0x58>)
 8001448:	2200      	movs	r2, #0
 800144a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800144c:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <MX_USART2_UART_Init+0x58>)
 800144e:	220c      	movs	r2, #12
 8001450:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001452:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <MX_USART2_UART_Init+0x58>)
 8001454:	2200      	movs	r2, #0
 8001456:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001458:	4b09      	ldr	r3, [pc, #36]	; (8001480 <MX_USART2_UART_Init+0x58>)
 800145a:	2200      	movs	r2, #0
 800145c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800145e:	4b08      	ldr	r3, [pc, #32]	; (8001480 <MX_USART2_UART_Init+0x58>)
 8001460:	2200      	movs	r2, #0
 8001462:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001464:	4b06      	ldr	r3, [pc, #24]	; (8001480 <MX_USART2_UART_Init+0x58>)
 8001466:	2200      	movs	r2, #0
 8001468:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800146a:	4805      	ldr	r0, [pc, #20]	; (8001480 <MX_USART2_UART_Init+0x58>)
 800146c:	f003 f864 	bl	8004538 <HAL_UART_Init>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001476:	f000 f8b5 	bl	80015e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	20001b68 	.word	0x20001b68
 8001484:	40004400 	.word	0x40004400

08001488 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b088      	sub	sp, #32
 800148c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148e:	f107 030c 	add.w	r3, r7, #12
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	605a      	str	r2, [r3, #4]
 8001498:	609a      	str	r2, [r3, #8]
 800149a:	60da      	str	r2, [r3, #12]
 800149c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800149e:	4b1d      	ldr	r3, [pc, #116]	; (8001514 <MX_GPIO_Init+0x8c>)
 80014a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a2:	4a1c      	ldr	r2, [pc, #112]	; (8001514 <MX_GPIO_Init+0x8c>)
 80014a4:	f043 0304 	orr.w	r3, r3, #4
 80014a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014aa:	4b1a      	ldr	r3, [pc, #104]	; (8001514 <MX_GPIO_Init+0x8c>)
 80014ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ae:	f003 0304 	and.w	r3, r3, #4
 80014b2:	60bb      	str	r3, [r7, #8]
 80014b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b6:	4b17      	ldr	r3, [pc, #92]	; (8001514 <MX_GPIO_Init+0x8c>)
 80014b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ba:	4a16      	ldr	r2, [pc, #88]	; (8001514 <MX_GPIO_Init+0x8c>)
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014c2:	4b14      	ldr	r3, [pc, #80]	; (8001514 <MX_GPIO_Init+0x8c>)
 80014c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	607b      	str	r3, [r7, #4]
 80014cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ce:	4b11      	ldr	r3, [pc, #68]	; (8001514 <MX_GPIO_Init+0x8c>)
 80014d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d2:	4a10      	ldr	r2, [pc, #64]	; (8001514 <MX_GPIO_Init+0x8c>)
 80014d4:	f043 0302 	orr.w	r3, r3, #2
 80014d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014da:	4b0e      	ldr	r3, [pc, #56]	; (8001514 <MX_GPIO_Init+0x8c>)
 80014dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	603b      	str	r3, [r7, #0]
 80014e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80014e6:	2200      	movs	r2, #0
 80014e8:	2108      	movs	r1, #8
 80014ea:	480b      	ldr	r0, [pc, #44]	; (8001518 <MX_GPIO_Init+0x90>)
 80014ec:	f000 fe30 	bl	8002150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80014f0:	2308      	movs	r3, #8
 80014f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f4:	2301      	movs	r3, #1
 80014f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fc:	2300      	movs	r3, #0
 80014fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001500:	f107 030c 	add.w	r3, r7, #12
 8001504:	4619      	mov	r1, r3
 8001506:	4804      	ldr	r0, [pc, #16]	; (8001518 <MX_GPIO_Init+0x90>)
 8001508:	f000 fcb8 	bl	8001e7c <HAL_GPIO_Init>

}
 800150c:	bf00      	nop
 800150e:	3720      	adds	r7, #32
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40021000 	.word	0x40021000
 8001518:	48000400 	.word	0x48000400

0800151c <StartChipTemp>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartChipTemp */
void StartChipTemp(void *argument)
{
 800151c:	b590      	push	{r4, r7, lr}
 800151e:	b0b9      	sub	sp, #228	; 0xe4
 8001520:	af34      	add	r7, sp, #208	; 0xd0
 8001522:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {


	  printf("Task 1 \n");
 8001524:	481c      	ldr	r0, [pc, #112]	; (8001598 <StartChipTemp+0x7c>)
 8001526:	f007 fa23 	bl	8008970 <puts>


	  // I chose timeout duration '5000' to have enough time to type a command for update interval.
	 	if (HAL_UART_Receive(&huart2, ringBuffer, BUFFERSIZE, 5000) == HAL_ERROR)
 800152a:	f241 3388 	movw	r3, #5000	; 0x1388
 800152e:	220b      	movs	r2, #11
 8001530:	491a      	ldr	r1, [pc, #104]	; (800159c <StartChipTemp+0x80>)
 8001532:	481b      	ldr	r0, [pc, #108]	; (80015a0 <StartChipTemp+0x84>)
 8001534:	f003 f8e2 	bl	80046fc <HAL_UART_Receive>
 8001538:	4603      	mov	r3, r0
 800153a:	2b01      	cmp	r3, #1
 800153c:	d102      	bne.n	8001544 <StartChipTemp+0x28>
	 	{
	 		Error_Handler();
 800153e:	f000 f851 	bl	80015e4 <Error_Handler>
 8001542:	e024      	b.n	800158e <StartChipTemp+0x72>
	 	}else {

	 // Function to send the chip temperature
     // Expected command is '#t,tempa\n'
	 		checkInput(hi2c1, huart2, ringBuffer, 10);
 8001544:	4c17      	ldr	r4, [pc, #92]	; (80015a4 <StartChipTemp+0x88>)
 8001546:	230a      	movs	r3, #10
 8001548:	9333      	str	r3, [sp, #204]	; 0xcc
 800154a:	4b14      	ldr	r3, [pc, #80]	; (800159c <StartChipTemp+0x80>)
 800154c:	9332      	str	r3, [sp, #200]	; 0xc8
 800154e:	4a14      	ldr	r2, [pc, #80]	; (80015a0 <StartChipTemp+0x84>)
 8001550:	ab11      	add	r3, sp, #68	; 0x44
 8001552:	4611      	mov	r1, r2
 8001554:	2284      	movs	r2, #132	; 0x84
 8001556:	4618      	mov	r0, r3
 8001558:	f007 f92b 	bl	80087b2 <memcpy>
 800155c:	4668      	mov	r0, sp
 800155e:	f104 0310 	add.w	r3, r4, #16
 8001562:	2244      	movs	r2, #68	; 0x44
 8001564:	4619      	mov	r1, r3
 8001566:	f007 f924 	bl	80087b2 <memcpy>
 800156a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800156e:	f7ff fb49 	bl	8000c04 <checkInput>

	 // Clean the ringbuffer[BUFFERSIZE]
	 		for(int i = 0; i < BUFFERSIZE; i++) {
 8001572:	2300      	movs	r3, #0
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	e007      	b.n	8001588 <StartChipTemp+0x6c>
	 			ringBuffer[i] = 0;
 8001578:	4a08      	ldr	r2, [pc, #32]	; (800159c <StartChipTemp+0x80>)
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	4413      	add	r3, r2
 800157e:	2200      	movs	r2, #0
 8001580:	701a      	strb	r2, [r3, #0]
	 		for(int i = 0; i < BUFFERSIZE; i++) {
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	3301      	adds	r3, #1
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2b0a      	cmp	r3, #10
 800158c:	ddf4      	ble.n	8001578 <StartChipTemp+0x5c>
	 		}
	 	}



    osDelay(1);
 800158e:	2001      	movs	r0, #1
 8001590:	f004 fb4c 	bl	8005c2c <osDelay>
	  printf("Task 1 \n");
 8001594:	e7c6      	b.n	8001524 <StartChipTemp+0x8>
 8001596:	bf00      	nop
 8001598:	080098b4 	.word	0x080098b4
 800159c:	200029b4 	.word	0x200029b4
 80015a0:	20001b68 	.word	0x20001b68
 80015a4:	20001e9c 	.word	0x20001e9c

080015a8 <wifi_click_tx_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_wifi_click_tx_func */
void wifi_click_tx_func(void *argument)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN wifi_click_tx_func */
  /* Infinite loop */
  for(;;)
  {
		wifi_click_send_test();
 80015b0:	f7ff fd70 	bl	8001094 <wifi_click_send_test>
		osDelay(2000);
 80015b4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80015b8:	f004 fb38 	bl	8005c2c <osDelay>
		wifi_click_send_test();
 80015bc:	e7f8      	b.n	80015b0 <wifi_click_tx_func+0x8>
	...

080015c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a04      	ldr	r2, [pc, #16]	; (80015e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d101      	bne.n	80015d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80015d2:	f000 faad 	bl	8001b30 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80015d6:	bf00      	nop
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40001000 	.word	0x40001000

080015e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015e8:	b672      	cpsid	i
}
 80015ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015ec:	e7fe      	b.n	80015ec <Error_Handler+0x8>
	...

080015f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015f6:	4b11      	ldr	r3, [pc, #68]	; (800163c <HAL_MspInit+0x4c>)
 80015f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015fa:	4a10      	ldr	r2, [pc, #64]	; (800163c <HAL_MspInit+0x4c>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	6613      	str	r3, [r2, #96]	; 0x60
 8001602:	4b0e      	ldr	r3, [pc, #56]	; (800163c <HAL_MspInit+0x4c>)
 8001604:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	607b      	str	r3, [r7, #4]
 800160c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800160e:	4b0b      	ldr	r3, [pc, #44]	; (800163c <HAL_MspInit+0x4c>)
 8001610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001612:	4a0a      	ldr	r2, [pc, #40]	; (800163c <HAL_MspInit+0x4c>)
 8001614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001618:	6593      	str	r3, [r2, #88]	; 0x58
 800161a:	4b08      	ldr	r3, [pc, #32]	; (800163c <HAL_MspInit+0x4c>)
 800161c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800161e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001622:	603b      	str	r3, [r7, #0]
 8001624:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001626:	2200      	movs	r2, #0
 8001628:	210f      	movs	r1, #15
 800162a:	f06f 0001 	mvn.w	r0, #1
 800162e:	f000 fb7b 	bl	8001d28 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40021000 	.word	0x40021000

08001640 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b09e      	sub	sp, #120	; 0x78
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001648:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	609a      	str	r2, [r3, #8]
 8001654:	60da      	str	r2, [r3, #12]
 8001656:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001658:	f107 0310 	add.w	r3, r7, #16
 800165c:	2254      	movs	r2, #84	; 0x54
 800165e:	2100      	movs	r1, #0
 8001660:	4618      	mov	r0, r3
 8001662:	f007 f8b4 	bl	80087ce <memset>
  if(hi2c->Instance==I2C1)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a1e      	ldr	r2, [pc, #120]	; (80016e4 <HAL_I2C_MspInit+0xa4>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d135      	bne.n	80016dc <HAL_I2C_MspInit+0x9c>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001670:	2340      	movs	r3, #64	; 0x40
 8001672:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001674:	2300      	movs	r3, #0
 8001676:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001678:	f107 0310 	add.w	r3, r7, #16
 800167c:	4618      	mov	r0, r3
 800167e:	f002 f9e5 	bl	8003a4c <HAL_RCCEx_PeriphCLKConfig>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001688:	f7ff ffac 	bl	80015e4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800168c:	4b16      	ldr	r3, [pc, #88]	; (80016e8 <HAL_I2C_MspInit+0xa8>)
 800168e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001690:	4a15      	ldr	r2, [pc, #84]	; (80016e8 <HAL_I2C_MspInit+0xa8>)
 8001692:	f043 0302 	orr.w	r3, r3, #2
 8001696:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001698:	4b13      	ldr	r3, [pc, #76]	; (80016e8 <HAL_I2C_MspInit+0xa8>)
 800169a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800169c:	f003 0302 	and.w	r3, r3, #2
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016a4:	23c0      	movs	r3, #192	; 0xc0
 80016a6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016a8:	2312      	movs	r3, #18
 80016aa:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b0:	2303      	movs	r3, #3
 80016b2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016b4:	2304      	movs	r3, #4
 80016b6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80016bc:	4619      	mov	r1, r3
 80016be:	480b      	ldr	r0, [pc, #44]	; (80016ec <HAL_I2C_MspInit+0xac>)
 80016c0:	f000 fbdc 	bl	8001e7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016c4:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <HAL_I2C_MspInit+0xa8>)
 80016c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c8:	4a07      	ldr	r2, [pc, #28]	; (80016e8 <HAL_I2C_MspInit+0xa8>)
 80016ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016ce:	6593      	str	r3, [r2, #88]	; 0x58
 80016d0:	4b05      	ldr	r3, [pc, #20]	; (80016e8 <HAL_I2C_MspInit+0xa8>)
 80016d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016d8:	60bb      	str	r3, [r7, #8]
 80016da:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80016dc:	bf00      	nop
 80016de:	3778      	adds	r7, #120	; 0x78
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40005400 	.word	0x40005400
 80016e8:	40021000 	.word	0x40021000
 80016ec:	48000400 	.word	0x48000400

080016f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b0a0      	sub	sp, #128	; 0x80
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]
 8001706:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001708:	f107 0318 	add.w	r3, r7, #24
 800170c:	2254      	movs	r2, #84	; 0x54
 800170e:	2100      	movs	r1, #0
 8001710:	4618      	mov	r0, r3
 8001712:	f007 f85c 	bl	80087ce <memset>
  if(huart->Instance==USART1)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a4f      	ldr	r2, [pc, #316]	; (8001858 <HAL_UART_MspInit+0x168>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d140      	bne.n	80017a2 <HAL_UART_MspInit+0xb2>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001720:	2301      	movs	r3, #1
 8001722:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001724:	2300      	movs	r3, #0
 8001726:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001728:	f107 0318 	add.w	r3, r7, #24
 800172c:	4618      	mov	r0, r3
 800172e:	f002 f98d 	bl	8003a4c <HAL_RCCEx_PeriphCLKConfig>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001738:	f7ff ff54 	bl	80015e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800173c:	4b47      	ldr	r3, [pc, #284]	; (800185c <HAL_UART_MspInit+0x16c>)
 800173e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001740:	4a46      	ldr	r2, [pc, #280]	; (800185c <HAL_UART_MspInit+0x16c>)
 8001742:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001746:	6613      	str	r3, [r2, #96]	; 0x60
 8001748:	4b44      	ldr	r3, [pc, #272]	; (800185c <HAL_UART_MspInit+0x16c>)
 800174a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800174c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001750:	617b      	str	r3, [r7, #20]
 8001752:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001754:	4b41      	ldr	r3, [pc, #260]	; (800185c <HAL_UART_MspInit+0x16c>)
 8001756:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001758:	4a40      	ldr	r2, [pc, #256]	; (800185c <HAL_UART_MspInit+0x16c>)
 800175a:	f043 0301 	orr.w	r3, r3, #1
 800175e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001760:	4b3e      	ldr	r3, [pc, #248]	; (800185c <HAL_UART_MspInit+0x16c>)
 8001762:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001764:	f003 0301 	and.w	r3, r3, #1
 8001768:	613b      	str	r3, [r7, #16]
 800176a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800176c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001770:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001772:	2302      	movs	r3, #2
 8001774:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800177a:	2303      	movs	r3, #3
 800177c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800177e:	2307      	movs	r3, #7
 8001780:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001782:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001786:	4619      	mov	r1, r3
 8001788:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800178c:	f000 fb76 	bl	8001e7c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001790:	2200      	movs	r2, #0
 8001792:	2105      	movs	r1, #5
 8001794:	2025      	movs	r0, #37	; 0x25
 8001796:	f000 fac7 	bl	8001d28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800179a:	2025      	movs	r0, #37	; 0x25
 800179c:	f000 fae0 	bl	8001d60 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017a0:	e055      	b.n	800184e <HAL_UART_MspInit+0x15e>
  else if(huart->Instance==USART2)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a2e      	ldr	r2, [pc, #184]	; (8001860 <HAL_UART_MspInit+0x170>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d150      	bne.n	800184e <HAL_UART_MspInit+0x15e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80017ac:	2302      	movs	r3, #2
 80017ae:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80017b0:	2300      	movs	r3, #0
 80017b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017b4:	f107 0318 	add.w	r3, r7, #24
 80017b8:	4618      	mov	r0, r3
 80017ba:	f002 f947 	bl	8003a4c <HAL_RCCEx_PeriphCLKConfig>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 80017c4:	f7ff ff0e 	bl	80015e4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80017c8:	4b24      	ldr	r3, [pc, #144]	; (800185c <HAL_UART_MspInit+0x16c>)
 80017ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017cc:	4a23      	ldr	r2, [pc, #140]	; (800185c <HAL_UART_MspInit+0x16c>)
 80017ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017d2:	6593      	str	r3, [r2, #88]	; 0x58
 80017d4:	4b21      	ldr	r3, [pc, #132]	; (800185c <HAL_UART_MspInit+0x16c>)
 80017d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e0:	4b1e      	ldr	r3, [pc, #120]	; (800185c <HAL_UART_MspInit+0x16c>)
 80017e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e4:	4a1d      	ldr	r2, [pc, #116]	; (800185c <HAL_UART_MspInit+0x16c>)
 80017e6:	f043 0301 	orr.w	r3, r3, #1
 80017ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ec:	4b1b      	ldr	r3, [pc, #108]	; (800185c <HAL_UART_MspInit+0x16c>)
 80017ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f0:	f003 0301 	and.w	r3, r3, #1
 80017f4:	60bb      	str	r3, [r7, #8]
 80017f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_Pin;
 80017f8:	2304      	movs	r3, #4
 80017fa:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fc:	2302      	movs	r3, #2
 80017fe:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001804:	2303      	movs	r3, #3
 8001806:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001808:	2307      	movs	r3, #7
 800180a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(USART2_TX_GPIO_Port, &GPIO_InitStruct);
 800180c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001810:	4619      	mov	r1, r3
 8001812:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001816:	f000 fb31 	bl	8001e7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800181a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800181e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001820:	2302      	movs	r3, #2
 8001822:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001824:	2300      	movs	r3, #0
 8001826:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001828:	2303      	movs	r3, #3
 800182a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800182c:	2303      	movs	r3, #3
 800182e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001830:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001834:	4619      	mov	r1, r3
 8001836:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800183a:	f000 fb1f 	bl	8001e7c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800183e:	2200      	movs	r2, #0
 8001840:	2105      	movs	r1, #5
 8001842:	2026      	movs	r0, #38	; 0x26
 8001844:	f000 fa70 	bl	8001d28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001848:	2026      	movs	r0, #38	; 0x26
 800184a:	f000 fa89 	bl	8001d60 <HAL_NVIC_EnableIRQ>
}
 800184e:	bf00      	nop
 8001850:	3780      	adds	r7, #128	; 0x80
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40013800 	.word	0x40013800
 800185c:	40021000 	.word	0x40021000
 8001860:	40004400 	.word	0x40004400

08001864 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b08c      	sub	sp, #48	; 0x30
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800186c:	2300      	movs	r3, #0
 800186e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001870:	2300      	movs	r3, #0
 8001872:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001874:	2200      	movs	r2, #0
 8001876:	6879      	ldr	r1, [r7, #4]
 8001878:	2036      	movs	r0, #54	; 0x36
 800187a:	f000 fa55 	bl	8001d28 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800187e:	2036      	movs	r0, #54	; 0x36
 8001880:	f000 fa6e 	bl	8001d60 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001884:	4b1e      	ldr	r3, [pc, #120]	; (8001900 <HAL_InitTick+0x9c>)
 8001886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001888:	4a1d      	ldr	r2, [pc, #116]	; (8001900 <HAL_InitTick+0x9c>)
 800188a:	f043 0310 	orr.w	r3, r3, #16
 800188e:	6593      	str	r3, [r2, #88]	; 0x58
 8001890:	4b1b      	ldr	r3, [pc, #108]	; (8001900 <HAL_InitTick+0x9c>)
 8001892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001894:	f003 0310 	and.w	r3, r3, #16
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800189c:	f107 0210 	add.w	r2, r7, #16
 80018a0:	f107 0314 	add.w	r3, r7, #20
 80018a4:	4611      	mov	r1, r2
 80018a6:	4618      	mov	r0, r3
 80018a8:	f002 f83e 	bl	8003928 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80018ac:	f002 f810 	bl	80038d0 <HAL_RCC_GetPCLK1Freq>
 80018b0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018b4:	4a13      	ldr	r2, [pc, #76]	; (8001904 <HAL_InitTick+0xa0>)
 80018b6:	fba2 2303 	umull	r2, r3, r2, r3
 80018ba:	0c9b      	lsrs	r3, r3, #18
 80018bc:	3b01      	subs	r3, #1
 80018be:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80018c0:	4b11      	ldr	r3, [pc, #68]	; (8001908 <HAL_InitTick+0xa4>)
 80018c2:	4a12      	ldr	r2, [pc, #72]	; (800190c <HAL_InitTick+0xa8>)
 80018c4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80018c6:	4b10      	ldr	r3, [pc, #64]	; (8001908 <HAL_InitTick+0xa4>)
 80018c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018cc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80018ce:	4a0e      	ldr	r2, [pc, #56]	; (8001908 <HAL_InitTick+0xa4>)
 80018d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018d2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80018d4:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <HAL_InitTick+0xa4>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018da:	4b0b      	ldr	r3, [pc, #44]	; (8001908 <HAL_InitTick+0xa4>)
 80018dc:	2200      	movs	r2, #0
 80018de:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80018e0:	4809      	ldr	r0, [pc, #36]	; (8001908 <HAL_InitTick+0xa4>)
 80018e2:	f002 fba9 	bl	8004038 <HAL_TIM_Base_Init>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d104      	bne.n	80018f6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80018ec:	4806      	ldr	r0, [pc, #24]	; (8001908 <HAL_InitTick+0xa4>)
 80018ee:	f002 fc05 	bl	80040fc <HAL_TIM_Base_Start_IT>
 80018f2:	4603      	mov	r3, r0
 80018f4:	e000      	b.n	80018f8 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3730      	adds	r7, #48	; 0x30
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	40021000 	.word	0x40021000
 8001904:	431bde83 	.word	0x431bde83
 8001908:	20001b1c 	.word	0x20001b1c
 800190c:	40001000 	.word	0x40001000

08001910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001914:	e7fe      	b.n	8001914 <NMI_Handler+0x4>

08001916 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001916:	b480      	push	{r7}
 8001918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800191a:	e7fe      	b.n	800191a <HardFault_Handler+0x4>

0800191c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001920:	e7fe      	b.n	8001920 <MemManage_Handler+0x4>

08001922 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001922:	b480      	push	{r7}
 8001924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001926:	e7fe      	b.n	8001926 <BusFault_Handler+0x4>

08001928 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800192c:	e7fe      	b.n	800192c <UsageFault_Handler+0x4>

0800192e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800192e:	b480      	push	{r7}
 8001930:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001932:	bf00      	nop
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001940:	4802      	ldr	r0, [pc, #8]	; (800194c <USART1_IRQHandler+0x10>)
 8001942:	f003 f81b 	bl	800497c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001946:	bf00      	nop
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	20001a98 	.word	0x20001a98

08001950 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001954:	4802      	ldr	r0, [pc, #8]	; (8001960 <USART2_IRQHandler+0x10>)
 8001956:	f003 f811 	bl	800497c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	20001b68 	.word	0x20001b68

08001964 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001968:	4802      	ldr	r0, [pc, #8]	; (8001974 <TIM6_DAC_IRQHandler+0x10>)
 800196a:	f002 fc1b 	bl	80041a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	20001b1c 	.word	0x20001b1c

08001978 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	60b9      	str	r1, [r7, #8]
 8001982:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001984:	2300      	movs	r3, #0
 8001986:	617b      	str	r3, [r7, #20]
 8001988:	e00a      	b.n	80019a0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800198a:	f3af 8000 	nop.w
 800198e:	4601      	mov	r1, r0
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	1c5a      	adds	r2, r3, #1
 8001994:	60ba      	str	r2, [r7, #8]
 8001996:	b2ca      	uxtb	r2, r1
 8001998:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	3301      	adds	r3, #1
 800199e:	617b      	str	r3, [r7, #20]
 80019a0:	697a      	ldr	r2, [r7, #20]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	dbf0      	blt.n	800198a <_read+0x12>
	}

return len;
 80019a8:	687b      	ldr	r3, [r7, #4]
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3718      	adds	r7, #24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80019b2:	b480      	push	{r7}
 80019b4:	b083      	sub	sp, #12
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
	return -1;
 80019ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019be:	4618      	mov	r0, r3
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr

080019ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019ca:	b480      	push	{r7}
 80019cc:	b083      	sub	sp, #12
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
 80019d2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019da:	605a      	str	r2, [r3, #4]
	return 0;
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr

080019ea <_isatty>:

int _isatty(int file)
{
 80019ea:	b480      	push	{r7}
 80019ec:	b083      	sub	sp, #12
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
	return 1;
 80019f2:	2301      	movs	r3, #1
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	607a      	str	r2, [r7, #4]
	return 0;
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3714      	adds	r7, #20
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
	...

08001a1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a24:	4a14      	ldr	r2, [pc, #80]	; (8001a78 <_sbrk+0x5c>)
 8001a26:	4b15      	ldr	r3, [pc, #84]	; (8001a7c <_sbrk+0x60>)
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a30:	4b13      	ldr	r3, [pc, #76]	; (8001a80 <_sbrk+0x64>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d102      	bne.n	8001a3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a38:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <_sbrk+0x64>)
 8001a3a:	4a12      	ldr	r2, [pc, #72]	; (8001a84 <_sbrk+0x68>)
 8001a3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a3e:	4b10      	ldr	r3, [pc, #64]	; (8001a80 <_sbrk+0x64>)
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4413      	add	r3, r2
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d207      	bcs.n	8001a5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a4c:	f006 fd8e 	bl	800856c <__errno>
 8001a50:	4603      	mov	r3, r0
 8001a52:	220c      	movs	r2, #12
 8001a54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a56:	f04f 33ff 	mov.w	r3, #4294967295
 8001a5a:	e009      	b.n	8001a70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a5c:	4b08      	ldr	r3, [pc, #32]	; (8001a80 <_sbrk+0x64>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a62:	4b07      	ldr	r3, [pc, #28]	; (8001a80 <_sbrk+0x64>)
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4413      	add	r3, r2
 8001a6a:	4a05      	ldr	r2, [pc, #20]	; (8001a80 <_sbrk+0x64>)
 8001a6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3718      	adds	r7, #24
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	20010000 	.word	0x20010000
 8001a7c:	00000400 	.word	0x00000400
 8001a80:	20000104 	.word	0x20000104
 8001a84:	20002a18 	.word	0x20002a18

08001a88 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a8c:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <SystemInit+0x20>)
 8001a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a92:	4a05      	ldr	r2, [pc, #20]	; (8001aa8 <SystemInit+0x20>)
 8001a94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001a9c:	bf00      	nop
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	e000ed00 	.word	0xe000ed00

08001aac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001aac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ae4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ab0:	f7ff ffea 	bl	8001a88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ab4:	480c      	ldr	r0, [pc, #48]	; (8001ae8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ab6:	490d      	ldr	r1, [pc, #52]	; (8001aec <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ab8:	4a0d      	ldr	r2, [pc, #52]	; (8001af0 <LoopForever+0xe>)
  movs r3, #0
 8001aba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001abc:	e002      	b.n	8001ac4 <LoopCopyDataInit>

08001abe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001abe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ac0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ac2:	3304      	adds	r3, #4

08001ac4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ac4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ac6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ac8:	d3f9      	bcc.n	8001abe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aca:	4a0a      	ldr	r2, [pc, #40]	; (8001af4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001acc:	4c0a      	ldr	r4, [pc, #40]	; (8001af8 <LoopForever+0x16>)
  movs r3, #0
 8001ace:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ad0:	e001      	b.n	8001ad6 <LoopFillZerobss>

08001ad2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ad2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ad4:	3204      	adds	r2, #4

08001ad6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ad6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ad8:	d3fb      	bcc.n	8001ad2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ada:	f006 fe43 	bl	8008764 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ade:	f7ff fb9f 	bl	8001220 <main>

08001ae2 <LoopForever>:

LoopForever:
    b LoopForever
 8001ae2:	e7fe      	b.n	8001ae2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ae4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001ae8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aec:	200000e4 	.word	0x200000e4
  ldr r2, =_sidata
 8001af0:	08009a0c 	.word	0x08009a0c
  ldr r2, =_sbss
 8001af4:	200000e4 	.word	0x200000e4
  ldr r4, =_ebss
 8001af8:	20002a14 	.word	0x20002a14

08001afc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001afc:	e7fe      	b.n	8001afc <ADC1_IRQHandler>

08001afe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b082      	sub	sp, #8
 8001b02:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b04:	2300      	movs	r3, #0
 8001b06:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b08:	2003      	movs	r0, #3
 8001b0a:	f000 f902 	bl	8001d12 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b0e:	200f      	movs	r0, #15
 8001b10:	f7ff fea8 	bl	8001864 <HAL_InitTick>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d002      	beq.n	8001b20 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	71fb      	strb	r3, [r7, #7]
 8001b1e:	e001      	b.n	8001b24 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b20:	f7ff fd66 	bl	80015f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b24:	79fb      	ldrb	r3, [r7, #7]
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
	...

08001b30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b34:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <HAL_IncTick+0x20>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	461a      	mov	r2, r3
 8001b3a:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <HAL_IncTick+0x24>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4413      	add	r3, r2
 8001b40:	4a04      	ldr	r2, [pc, #16]	; (8001b54 <HAL_IncTick+0x24>)
 8001b42:	6013      	str	r3, [r2, #0]
}
 8001b44:	bf00      	nop
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	20000078 	.word	0x20000078
 8001b54:	200029c0 	.word	0x200029c0

08001b58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b5c:	4b03      	ldr	r3, [pc, #12]	; (8001b6c <HAL_GetTick+0x14>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	200029c0 	.word	0x200029c0

08001b70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b78:	f7ff ffee 	bl	8001b58 <HAL_GetTick>
 8001b7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b88:	d005      	beq.n	8001b96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001b8a:	4b0a      	ldr	r3, [pc, #40]	; (8001bb4 <HAL_Delay+0x44>)
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	461a      	mov	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	4413      	add	r3, r2
 8001b94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b96:	bf00      	nop
 8001b98:	f7ff ffde 	bl	8001b58 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	68fa      	ldr	r2, [r7, #12]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d8f7      	bhi.n	8001b98 <HAL_Delay+0x28>
  {
  }
}
 8001ba8:	bf00      	nop
 8001baa:	bf00      	nop
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20000078 	.word	0x20000078

08001bb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f003 0307 	and.w	r3, r3, #7
 8001bc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bc8:	4b0c      	ldr	r3, [pc, #48]	; (8001bfc <__NVIC_SetPriorityGrouping+0x44>)
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bce:	68ba      	ldr	r2, [r7, #8]
 8001bd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001be0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001be4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001be8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bea:	4a04      	ldr	r2, [pc, #16]	; (8001bfc <__NVIC_SetPriorityGrouping+0x44>)
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	60d3      	str	r3, [r2, #12]
}
 8001bf0:	bf00      	nop
 8001bf2:	3714      	adds	r7, #20
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	e000ed00 	.word	0xe000ed00

08001c00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c04:	4b04      	ldr	r3, [pc, #16]	; (8001c18 <__NVIC_GetPriorityGrouping+0x18>)
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	0a1b      	lsrs	r3, r3, #8
 8001c0a:	f003 0307 	and.w	r3, r3, #7
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	e000ed00 	.word	0xe000ed00

08001c1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	4603      	mov	r3, r0
 8001c24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	db0b      	blt.n	8001c46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c2e:	79fb      	ldrb	r3, [r7, #7]
 8001c30:	f003 021f 	and.w	r2, r3, #31
 8001c34:	4907      	ldr	r1, [pc, #28]	; (8001c54 <__NVIC_EnableIRQ+0x38>)
 8001c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3a:	095b      	lsrs	r3, r3, #5
 8001c3c:	2001      	movs	r0, #1
 8001c3e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	e000e100 	.word	0xe000e100

08001c58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	4603      	mov	r3, r0
 8001c60:	6039      	str	r1, [r7, #0]
 8001c62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	db0a      	blt.n	8001c82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	b2da      	uxtb	r2, r3
 8001c70:	490c      	ldr	r1, [pc, #48]	; (8001ca4 <__NVIC_SetPriority+0x4c>)
 8001c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c76:	0112      	lsls	r2, r2, #4
 8001c78:	b2d2      	uxtb	r2, r2
 8001c7a:	440b      	add	r3, r1
 8001c7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c80:	e00a      	b.n	8001c98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	b2da      	uxtb	r2, r3
 8001c86:	4908      	ldr	r1, [pc, #32]	; (8001ca8 <__NVIC_SetPriority+0x50>)
 8001c88:	79fb      	ldrb	r3, [r7, #7]
 8001c8a:	f003 030f 	and.w	r3, r3, #15
 8001c8e:	3b04      	subs	r3, #4
 8001c90:	0112      	lsls	r2, r2, #4
 8001c92:	b2d2      	uxtb	r2, r2
 8001c94:	440b      	add	r3, r1
 8001c96:	761a      	strb	r2, [r3, #24]
}
 8001c98:	bf00      	nop
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	e000e100 	.word	0xe000e100
 8001ca8:	e000ed00 	.word	0xe000ed00

08001cac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b089      	sub	sp, #36	; 0x24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	f1c3 0307 	rsb	r3, r3, #7
 8001cc6:	2b04      	cmp	r3, #4
 8001cc8:	bf28      	it	cs
 8001cca:	2304      	movcs	r3, #4
 8001ccc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	3304      	adds	r3, #4
 8001cd2:	2b06      	cmp	r3, #6
 8001cd4:	d902      	bls.n	8001cdc <NVIC_EncodePriority+0x30>
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	3b03      	subs	r3, #3
 8001cda:	e000      	b.n	8001cde <NVIC_EncodePriority+0x32>
 8001cdc:	2300      	movs	r3, #0
 8001cde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	43da      	mvns	r2, r3
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	401a      	ands	r2, r3
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cf4:	f04f 31ff 	mov.w	r1, #4294967295
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfe:	43d9      	mvns	r1, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d04:	4313      	orrs	r3, r2
         );
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3724      	adds	r7, #36	; 0x24
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b082      	sub	sp, #8
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f7ff ff4c 	bl	8001bb8 <__NVIC_SetPriorityGrouping>
}
 8001d20:	bf00      	nop
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	607a      	str	r2, [r7, #4]
 8001d34:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d36:	2300      	movs	r3, #0
 8001d38:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d3a:	f7ff ff61 	bl	8001c00 <__NVIC_GetPriorityGrouping>
 8001d3e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	68b9      	ldr	r1, [r7, #8]
 8001d44:	6978      	ldr	r0, [r7, #20]
 8001d46:	f7ff ffb1 	bl	8001cac <NVIC_EncodePriority>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d50:	4611      	mov	r1, r2
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff ff80 	bl	8001c58 <__NVIC_SetPriority>
}
 8001d58:	bf00      	nop
 8001d5a:	3718      	adds	r7, #24
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	4603      	mov	r3, r0
 8001d68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff ff54 	bl	8001c1c <__NVIC_EnableIRQ>
}
 8001d74:	bf00      	nop
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d84:	2300      	movs	r3, #0
 8001d86:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d008      	beq.n	8001da6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2204      	movs	r2, #4
 8001d98:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e022      	b.n	8001dec <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f022 020e 	bic.w	r2, r2, #14
 8001db4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f022 0201 	bic.w	r2, r2, #1
 8001dc4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dca:	f003 021c 	and.w	r2, r3, #28
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	fa01 f202 	lsl.w	r2, r1, r2
 8001dd8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001dea:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3714      	adds	r7, #20
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e00:	2300      	movs	r3, #0
 8001e02:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d005      	beq.n	8001e1c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2204      	movs	r2, #4
 8001e14:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	73fb      	strb	r3, [r7, #15]
 8001e1a:	e029      	b.n	8001e70 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f022 020e 	bic.w	r2, r2, #14
 8001e2a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f022 0201 	bic.w	r2, r2, #1
 8001e3a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e40:	f003 021c 	and.w	r2, r3, #28
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e48:	2101      	movs	r1, #1
 8001e4a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e4e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d003      	beq.n	8001e70 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	4798      	blx	r3
    }
  }
  return status;
 8001e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
	...

08001e7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b087      	sub	sp, #28
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e86:	2300      	movs	r3, #0
 8001e88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e8a:	e148      	b.n	800211e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	2101      	movs	r1, #1
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	fa01 f303 	lsl.w	r3, r1, r3
 8001e98:	4013      	ands	r3, r2
 8001e9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f000 813a 	beq.w	8002118 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f003 0303 	and.w	r3, r3, #3
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d005      	beq.n	8001ebc <HAL_GPIO_Init+0x40>
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f003 0303 	and.w	r3, r3, #3
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d130      	bne.n	8001f1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	2203      	movs	r2, #3
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	68da      	ldr	r2, [r3, #12]
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	43db      	mvns	r3, r3
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	4013      	ands	r3, r2
 8001f00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	091b      	lsrs	r3, r3, #4
 8001f08:	f003 0201 	and.w	r2, r3, #1
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f003 0303 	and.w	r3, r3, #3
 8001f26:	2b03      	cmp	r3, #3
 8001f28:	d017      	beq.n	8001f5a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	2203      	movs	r2, #3
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	43db      	mvns	r3, r3
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	689a      	ldr	r2, [r3, #8]
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f003 0303 	and.w	r3, r3, #3
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d123      	bne.n	8001fae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	08da      	lsrs	r2, r3, #3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	3208      	adds	r2, #8
 8001f6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	f003 0307 	and.w	r3, r3, #7
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	220f      	movs	r2, #15
 8001f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f82:	43db      	mvns	r3, r3
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	4013      	ands	r3, r2
 8001f88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	691a      	ldr	r2, [r3, #16]
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	f003 0307 	and.w	r3, r3, #7
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	08da      	lsrs	r2, r3, #3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	3208      	adds	r2, #8
 8001fa8:	6939      	ldr	r1, [r7, #16]
 8001faa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	2203      	movs	r2, #3
 8001fba:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbe:	43db      	mvns	r3, r3
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f003 0203 	and.w	r2, r3, #3
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	693a      	ldr	r2, [r7, #16]
 8001fe0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f000 8094 	beq.w	8002118 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ff0:	4b52      	ldr	r3, [pc, #328]	; (800213c <HAL_GPIO_Init+0x2c0>)
 8001ff2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ff4:	4a51      	ldr	r2, [pc, #324]	; (800213c <HAL_GPIO_Init+0x2c0>)
 8001ff6:	f043 0301 	orr.w	r3, r3, #1
 8001ffa:	6613      	str	r3, [r2, #96]	; 0x60
 8001ffc:	4b4f      	ldr	r3, [pc, #316]	; (800213c <HAL_GPIO_Init+0x2c0>)
 8001ffe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	60bb      	str	r3, [r7, #8]
 8002006:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002008:	4a4d      	ldr	r2, [pc, #308]	; (8002140 <HAL_GPIO_Init+0x2c4>)
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	089b      	lsrs	r3, r3, #2
 800200e:	3302      	adds	r3, #2
 8002010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002014:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	f003 0303 	and.w	r3, r3, #3
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	220f      	movs	r2, #15
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	43db      	mvns	r3, r3
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	4013      	ands	r3, r2
 800202a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002032:	d00d      	beq.n	8002050 <HAL_GPIO_Init+0x1d4>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a43      	ldr	r2, [pc, #268]	; (8002144 <HAL_GPIO_Init+0x2c8>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d007      	beq.n	800204c <HAL_GPIO_Init+0x1d0>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a42      	ldr	r2, [pc, #264]	; (8002148 <HAL_GPIO_Init+0x2cc>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d101      	bne.n	8002048 <HAL_GPIO_Init+0x1cc>
 8002044:	2302      	movs	r3, #2
 8002046:	e004      	b.n	8002052 <HAL_GPIO_Init+0x1d6>
 8002048:	2307      	movs	r3, #7
 800204a:	e002      	b.n	8002052 <HAL_GPIO_Init+0x1d6>
 800204c:	2301      	movs	r3, #1
 800204e:	e000      	b.n	8002052 <HAL_GPIO_Init+0x1d6>
 8002050:	2300      	movs	r3, #0
 8002052:	697a      	ldr	r2, [r7, #20]
 8002054:	f002 0203 	and.w	r2, r2, #3
 8002058:	0092      	lsls	r2, r2, #2
 800205a:	4093      	lsls	r3, r2
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	4313      	orrs	r3, r2
 8002060:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002062:	4937      	ldr	r1, [pc, #220]	; (8002140 <HAL_GPIO_Init+0x2c4>)
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	089b      	lsrs	r3, r3, #2
 8002068:	3302      	adds	r3, #2
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002070:	4b36      	ldr	r3, [pc, #216]	; (800214c <HAL_GPIO_Init+0x2d0>)
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	43db      	mvns	r3, r3
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	4013      	ands	r3, r2
 800207e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d003      	beq.n	8002094 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	4313      	orrs	r3, r2
 8002092:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002094:	4a2d      	ldr	r2, [pc, #180]	; (800214c <HAL_GPIO_Init+0x2d0>)
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800209a:	4b2c      	ldr	r3, [pc, #176]	; (800214c <HAL_GPIO_Init+0x2d0>)
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	43db      	mvns	r3, r3
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	4013      	ands	r3, r2
 80020a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d003      	beq.n	80020be <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020be:	4a23      	ldr	r2, [pc, #140]	; (800214c <HAL_GPIO_Init+0x2d0>)
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80020c4:	4b21      	ldr	r3, [pc, #132]	; (800214c <HAL_GPIO_Init+0x2d0>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	43db      	mvns	r3, r3
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	4013      	ands	r3, r2
 80020d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d003      	beq.n	80020e8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80020e8:	4a18      	ldr	r2, [pc, #96]	; (800214c <HAL_GPIO_Init+0x2d0>)
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80020ee:	4b17      	ldr	r3, [pc, #92]	; (800214c <HAL_GPIO_Init+0x2d0>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	43db      	mvns	r3, r3
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	4013      	ands	r3, r2
 80020fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d003      	beq.n	8002112 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	4313      	orrs	r3, r2
 8002110:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002112:	4a0e      	ldr	r2, [pc, #56]	; (800214c <HAL_GPIO_Init+0x2d0>)
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	3301      	adds	r3, #1
 800211c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	fa22 f303 	lsr.w	r3, r2, r3
 8002128:	2b00      	cmp	r3, #0
 800212a:	f47f aeaf 	bne.w	8001e8c <HAL_GPIO_Init+0x10>
  }
}
 800212e:	bf00      	nop
 8002130:	bf00      	nop
 8002132:	371c      	adds	r7, #28
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr
 800213c:	40021000 	.word	0x40021000
 8002140:	40010000 	.word	0x40010000
 8002144:	48000400 	.word	0x48000400
 8002148:	48000800 	.word	0x48000800
 800214c:	40010400 	.word	0x40010400

08002150 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	460b      	mov	r3, r1
 800215a:	807b      	strh	r3, [r7, #2]
 800215c:	4613      	mov	r3, r2
 800215e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002160:	787b      	ldrb	r3, [r7, #1]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d003      	beq.n	800216e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002166:	887a      	ldrh	r2, [r7, #2]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800216c:	e002      	b.n	8002174 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800216e:	887a      	ldrh	r2, [r7, #2]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e081      	b.n	8002296 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b00      	cmp	r3, #0
 800219c:	d106      	bne.n	80021ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f7ff fa4a 	bl	8001640 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2224      	movs	r2, #36	; 0x24
 80021b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f022 0201 	bic.w	r2, r2, #1
 80021c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685a      	ldr	r2, [r3, #4]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021d0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	689a      	ldr	r2, [r3, #8]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021e0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d107      	bne.n	80021fa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	689a      	ldr	r2, [r3, #8]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021f6:	609a      	str	r2, [r3, #8]
 80021f8:	e006      	b.n	8002208 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	689a      	ldr	r2, [r3, #8]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002206:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	2b02      	cmp	r3, #2
 800220e:	d104      	bne.n	800221a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002218:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	6812      	ldr	r2, [r2, #0]
 8002224:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002228:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800222c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68da      	ldr	r2, [r3, #12]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800223c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	691a      	ldr	r2, [r3, #16]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	430a      	orrs	r2, r1
 8002256:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	69d9      	ldr	r1, [r3, #28]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a1a      	ldr	r2, [r3, #32]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	430a      	orrs	r2, r1
 8002266:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f042 0201 	orr.w	r2, r2, #1
 8002276:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2220      	movs	r2, #32
 8002282:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
	...

080022a0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b088      	sub	sp, #32
 80022a4:	af02      	add	r7, sp, #8
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	607a      	str	r2, [r7, #4]
 80022aa:	461a      	mov	r2, r3
 80022ac:	460b      	mov	r3, r1
 80022ae:	817b      	strh	r3, [r7, #10]
 80022b0:	4613      	mov	r3, r2
 80022b2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	2b20      	cmp	r3, #32
 80022be:	f040 80da 	bne.w	8002476 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d101      	bne.n	80022d0 <HAL_I2C_Master_Transmit+0x30>
 80022cc:	2302      	movs	r3, #2
 80022ce:	e0d3      	b.n	8002478 <HAL_I2C_Master_Transmit+0x1d8>
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80022d8:	f7ff fc3e 	bl	8001b58 <HAL_GetTick>
 80022dc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	9300      	str	r3, [sp, #0]
 80022e2:	2319      	movs	r3, #25
 80022e4:	2201      	movs	r2, #1
 80022e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022ea:	68f8      	ldr	r0, [r7, #12]
 80022ec:	f000 f9e6 	bl	80026bc <I2C_WaitOnFlagUntilTimeout>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e0be      	b.n	8002478 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2221      	movs	r2, #33	; 0x21
 80022fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2210      	movs	r2, #16
 8002306:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2200      	movs	r2, #0
 800230e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	893a      	ldrh	r2, [r7, #8]
 800231a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2200      	movs	r2, #0
 8002320:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002326:	b29b      	uxth	r3, r3
 8002328:	2bff      	cmp	r3, #255	; 0xff
 800232a:	d90e      	bls.n	800234a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	22ff      	movs	r2, #255	; 0xff
 8002330:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002336:	b2da      	uxtb	r2, r3
 8002338:	8979      	ldrh	r1, [r7, #10]
 800233a:	4b51      	ldr	r3, [pc, #324]	; (8002480 <HAL_I2C_Master_Transmit+0x1e0>)
 800233c:	9300      	str	r3, [sp, #0]
 800233e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002342:	68f8      	ldr	r0, [r7, #12]
 8002344:	f000 fbdc 	bl	8002b00 <I2C_TransferConfig>
 8002348:	e06c      	b.n	8002424 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800234e:	b29a      	uxth	r2, r3
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002358:	b2da      	uxtb	r2, r3
 800235a:	8979      	ldrh	r1, [r7, #10]
 800235c:	4b48      	ldr	r3, [pc, #288]	; (8002480 <HAL_I2C_Master_Transmit+0x1e0>)
 800235e:	9300      	str	r3, [sp, #0]
 8002360:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002364:	68f8      	ldr	r0, [r7, #12]
 8002366:	f000 fbcb 	bl	8002b00 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800236a:	e05b      	b.n	8002424 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800236c:	697a      	ldr	r2, [r7, #20]
 800236e:	6a39      	ldr	r1, [r7, #32]
 8002370:	68f8      	ldr	r0, [r7, #12]
 8002372:	f000 f9e3 	bl	800273c <I2C_WaitOnTXISFlagUntilTimeout>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e07b      	b.n	8002478 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002384:	781a      	ldrb	r2, [r3, #0]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002390:	1c5a      	adds	r2, r3, #1
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800239a:	b29b      	uxth	r3, r3
 800239c:	3b01      	subs	r3, #1
 800239e:	b29a      	uxth	r2, r3
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023a8:	3b01      	subs	r3, #1
 80023aa:	b29a      	uxth	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d034      	beq.n	8002424 <HAL_I2C_Master_Transmit+0x184>
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d130      	bne.n	8002424 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	9300      	str	r3, [sp, #0]
 80023c6:	6a3b      	ldr	r3, [r7, #32]
 80023c8:	2200      	movs	r2, #0
 80023ca:	2180      	movs	r1, #128	; 0x80
 80023cc:	68f8      	ldr	r0, [r7, #12]
 80023ce:	f000 f975 	bl	80026bc <I2C_WaitOnFlagUntilTimeout>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e04d      	b.n	8002478 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	2bff      	cmp	r3, #255	; 0xff
 80023e4:	d90e      	bls.n	8002404 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	22ff      	movs	r2, #255	; 0xff
 80023ea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023f0:	b2da      	uxtb	r2, r3
 80023f2:	8979      	ldrh	r1, [r7, #10]
 80023f4:	2300      	movs	r3, #0
 80023f6:	9300      	str	r3, [sp, #0]
 80023f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023fc:	68f8      	ldr	r0, [r7, #12]
 80023fe:	f000 fb7f 	bl	8002b00 <I2C_TransferConfig>
 8002402:	e00f      	b.n	8002424 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002408:	b29a      	uxth	r2, r3
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002412:	b2da      	uxtb	r2, r3
 8002414:	8979      	ldrh	r1, [r7, #10]
 8002416:	2300      	movs	r3, #0
 8002418:	9300      	str	r3, [sp, #0]
 800241a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800241e:	68f8      	ldr	r0, [r7, #12]
 8002420:	f000 fb6e 	bl	8002b00 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002428:	b29b      	uxth	r3, r3
 800242a:	2b00      	cmp	r3, #0
 800242c:	d19e      	bne.n	800236c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800242e:	697a      	ldr	r2, [r7, #20]
 8002430:	6a39      	ldr	r1, [r7, #32]
 8002432:	68f8      	ldr	r0, [r7, #12]
 8002434:	f000 f9c2 	bl	80027bc <I2C_WaitOnSTOPFlagUntilTimeout>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e01a      	b.n	8002478 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2220      	movs	r2, #32
 8002448:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	6859      	ldr	r1, [r3, #4]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	4b0b      	ldr	r3, [pc, #44]	; (8002484 <HAL_I2C_Master_Transmit+0x1e4>)
 8002456:	400b      	ands	r3, r1
 8002458:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2220      	movs	r2, #32
 800245e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002472:	2300      	movs	r3, #0
 8002474:	e000      	b.n	8002478 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002476:	2302      	movs	r3, #2
  }
}
 8002478:	4618      	mov	r0, r3
 800247a:	3718      	adds	r7, #24
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	80002000 	.word	0x80002000
 8002484:	fe00e800 	.word	0xfe00e800

08002488 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b088      	sub	sp, #32
 800248c:	af02      	add	r7, sp, #8
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	607a      	str	r2, [r7, #4]
 8002492:	461a      	mov	r2, r3
 8002494:	460b      	mov	r3, r1
 8002496:	817b      	strh	r3, [r7, #10]
 8002498:	4613      	mov	r3, r2
 800249a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	2b20      	cmp	r3, #32
 80024a6:	f040 80db 	bne.w	8002660 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d101      	bne.n	80024b8 <HAL_I2C_Master_Receive+0x30>
 80024b4:	2302      	movs	r3, #2
 80024b6:	e0d4      	b.n	8002662 <HAL_I2C_Master_Receive+0x1da>
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80024c0:	f7ff fb4a 	bl	8001b58 <HAL_GetTick>
 80024c4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	9300      	str	r3, [sp, #0]
 80024ca:	2319      	movs	r3, #25
 80024cc:	2201      	movs	r2, #1
 80024ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024d2:	68f8      	ldr	r0, [r7, #12]
 80024d4:	f000 f8f2 	bl	80026bc <I2C_WaitOnFlagUntilTimeout>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e0bf      	b.n	8002662 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2222      	movs	r2, #34	; 0x22
 80024e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2210      	movs	r2, #16
 80024ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2200      	movs	r2, #0
 80024f6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	893a      	ldrh	r2, [r7, #8]
 8002502:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2200      	movs	r2, #0
 8002508:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800250e:	b29b      	uxth	r3, r3
 8002510:	2bff      	cmp	r3, #255	; 0xff
 8002512:	d90e      	bls.n	8002532 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	22ff      	movs	r2, #255	; 0xff
 8002518:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800251e:	b2da      	uxtb	r2, r3
 8002520:	8979      	ldrh	r1, [r7, #10]
 8002522:	4b52      	ldr	r3, [pc, #328]	; (800266c <HAL_I2C_Master_Receive+0x1e4>)
 8002524:	9300      	str	r3, [sp, #0]
 8002526:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800252a:	68f8      	ldr	r0, [r7, #12]
 800252c:	f000 fae8 	bl	8002b00 <I2C_TransferConfig>
 8002530:	e06d      	b.n	800260e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002536:	b29a      	uxth	r2, r3
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002540:	b2da      	uxtb	r2, r3
 8002542:	8979      	ldrh	r1, [r7, #10]
 8002544:	4b49      	ldr	r3, [pc, #292]	; (800266c <HAL_I2C_Master_Receive+0x1e4>)
 8002546:	9300      	str	r3, [sp, #0]
 8002548:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800254c:	68f8      	ldr	r0, [r7, #12]
 800254e:	f000 fad7 	bl	8002b00 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002552:	e05c      	b.n	800260e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002554:	697a      	ldr	r2, [r7, #20]
 8002556:	6a39      	ldr	r1, [r7, #32]
 8002558:	68f8      	ldr	r0, [r7, #12]
 800255a:	f000 f96b 	bl	8002834 <I2C_WaitOnRXNEFlagUntilTimeout>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e07c      	b.n	8002662 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002572:	b2d2      	uxtb	r2, r2
 8002574:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257a:	1c5a      	adds	r2, r3, #1
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002584:	3b01      	subs	r3, #1
 8002586:	b29a      	uxth	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002590:	b29b      	uxth	r3, r3
 8002592:	3b01      	subs	r3, #1
 8002594:	b29a      	uxth	r2, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800259e:	b29b      	uxth	r3, r3
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d034      	beq.n	800260e <HAL_I2C_Master_Receive+0x186>
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d130      	bne.n	800260e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	9300      	str	r3, [sp, #0]
 80025b0:	6a3b      	ldr	r3, [r7, #32]
 80025b2:	2200      	movs	r2, #0
 80025b4:	2180      	movs	r1, #128	; 0x80
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f000 f880 	bl	80026bc <I2C_WaitOnFlagUntilTimeout>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e04d      	b.n	8002662 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	2bff      	cmp	r3, #255	; 0xff
 80025ce:	d90e      	bls.n	80025ee <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	22ff      	movs	r2, #255	; 0xff
 80025d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025da:	b2da      	uxtb	r2, r3
 80025dc:	8979      	ldrh	r1, [r7, #10]
 80025de:	2300      	movs	r3, #0
 80025e0:	9300      	str	r3, [sp, #0]
 80025e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025e6:	68f8      	ldr	r0, [r7, #12]
 80025e8:	f000 fa8a 	bl	8002b00 <I2C_TransferConfig>
 80025ec:	e00f      	b.n	800260e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025fc:	b2da      	uxtb	r2, r3
 80025fe:	8979      	ldrh	r1, [r7, #10]
 8002600:	2300      	movs	r3, #0
 8002602:	9300      	str	r3, [sp, #0]
 8002604:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002608:	68f8      	ldr	r0, [r7, #12]
 800260a:	f000 fa79 	bl	8002b00 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002612:	b29b      	uxth	r3, r3
 8002614:	2b00      	cmp	r3, #0
 8002616:	d19d      	bne.n	8002554 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002618:	697a      	ldr	r2, [r7, #20]
 800261a:	6a39      	ldr	r1, [r7, #32]
 800261c:	68f8      	ldr	r0, [r7, #12]
 800261e:	f000 f8cd 	bl	80027bc <I2C_WaitOnSTOPFlagUntilTimeout>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e01a      	b.n	8002662 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2220      	movs	r2, #32
 8002632:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	6859      	ldr	r1, [r3, #4]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	4b0c      	ldr	r3, [pc, #48]	; (8002670 <HAL_I2C_Master_Receive+0x1e8>)
 8002640:	400b      	ands	r3, r1
 8002642:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2220      	movs	r2, #32
 8002648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800265c:	2300      	movs	r3, #0
 800265e:	e000      	b.n	8002662 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002660:	2302      	movs	r3, #2
  }
}
 8002662:	4618      	mov	r0, r3
 8002664:	3718      	adds	r7, #24
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	80002400 	.word	0x80002400
 8002670:	fe00e800 	.word	0xfe00e800

08002674 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	2b02      	cmp	r3, #2
 8002688:	d103      	bne.n	8002692 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2200      	movs	r2, #0
 8002690:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	2b01      	cmp	r3, #1
 800269e:	d007      	beq.n	80026b0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	699a      	ldr	r2, [r3, #24]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f042 0201 	orr.w	r2, r2, #1
 80026ae:	619a      	str	r2, [r3, #24]
  }
}
 80026b0:	bf00      	nop
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	603b      	str	r3, [r7, #0]
 80026c8:	4613      	mov	r3, r2
 80026ca:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026cc:	e022      	b.n	8002714 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026d4:	d01e      	beq.n	8002714 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026d6:	f7ff fa3f 	bl	8001b58 <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d302      	bcc.n	80026ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d113      	bne.n	8002714 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f0:	f043 0220 	orr.w	r2, r3, #32
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2220      	movs	r2, #32
 80026fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2200      	movs	r2, #0
 800270c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e00f      	b.n	8002734 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	699a      	ldr	r2, [r3, #24]
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	4013      	ands	r3, r2
 800271e:	68ba      	ldr	r2, [r7, #8]
 8002720:	429a      	cmp	r2, r3
 8002722:	bf0c      	ite	eq
 8002724:	2301      	moveq	r3, #1
 8002726:	2300      	movne	r3, #0
 8002728:	b2db      	uxtb	r3, r3
 800272a:	461a      	mov	r2, r3
 800272c:	79fb      	ldrb	r3, [r7, #7]
 800272e:	429a      	cmp	r2, r3
 8002730:	d0cd      	beq.n	80026ce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002732:	2300      	movs	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	3710      	adds	r7, #16
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002748:	e02c      	b.n	80027a4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	68b9      	ldr	r1, [r7, #8]
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	f000 f8ea 	bl	8002928 <I2C_IsErrorOccurred>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e02a      	b.n	80027b4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002764:	d01e      	beq.n	80027a4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002766:	f7ff f9f7 	bl	8001b58 <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	68ba      	ldr	r2, [r7, #8]
 8002772:	429a      	cmp	r2, r3
 8002774:	d302      	bcc.n	800277c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d113      	bne.n	80027a4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002780:	f043 0220 	orr.w	r2, r3, #32
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2220      	movs	r2, #32
 800278c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e007      	b.n	80027b4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d1cb      	bne.n	800274a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3710      	adds	r7, #16
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027c8:	e028      	b.n	800281c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	68b9      	ldr	r1, [r7, #8]
 80027ce:	68f8      	ldr	r0, [r7, #12]
 80027d0:	f000 f8aa 	bl	8002928 <I2C_IsErrorOccurred>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e026      	b.n	800282c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027de:	f7ff f9bb 	bl	8001b58 <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	68ba      	ldr	r2, [r7, #8]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d302      	bcc.n	80027f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d113      	bne.n	800281c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f8:	f043 0220 	orr.w	r2, r3, #32
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2220      	movs	r2, #32
 8002804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e007      	b.n	800282c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	f003 0320 	and.w	r3, r3, #32
 8002826:	2b20      	cmp	r3, #32
 8002828:	d1cf      	bne.n	80027ca <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800282a:	2300      	movs	r3, #0
}
 800282c:	4618      	mov	r0, r3
 800282e:	3710      	adds	r7, #16
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002840:	e064      	b.n	800290c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	68b9      	ldr	r1, [r7, #8]
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f000 f86e 	bl	8002928 <I2C_IsErrorOccurred>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e062      	b.n	800291c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	f003 0320 	and.w	r3, r3, #32
 8002860:	2b20      	cmp	r3, #32
 8002862:	d138      	bne.n	80028d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	f003 0304 	and.w	r3, r3, #4
 800286e:	2b04      	cmp	r3, #4
 8002870:	d105      	bne.n	800287e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800287a:	2300      	movs	r3, #0
 800287c:	e04e      	b.n	800291c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	f003 0310 	and.w	r3, r3, #16
 8002888:	2b10      	cmp	r3, #16
 800288a:	d107      	bne.n	800289c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2210      	movs	r2, #16
 8002892:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2204      	movs	r2, #4
 8002898:	645a      	str	r2, [r3, #68]	; 0x44
 800289a:	e002      	b.n	80028a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2200      	movs	r2, #0
 80028a0:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2220      	movs	r2, #32
 80028a8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	6859      	ldr	r1, [r3, #4]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	4b1b      	ldr	r3, [pc, #108]	; (8002924 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80028b6:	400b      	ands	r3, r1
 80028b8:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2220      	movs	r2, #32
 80028be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e022      	b.n	800291c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028d6:	f7ff f93f 	bl	8001b58 <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	68ba      	ldr	r2, [r7, #8]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d302      	bcc.n	80028ec <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d10f      	bne.n	800290c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f0:	f043 0220 	orr.w	r2, r3, #32
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2220      	movs	r2, #32
 80028fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e007      	b.n	800291c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	699b      	ldr	r3, [r3, #24]
 8002912:	f003 0304 	and.w	r3, r3, #4
 8002916:	2b04      	cmp	r3, #4
 8002918:	d193      	bne.n	8002842 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	3710      	adds	r7, #16
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	fe00e800 	.word	0xfe00e800

08002928 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b08a      	sub	sp, #40	; 0x28
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002934:	2300      	movs	r3, #0
 8002936:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002942:	2300      	movs	r3, #0
 8002944:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	f003 0310 	and.w	r3, r3, #16
 8002950:	2b00      	cmp	r3, #0
 8002952:	d075      	beq.n	8002a40 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2210      	movs	r2, #16
 800295a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800295c:	e056      	b.n	8002a0c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002964:	d052      	beq.n	8002a0c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002966:	f7ff f8f7 	bl	8001b58 <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	68ba      	ldr	r2, [r7, #8]
 8002972:	429a      	cmp	r2, r3
 8002974:	d302      	bcc.n	800297c <I2C_IsErrorOccurred+0x54>
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d147      	bne.n	8002a0c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002986:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800298e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800299a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800299e:	d12e      	bne.n	80029fe <I2C_IsErrorOccurred+0xd6>
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029a6:	d02a      	beq.n	80029fe <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80029a8:	7cfb      	ldrb	r3, [r7, #19]
 80029aa:	2b20      	cmp	r3, #32
 80029ac:	d027      	beq.n	80029fe <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	685a      	ldr	r2, [r3, #4]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029bc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80029be:	f7ff f8cb 	bl	8001b58 <HAL_GetTick>
 80029c2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029c4:	e01b      	b.n	80029fe <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80029c6:	f7ff f8c7 	bl	8001b58 <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	2b19      	cmp	r3, #25
 80029d2:	d914      	bls.n	80029fe <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d8:	f043 0220 	orr.w	r2, r3, #32
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2220      	movs	r2, #32
 80029e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	f003 0320 	and.w	r3, r3, #32
 8002a08:	2b20      	cmp	r3, #32
 8002a0a:	d1dc      	bne.n	80029c6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	f003 0320 	and.w	r3, r3, #32
 8002a16:	2b20      	cmp	r3, #32
 8002a18:	d003      	beq.n	8002a22 <I2C_IsErrorOccurred+0xfa>
 8002a1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d09d      	beq.n	800295e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002a22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d103      	bne.n	8002a32 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2220      	movs	r2, #32
 8002a30:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002a32:	6a3b      	ldr	r3, [r7, #32]
 8002a34:	f043 0304 	orr.w	r3, r3, #4
 8002a38:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00b      	beq.n	8002a6a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002a52:	6a3b      	ldr	r3, [r7, #32]
 8002a54:	f043 0301 	orr.w	r3, r3, #1
 8002a58:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a62:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d00b      	beq.n	8002a8c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002a74:	6a3b      	ldr	r3, [r7, #32]
 8002a76:	f043 0308 	orr.w	r3, r3, #8
 8002a7a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a84:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00b      	beq.n	8002aae <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002a96:	6a3b      	ldr	r3, [r7, #32]
 8002a98:	f043 0302 	orr.w	r3, r3, #2
 8002a9c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002aa6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002aae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d01c      	beq.n	8002af0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002ab6:	68f8      	ldr	r0, [r7, #12]
 8002ab8:	f7ff fddc 	bl	8002674 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6859      	ldr	r1, [r3, #4]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	4b0d      	ldr	r3, [pc, #52]	; (8002afc <I2C_IsErrorOccurred+0x1d4>)
 8002ac8:	400b      	ands	r3, r1
 8002aca:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ad0:	6a3b      	ldr	r3, [r7, #32]
 8002ad2:	431a      	orrs	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2220      	movs	r2, #32
 8002adc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002af0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3728      	adds	r7, #40	; 0x28
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	fe00e800 	.word	0xfe00e800

08002b00 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b087      	sub	sp, #28
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	607b      	str	r3, [r7, #4]
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	817b      	strh	r3, [r7, #10]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002b12:	897b      	ldrh	r3, [r7, #10]
 8002b14:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002b18:	7a7b      	ldrb	r3, [r7, #9]
 8002b1a:	041b      	lsls	r3, r3, #16
 8002b1c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002b20:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002b26:	6a3b      	ldr	r3, [r7, #32]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b2e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	685a      	ldr	r2, [r3, #4]
 8002b36:	6a3b      	ldr	r3, [r7, #32]
 8002b38:	0d5b      	lsrs	r3, r3, #21
 8002b3a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002b3e:	4b08      	ldr	r3, [pc, #32]	; (8002b60 <I2C_TransferConfig+0x60>)
 8002b40:	430b      	orrs	r3, r1
 8002b42:	43db      	mvns	r3, r3
 8002b44:	ea02 0103 	and.w	r1, r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	697a      	ldr	r2, [r7, #20]
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002b52:	bf00      	nop
 8002b54:	371c      	adds	r7, #28
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	03ff63ff 	.word	0x03ff63ff

08002b64 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	2b20      	cmp	r3, #32
 8002b78:	d138      	bne.n	8002bec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d101      	bne.n	8002b88 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b84:	2302      	movs	r3, #2
 8002b86:	e032      	b.n	8002bee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2224      	movs	r2, #36	; 0x24
 8002b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f022 0201 	bic.w	r2, r2, #1
 8002ba6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002bb6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	6819      	ldr	r1, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	683a      	ldr	r2, [r7, #0]
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f042 0201 	orr.w	r2, r2, #1
 8002bd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2220      	movs	r2, #32
 8002bdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002be8:	2300      	movs	r3, #0
 8002bea:	e000      	b.n	8002bee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002bec:	2302      	movs	r3, #2
  }
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr

08002bfa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b085      	sub	sp, #20
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
 8002c02:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	2b20      	cmp	r3, #32
 8002c0e:	d139      	bne.n	8002c84 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d101      	bne.n	8002c1e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	e033      	b.n	8002c86 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2201      	movs	r2, #1
 8002c22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2224      	movs	r2, #36	; 0x24
 8002c2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f022 0201 	bic.w	r2, r2, #1
 8002c3c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c4c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	021b      	lsls	r3, r3, #8
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	68fa      	ldr	r2, [r7, #12]
 8002c5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f042 0201 	orr.w	r2, r2, #1
 8002c6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2220      	movs	r2, #32
 8002c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c80:	2300      	movs	r3, #0
 8002c82:	e000      	b.n	8002c86 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c84:	2302      	movs	r3, #2
  }
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3714      	adds	r7, #20
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
	...

08002c94 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c98:	4b05      	ldr	r3, [pc, #20]	; (8002cb0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a04      	ldr	r2, [pc, #16]	; (8002cb0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ca2:	6013      	str	r3, [r2, #0]
}
 8002ca4:	bf00      	nop
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	40007000 	.word	0x40007000

08002cb4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002cb8:	4b04      	ldr	r3, [pc, #16]	; (8002ccc <HAL_PWREx_GetVoltageRange+0x18>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	40007000 	.word	0x40007000

08002cd0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b085      	sub	sp, #20
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cde:	d130      	bne.n	8002d42 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ce0:	4b23      	ldr	r3, [pc, #140]	; (8002d70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ce8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cec:	d038      	beq.n	8002d60 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cee:	4b20      	ldr	r3, [pc, #128]	; (8002d70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002cf6:	4a1e      	ldr	r2, [pc, #120]	; (8002d70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cf8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cfc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002cfe:	4b1d      	ldr	r3, [pc, #116]	; (8002d74 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2232      	movs	r2, #50	; 0x32
 8002d04:	fb02 f303 	mul.w	r3, r2, r3
 8002d08:	4a1b      	ldr	r2, [pc, #108]	; (8002d78 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d0e:	0c9b      	lsrs	r3, r3, #18
 8002d10:	3301      	adds	r3, #1
 8002d12:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d14:	e002      	b.n	8002d1c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d1c:	4b14      	ldr	r3, [pc, #80]	; (8002d70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d1e:	695b      	ldr	r3, [r3, #20]
 8002d20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d28:	d102      	bne.n	8002d30 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1f2      	bne.n	8002d16 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d30:	4b0f      	ldr	r3, [pc, #60]	; (8002d70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d32:	695b      	ldr	r3, [r3, #20]
 8002d34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d3c:	d110      	bne.n	8002d60 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e00f      	b.n	8002d62 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d42:	4b0b      	ldr	r3, [pc, #44]	; (8002d70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d4e:	d007      	beq.n	8002d60 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d50:	4b07      	ldr	r3, [pc, #28]	; (8002d70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d58:	4a05      	ldr	r2, [pc, #20]	; (8002d70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d5e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3714      	adds	r7, #20
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	40007000 	.word	0x40007000
 8002d74:	20000070 	.word	0x20000070
 8002d78:	431bde83 	.word	0x431bde83

08002d7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b088      	sub	sp, #32
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e3fe      	b.n	800358c <HAL_RCC_OscConfig+0x810>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d8e:	4ba1      	ldr	r3, [pc, #644]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f003 030c 	and.w	r3, r3, #12
 8002d96:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d98:	4b9e      	ldr	r3, [pc, #632]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	f003 0303 	and.w	r3, r3, #3
 8002da0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0310 	and.w	r3, r3, #16
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	f000 80e4 	beq.w	8002f78 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d007      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x4a>
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	2b0c      	cmp	r3, #12
 8002dba:	f040 808b 	bne.w	8002ed4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	f040 8087 	bne.w	8002ed4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002dc6:	4b93      	ldr	r3, [pc, #588]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d005      	beq.n	8002dde <HAL_RCC_OscConfig+0x62>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e3d6      	b.n	800358c <HAL_RCC_OscConfig+0x810>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a1a      	ldr	r2, [r3, #32]
 8002de2:	4b8c      	ldr	r3, [pc, #560]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0308 	and.w	r3, r3, #8
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d004      	beq.n	8002df8 <HAL_RCC_OscConfig+0x7c>
 8002dee:	4b89      	ldr	r3, [pc, #548]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002df6:	e005      	b.n	8002e04 <HAL_RCC_OscConfig+0x88>
 8002df8:	4b86      	ldr	r3, [pc, #536]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002dfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dfe:	091b      	lsrs	r3, r3, #4
 8002e00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d223      	bcs.n	8002e50 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a1b      	ldr	r3, [r3, #32]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f000 fdbd 	bl	800398c <RCC_SetFlashLatencyFromMSIRange>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d001      	beq.n	8002e1c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e3b7      	b.n	800358c <HAL_RCC_OscConfig+0x810>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e1c:	4b7d      	ldr	r3, [pc, #500]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a7c      	ldr	r2, [pc, #496]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002e22:	f043 0308 	orr.w	r3, r3, #8
 8002e26:	6013      	str	r3, [r2, #0]
 8002e28:	4b7a      	ldr	r3, [pc, #488]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	4977      	ldr	r1, [pc, #476]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e3a:	4b76      	ldr	r3, [pc, #472]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	69db      	ldr	r3, [r3, #28]
 8002e46:	021b      	lsls	r3, r3, #8
 8002e48:	4972      	ldr	r1, [pc, #456]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	604b      	str	r3, [r1, #4]
 8002e4e:	e025      	b.n	8002e9c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e50:	4b70      	ldr	r3, [pc, #448]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a6f      	ldr	r2, [pc, #444]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002e56:	f043 0308 	orr.w	r3, r3, #8
 8002e5a:	6013      	str	r3, [r2, #0]
 8002e5c:	4b6d      	ldr	r3, [pc, #436]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a1b      	ldr	r3, [r3, #32]
 8002e68:	496a      	ldr	r1, [pc, #424]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e6e:	4b69      	ldr	r3, [pc, #420]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	69db      	ldr	r3, [r3, #28]
 8002e7a:	021b      	lsls	r3, r3, #8
 8002e7c:	4965      	ldr	r1, [pc, #404]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d109      	bne.n	8002e9c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f000 fd7d 	bl	800398c <RCC_SetFlashLatencyFromMSIRange>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e377      	b.n	800358c <HAL_RCC_OscConfig+0x810>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e9c:	f000 fc80 	bl	80037a0 <HAL_RCC_GetSysClockFreq>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	4b5c      	ldr	r3, [pc, #368]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	091b      	lsrs	r3, r3, #4
 8002ea8:	f003 030f 	and.w	r3, r3, #15
 8002eac:	495a      	ldr	r1, [pc, #360]	; (8003018 <HAL_RCC_OscConfig+0x29c>)
 8002eae:	5ccb      	ldrb	r3, [r1, r3]
 8002eb0:	f003 031f 	and.w	r3, r3, #31
 8002eb4:	fa22 f303 	lsr.w	r3, r2, r3
 8002eb8:	4a58      	ldr	r2, [pc, #352]	; (800301c <HAL_RCC_OscConfig+0x2a0>)
 8002eba:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002ebc:	4b58      	ldr	r3, [pc, #352]	; (8003020 <HAL_RCC_OscConfig+0x2a4>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7fe fccf 	bl	8001864 <HAL_InitTick>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002eca:	7bfb      	ldrb	r3, [r7, #15]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d052      	beq.n	8002f76 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002ed0:	7bfb      	ldrb	r3, [r7, #15]
 8002ed2:	e35b      	b.n	800358c <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d032      	beq.n	8002f42 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002edc:	4b4d      	ldr	r3, [pc, #308]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a4c      	ldr	r2, [pc, #304]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002ee2:	f043 0301 	orr.w	r3, r3, #1
 8002ee6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ee8:	f7fe fe36 	bl	8001b58 <HAL_GetTick>
 8002eec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002eee:	e008      	b.n	8002f02 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ef0:	f7fe fe32 	bl	8001b58 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e344      	b.n	800358c <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f02:	4b44      	ldr	r3, [pc, #272]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d0f0      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f0e:	4b41      	ldr	r3, [pc, #260]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a40      	ldr	r2, [pc, #256]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002f14:	f043 0308 	orr.w	r3, r3, #8
 8002f18:	6013      	str	r3, [r2, #0]
 8002f1a:	4b3e      	ldr	r3, [pc, #248]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a1b      	ldr	r3, [r3, #32]
 8002f26:	493b      	ldr	r1, [pc, #236]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f2c:	4b39      	ldr	r3, [pc, #228]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	69db      	ldr	r3, [r3, #28]
 8002f38:	021b      	lsls	r3, r3, #8
 8002f3a:	4936      	ldr	r1, [pc, #216]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	604b      	str	r3, [r1, #4]
 8002f40:	e01a      	b.n	8002f78 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f42:	4b34      	ldr	r3, [pc, #208]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a33      	ldr	r2, [pc, #204]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002f48:	f023 0301 	bic.w	r3, r3, #1
 8002f4c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f4e:	f7fe fe03 	bl	8001b58 <HAL_GetTick>
 8002f52:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f54:	e008      	b.n	8002f68 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f56:	f7fe fdff 	bl	8001b58 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d901      	bls.n	8002f68 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e311      	b.n	800358c <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f68:	4b2a      	ldr	r3, [pc, #168]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d1f0      	bne.n	8002f56 <HAL_RCC_OscConfig+0x1da>
 8002f74:	e000      	b.n	8002f78 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f76:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0301 	and.w	r3, r3, #1
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d074      	beq.n	800306e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	2b08      	cmp	r3, #8
 8002f88:	d005      	beq.n	8002f96 <HAL_RCC_OscConfig+0x21a>
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	2b0c      	cmp	r3, #12
 8002f8e:	d10e      	bne.n	8002fae <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	2b03      	cmp	r3, #3
 8002f94:	d10b      	bne.n	8002fae <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f96:	4b1f      	ldr	r3, [pc, #124]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d064      	beq.n	800306c <HAL_RCC_OscConfig+0x2f0>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d160      	bne.n	800306c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e2ee      	b.n	800358c <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fb6:	d106      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x24a>
 8002fb8:	4b16      	ldr	r3, [pc, #88]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a15      	ldr	r2, [pc, #84]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002fbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fc2:	6013      	str	r3, [r2, #0]
 8002fc4:	e01d      	b.n	8003002 <HAL_RCC_OscConfig+0x286>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fce:	d10c      	bne.n	8002fea <HAL_RCC_OscConfig+0x26e>
 8002fd0:	4b10      	ldr	r3, [pc, #64]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a0f      	ldr	r2, [pc, #60]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002fd6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fda:	6013      	str	r3, [r2, #0]
 8002fdc:	4b0d      	ldr	r3, [pc, #52]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a0c      	ldr	r2, [pc, #48]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002fe2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fe6:	6013      	str	r3, [r2, #0]
 8002fe8:	e00b      	b.n	8003002 <HAL_RCC_OscConfig+0x286>
 8002fea:	4b0a      	ldr	r3, [pc, #40]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a09      	ldr	r2, [pc, #36]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002ff0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ff4:	6013      	str	r3, [r2, #0]
 8002ff6:	4b07      	ldr	r3, [pc, #28]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a06      	ldr	r2, [pc, #24]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002ffc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003000:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d01c      	beq.n	8003044 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800300a:	f7fe fda5 	bl	8001b58 <HAL_GetTick>
 800300e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003010:	e011      	b.n	8003036 <HAL_RCC_OscConfig+0x2ba>
 8003012:	bf00      	nop
 8003014:	40021000 	.word	0x40021000
 8003018:	0800991c 	.word	0x0800991c
 800301c:	20000070 	.word	0x20000070
 8003020:	20000074 	.word	0x20000074
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003024:	f7fe fd98 	bl	8001b58 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b64      	cmp	r3, #100	; 0x64
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e2aa      	b.n	800358c <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003036:	4baf      	ldr	r3, [pc, #700]	; (80032f4 <HAL_RCC_OscConfig+0x578>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d0f0      	beq.n	8003024 <HAL_RCC_OscConfig+0x2a8>
 8003042:	e014      	b.n	800306e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003044:	f7fe fd88 	bl	8001b58 <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800304a:	e008      	b.n	800305e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800304c:	f7fe fd84 	bl	8001b58 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b64      	cmp	r3, #100	; 0x64
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e296      	b.n	800358c <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800305e:	4ba5      	ldr	r3, [pc, #660]	; (80032f4 <HAL_RCC_OscConfig+0x578>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d1f0      	bne.n	800304c <HAL_RCC_OscConfig+0x2d0>
 800306a:	e000      	b.n	800306e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800306c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d060      	beq.n	800313c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	2b04      	cmp	r3, #4
 800307e:	d005      	beq.n	800308c <HAL_RCC_OscConfig+0x310>
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	2b0c      	cmp	r3, #12
 8003084:	d119      	bne.n	80030ba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	2b02      	cmp	r3, #2
 800308a:	d116      	bne.n	80030ba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800308c:	4b99      	ldr	r3, [pc, #612]	; (80032f4 <HAL_RCC_OscConfig+0x578>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003094:	2b00      	cmp	r3, #0
 8003096:	d005      	beq.n	80030a4 <HAL_RCC_OscConfig+0x328>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d101      	bne.n	80030a4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e273      	b.n	800358c <HAL_RCC_OscConfig+0x810>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030a4:	4b93      	ldr	r3, [pc, #588]	; (80032f4 <HAL_RCC_OscConfig+0x578>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	691b      	ldr	r3, [r3, #16]
 80030b0:	061b      	lsls	r3, r3, #24
 80030b2:	4990      	ldr	r1, [pc, #576]	; (80032f4 <HAL_RCC_OscConfig+0x578>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030b8:	e040      	b.n	800313c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d023      	beq.n	800310a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030c2:	4b8c      	ldr	r3, [pc, #560]	; (80032f4 <HAL_RCC_OscConfig+0x578>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a8b      	ldr	r2, [pc, #556]	; (80032f4 <HAL_RCC_OscConfig+0x578>)
 80030c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ce:	f7fe fd43 	bl	8001b58 <HAL_GetTick>
 80030d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030d4:	e008      	b.n	80030e8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030d6:	f7fe fd3f 	bl	8001b58 <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d901      	bls.n	80030e8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e251      	b.n	800358c <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030e8:	4b82      	ldr	r3, [pc, #520]	; (80032f4 <HAL_RCC_OscConfig+0x578>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d0f0      	beq.n	80030d6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030f4:	4b7f      	ldr	r3, [pc, #508]	; (80032f4 <HAL_RCC_OscConfig+0x578>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	691b      	ldr	r3, [r3, #16]
 8003100:	061b      	lsls	r3, r3, #24
 8003102:	497c      	ldr	r1, [pc, #496]	; (80032f4 <HAL_RCC_OscConfig+0x578>)
 8003104:	4313      	orrs	r3, r2
 8003106:	604b      	str	r3, [r1, #4]
 8003108:	e018      	b.n	800313c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800310a:	4b7a      	ldr	r3, [pc, #488]	; (80032f4 <HAL_RCC_OscConfig+0x578>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a79      	ldr	r2, [pc, #484]	; (80032f4 <HAL_RCC_OscConfig+0x578>)
 8003110:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003114:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003116:	f7fe fd1f 	bl	8001b58 <HAL_GetTick>
 800311a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800311c:	e008      	b.n	8003130 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800311e:	f7fe fd1b 	bl	8001b58 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	2b02      	cmp	r3, #2
 800312a:	d901      	bls.n	8003130 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e22d      	b.n	800358c <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003130:	4b70      	ldr	r3, [pc, #448]	; (80032f4 <HAL_RCC_OscConfig+0x578>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003138:	2b00      	cmp	r3, #0
 800313a:	d1f0      	bne.n	800311e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0308 	and.w	r3, r3, #8
 8003144:	2b00      	cmp	r3, #0
 8003146:	d03c      	beq.n	80031c2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	695b      	ldr	r3, [r3, #20]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d01c      	beq.n	800318a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003150:	4b68      	ldr	r3, [pc, #416]	; (80032f4 <HAL_RCC_OscConfig+0x578>)
 8003152:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003156:	4a67      	ldr	r2, [pc, #412]	; (80032f4 <HAL_RCC_OscConfig+0x578>)
 8003158:	f043 0301 	orr.w	r3, r3, #1
 800315c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003160:	f7fe fcfa 	bl	8001b58 <HAL_GetTick>
 8003164:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003166:	e008      	b.n	800317a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003168:	f7fe fcf6 	bl	8001b58 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b02      	cmp	r3, #2
 8003174:	d901      	bls.n	800317a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e208      	b.n	800358c <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800317a:	4b5e      	ldr	r3, [pc, #376]	; (80032f4 <HAL_RCC_OscConfig+0x578>)
 800317c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003180:	f003 0302 	and.w	r3, r3, #2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d0ef      	beq.n	8003168 <HAL_RCC_OscConfig+0x3ec>
 8003188:	e01b      	b.n	80031c2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800318a:	4b5a      	ldr	r3, [pc, #360]	; (80032f4 <HAL_RCC_OscConfig+0x578>)
 800318c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003190:	4a58      	ldr	r2, [pc, #352]	; (80032f4 <HAL_RCC_OscConfig+0x578>)
 8003192:	f023 0301 	bic.w	r3, r3, #1
 8003196:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800319a:	f7fe fcdd 	bl	8001b58 <HAL_GetTick>
 800319e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031a0:	e008      	b.n	80031b4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031a2:	f7fe fcd9 	bl	8001b58 <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d901      	bls.n	80031b4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e1eb      	b.n	800358c <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031b4:	4b4f      	ldr	r3, [pc, #316]	; (80032f4 <HAL_RCC_OscConfig+0x578>)
 80031b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1ef      	bne.n	80031a2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0304 	and.w	r3, r3, #4
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	f000 80a6 	beq.w	800331c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031d0:	2300      	movs	r3, #0
 80031d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80031d4:	4b47      	ldr	r3, [pc, #284]	; (80032f4 <HAL_RCC_OscConfig+0x578>)
 80031d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d10d      	bne.n	80031fc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031e0:	4b44      	ldr	r3, [pc, #272]	; (80032f4 <HAL_RCC_OscConfig+0x578>)
 80031e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e4:	4a43      	ldr	r2, [pc, #268]	; (80032f4 <HAL_RCC_OscConfig+0x578>)
 80031e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031ea:	6593      	str	r3, [r2, #88]	; 0x58
 80031ec:	4b41      	ldr	r3, [pc, #260]	; (80032f4 <HAL_RCC_OscConfig+0x578>)
 80031ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f4:	60bb      	str	r3, [r7, #8]
 80031f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031f8:	2301      	movs	r3, #1
 80031fa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031fc:	4b3e      	ldr	r3, [pc, #248]	; (80032f8 <HAL_RCC_OscConfig+0x57c>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003204:	2b00      	cmp	r3, #0
 8003206:	d118      	bne.n	800323a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003208:	4b3b      	ldr	r3, [pc, #236]	; (80032f8 <HAL_RCC_OscConfig+0x57c>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a3a      	ldr	r2, [pc, #232]	; (80032f8 <HAL_RCC_OscConfig+0x57c>)
 800320e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003212:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003214:	f7fe fca0 	bl	8001b58 <HAL_GetTick>
 8003218:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800321a:	e008      	b.n	800322e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800321c:	f7fe fc9c 	bl	8001b58 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b02      	cmp	r3, #2
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e1ae      	b.n	800358c <HAL_RCC_OscConfig+0x810>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800322e:	4b32      	ldr	r3, [pc, #200]	; (80032f8 <HAL_RCC_OscConfig+0x57c>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003236:	2b00      	cmp	r3, #0
 8003238:	d0f0      	beq.n	800321c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d108      	bne.n	8003254 <HAL_RCC_OscConfig+0x4d8>
 8003242:	4b2c      	ldr	r3, [pc, #176]	; (80032f4 <HAL_RCC_OscConfig+0x578>)
 8003244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003248:	4a2a      	ldr	r2, [pc, #168]	; (80032f4 <HAL_RCC_OscConfig+0x578>)
 800324a:	f043 0301 	orr.w	r3, r3, #1
 800324e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003252:	e024      	b.n	800329e <HAL_RCC_OscConfig+0x522>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	2b05      	cmp	r3, #5
 800325a:	d110      	bne.n	800327e <HAL_RCC_OscConfig+0x502>
 800325c:	4b25      	ldr	r3, [pc, #148]	; (80032f4 <HAL_RCC_OscConfig+0x578>)
 800325e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003262:	4a24      	ldr	r2, [pc, #144]	; (80032f4 <HAL_RCC_OscConfig+0x578>)
 8003264:	f043 0304 	orr.w	r3, r3, #4
 8003268:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800326c:	4b21      	ldr	r3, [pc, #132]	; (80032f4 <HAL_RCC_OscConfig+0x578>)
 800326e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003272:	4a20      	ldr	r2, [pc, #128]	; (80032f4 <HAL_RCC_OscConfig+0x578>)
 8003274:	f043 0301 	orr.w	r3, r3, #1
 8003278:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800327c:	e00f      	b.n	800329e <HAL_RCC_OscConfig+0x522>
 800327e:	4b1d      	ldr	r3, [pc, #116]	; (80032f4 <HAL_RCC_OscConfig+0x578>)
 8003280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003284:	4a1b      	ldr	r2, [pc, #108]	; (80032f4 <HAL_RCC_OscConfig+0x578>)
 8003286:	f023 0301 	bic.w	r3, r3, #1
 800328a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800328e:	4b19      	ldr	r3, [pc, #100]	; (80032f4 <HAL_RCC_OscConfig+0x578>)
 8003290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003294:	4a17      	ldr	r2, [pc, #92]	; (80032f4 <HAL_RCC_OscConfig+0x578>)
 8003296:	f023 0304 	bic.w	r3, r3, #4
 800329a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d016      	beq.n	80032d4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a6:	f7fe fc57 	bl	8001b58 <HAL_GetTick>
 80032aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032ac:	e00a      	b.n	80032c4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ae:	f7fe fc53 	bl	8001b58 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032bc:	4293      	cmp	r3, r2
 80032be:	d901      	bls.n	80032c4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e163      	b.n	800358c <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032c4:	4b0b      	ldr	r3, [pc, #44]	; (80032f4 <HAL_RCC_OscConfig+0x578>)
 80032c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d0ed      	beq.n	80032ae <HAL_RCC_OscConfig+0x532>
 80032d2:	e01a      	b.n	800330a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d4:	f7fe fc40 	bl	8001b58 <HAL_GetTick>
 80032d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032da:	e00f      	b.n	80032fc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032dc:	f7fe fc3c 	bl	8001b58 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d906      	bls.n	80032fc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e14c      	b.n	800358c <HAL_RCC_OscConfig+0x810>
 80032f2:	bf00      	nop
 80032f4:	40021000 	.word	0x40021000
 80032f8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032fc:	4ba5      	ldr	r3, [pc, #660]	; (8003594 <HAL_RCC_OscConfig+0x818>)
 80032fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1e8      	bne.n	80032dc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800330a:	7ffb      	ldrb	r3, [r7, #31]
 800330c:	2b01      	cmp	r3, #1
 800330e:	d105      	bne.n	800331c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003310:	4ba0      	ldr	r3, [pc, #640]	; (8003594 <HAL_RCC_OscConfig+0x818>)
 8003312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003314:	4a9f      	ldr	r2, [pc, #636]	; (8003594 <HAL_RCC_OscConfig+0x818>)
 8003316:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800331a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0320 	and.w	r3, r3, #32
 8003324:	2b00      	cmp	r3, #0
 8003326:	d03c      	beq.n	80033a2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332c:	2b00      	cmp	r3, #0
 800332e:	d01c      	beq.n	800336a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003330:	4b98      	ldr	r3, [pc, #608]	; (8003594 <HAL_RCC_OscConfig+0x818>)
 8003332:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003336:	4a97      	ldr	r2, [pc, #604]	; (8003594 <HAL_RCC_OscConfig+0x818>)
 8003338:	f043 0301 	orr.w	r3, r3, #1
 800333c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003340:	f7fe fc0a 	bl	8001b58 <HAL_GetTick>
 8003344:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003346:	e008      	b.n	800335a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003348:	f7fe fc06 	bl	8001b58 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b02      	cmp	r3, #2
 8003354:	d901      	bls.n	800335a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e118      	b.n	800358c <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800335a:	4b8e      	ldr	r3, [pc, #568]	; (8003594 <HAL_RCC_OscConfig+0x818>)
 800335c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d0ef      	beq.n	8003348 <HAL_RCC_OscConfig+0x5cc>
 8003368:	e01b      	b.n	80033a2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800336a:	4b8a      	ldr	r3, [pc, #552]	; (8003594 <HAL_RCC_OscConfig+0x818>)
 800336c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003370:	4a88      	ldr	r2, [pc, #544]	; (8003594 <HAL_RCC_OscConfig+0x818>)
 8003372:	f023 0301 	bic.w	r3, r3, #1
 8003376:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800337a:	f7fe fbed 	bl	8001b58 <HAL_GetTick>
 800337e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003380:	e008      	b.n	8003394 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003382:	f7fe fbe9 	bl	8001b58 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d901      	bls.n	8003394 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e0fb      	b.n	800358c <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003394:	4b7f      	ldr	r3, [pc, #508]	; (8003594 <HAL_RCC_OscConfig+0x818>)
 8003396:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1ef      	bne.n	8003382 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	f000 80ef 	beq.w	800358a <HAL_RCC_OscConfig+0x80e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	f040 80c5 	bne.w	8003540 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80033b6:	4b77      	ldr	r3, [pc, #476]	; (8003594 <HAL_RCC_OscConfig+0x818>)
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	f003 0203 	and.w	r2, r3, #3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d12c      	bne.n	8003424 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d4:	3b01      	subs	r3, #1
 80033d6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033d8:	429a      	cmp	r2, r3
 80033da:	d123      	bne.n	8003424 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033e6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d11b      	bne.n	8003424 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d113      	bne.n	8003424 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003406:	085b      	lsrs	r3, r3, #1
 8003408:	3b01      	subs	r3, #1
 800340a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800340c:	429a      	cmp	r2, r3
 800340e:	d109      	bne.n	8003424 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341a:	085b      	lsrs	r3, r3, #1
 800341c:	3b01      	subs	r3, #1
 800341e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003420:	429a      	cmp	r2, r3
 8003422:	d067      	beq.n	80034f4 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	2b0c      	cmp	r3, #12
 8003428:	d062      	beq.n	80034f0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800342a:	4b5a      	ldr	r3, [pc, #360]	; (8003594 <HAL_RCC_OscConfig+0x818>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d001      	beq.n	800343a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e0a8      	b.n	800358c <HAL_RCC_OscConfig+0x810>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800343a:	4b56      	ldr	r3, [pc, #344]	; (8003594 <HAL_RCC_OscConfig+0x818>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a55      	ldr	r2, [pc, #340]	; (8003594 <HAL_RCC_OscConfig+0x818>)
 8003440:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003444:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003446:	f7fe fb87 	bl	8001b58 <HAL_GetTick>
 800344a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800344c:	e008      	b.n	8003460 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800344e:	f7fe fb83 	bl	8001b58 <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	2b02      	cmp	r3, #2
 800345a:	d901      	bls.n	8003460 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	e095      	b.n	800358c <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003460:	4b4c      	ldr	r3, [pc, #304]	; (8003594 <HAL_RCC_OscConfig+0x818>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d1f0      	bne.n	800344e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800346c:	4b49      	ldr	r3, [pc, #292]	; (8003594 <HAL_RCC_OscConfig+0x818>)
 800346e:	68da      	ldr	r2, [r3, #12]
 8003470:	4b49      	ldr	r3, [pc, #292]	; (8003598 <HAL_RCC_OscConfig+0x81c>)
 8003472:	4013      	ands	r3, r2
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800347c:	3a01      	subs	r2, #1
 800347e:	0112      	lsls	r2, r2, #4
 8003480:	4311      	orrs	r1, r2
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003486:	0212      	lsls	r2, r2, #8
 8003488:	4311      	orrs	r1, r2
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800348e:	0852      	lsrs	r2, r2, #1
 8003490:	3a01      	subs	r2, #1
 8003492:	0552      	lsls	r2, r2, #21
 8003494:	4311      	orrs	r1, r2
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800349a:	0852      	lsrs	r2, r2, #1
 800349c:	3a01      	subs	r2, #1
 800349e:	0652      	lsls	r2, r2, #25
 80034a0:	4311      	orrs	r1, r2
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80034a6:	06d2      	lsls	r2, r2, #27
 80034a8:	430a      	orrs	r2, r1
 80034aa:	493a      	ldr	r1, [pc, #232]	; (8003594 <HAL_RCC_OscConfig+0x818>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80034b0:	4b38      	ldr	r3, [pc, #224]	; (8003594 <HAL_RCC_OscConfig+0x818>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a37      	ldr	r2, [pc, #220]	; (8003594 <HAL_RCC_OscConfig+0x818>)
 80034b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034ba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034bc:	4b35      	ldr	r3, [pc, #212]	; (8003594 <HAL_RCC_OscConfig+0x818>)
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	4a34      	ldr	r2, [pc, #208]	; (8003594 <HAL_RCC_OscConfig+0x818>)
 80034c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034c6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80034c8:	f7fe fb46 	bl	8001b58 <HAL_GetTick>
 80034cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034ce:	e008      	b.n	80034e2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034d0:	f7fe fb42 	bl	8001b58 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e054      	b.n	800358c <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034e2:	4b2c      	ldr	r3, [pc, #176]	; (8003594 <HAL_RCC_OscConfig+0x818>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d0f0      	beq.n	80034d0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034ee:	e04c      	b.n	800358a <HAL_RCC_OscConfig+0x80e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e04b      	b.n	800358c <HAL_RCC_OscConfig+0x810>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034f4:	4b27      	ldr	r3, [pc, #156]	; (8003594 <HAL_RCC_OscConfig+0x818>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d144      	bne.n	800358a <HAL_RCC_OscConfig+0x80e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003500:	4b24      	ldr	r3, [pc, #144]	; (8003594 <HAL_RCC_OscConfig+0x818>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a23      	ldr	r2, [pc, #140]	; (8003594 <HAL_RCC_OscConfig+0x818>)
 8003506:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800350a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800350c:	4b21      	ldr	r3, [pc, #132]	; (8003594 <HAL_RCC_OscConfig+0x818>)
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	4a20      	ldr	r2, [pc, #128]	; (8003594 <HAL_RCC_OscConfig+0x818>)
 8003512:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003516:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003518:	f7fe fb1e 	bl	8001b58 <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800351e:	e008      	b.n	8003532 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003520:	f7fe fb1a 	bl	8001b58 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b02      	cmp	r3, #2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e02c      	b.n	800358c <HAL_RCC_OscConfig+0x810>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003532:	4b18      	ldr	r3, [pc, #96]	; (8003594 <HAL_RCC_OscConfig+0x818>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d0f0      	beq.n	8003520 <HAL_RCC_OscConfig+0x7a4>
 800353e:	e024      	b.n	800358a <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	2b0c      	cmp	r3, #12
 8003544:	d01f      	beq.n	8003586 <HAL_RCC_OscConfig+0x80a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003546:	4b13      	ldr	r3, [pc, #76]	; (8003594 <HAL_RCC_OscConfig+0x818>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a12      	ldr	r2, [pc, #72]	; (8003594 <HAL_RCC_OscConfig+0x818>)
 800354c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003550:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003552:	f7fe fb01 	bl	8001b58 <HAL_GetTick>
 8003556:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003558:	e008      	b.n	800356c <HAL_RCC_OscConfig+0x7f0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800355a:	f7fe fafd 	bl	8001b58 <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	2b02      	cmp	r3, #2
 8003566:	d901      	bls.n	800356c <HAL_RCC_OscConfig+0x7f0>
          {
            return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e00f      	b.n	800358c <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800356c:	4b09      	ldr	r3, [pc, #36]	; (8003594 <HAL_RCC_OscConfig+0x818>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d1f0      	bne.n	800355a <HAL_RCC_OscConfig+0x7de>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003578:	4b06      	ldr	r3, [pc, #24]	; (8003594 <HAL_RCC_OscConfig+0x818>)
 800357a:	68da      	ldr	r2, [r3, #12]
 800357c:	4905      	ldr	r1, [pc, #20]	; (8003594 <HAL_RCC_OscConfig+0x818>)
 800357e:	4b07      	ldr	r3, [pc, #28]	; (800359c <HAL_RCC_OscConfig+0x820>)
 8003580:	4013      	ands	r3, r2
 8003582:	60cb      	str	r3, [r1, #12]
 8003584:	e001      	b.n	800358a <HAL_RCC_OscConfig+0x80e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e000      	b.n	800358c <HAL_RCC_OscConfig+0x810>
      }
    }
  }
  return HAL_OK;
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	3720      	adds	r7, #32
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}
 8003594:	40021000 	.word	0x40021000
 8003598:	019d808c 	.word	0x019d808c
 800359c:	feeefffc 	.word	0xfeeefffc

080035a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d101      	bne.n	80035b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e0e7      	b.n	8003784 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035b4:	4b75      	ldr	r3, [pc, #468]	; (800378c <HAL_RCC_ClockConfig+0x1ec>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0307 	and.w	r3, r3, #7
 80035bc:	683a      	ldr	r2, [r7, #0]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d910      	bls.n	80035e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035c2:	4b72      	ldr	r3, [pc, #456]	; (800378c <HAL_RCC_ClockConfig+0x1ec>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f023 0207 	bic.w	r2, r3, #7
 80035ca:	4970      	ldr	r1, [pc, #448]	; (800378c <HAL_RCC_ClockConfig+0x1ec>)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035d2:	4b6e      	ldr	r3, [pc, #440]	; (800378c <HAL_RCC_ClockConfig+0x1ec>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0307 	and.w	r3, r3, #7
 80035da:	683a      	ldr	r2, [r7, #0]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d001      	beq.n	80035e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e0cf      	b.n	8003784 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d010      	beq.n	8003612 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689a      	ldr	r2, [r3, #8]
 80035f4:	4b66      	ldr	r3, [pc, #408]	; (8003790 <HAL_RCC_ClockConfig+0x1f0>)
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d908      	bls.n	8003612 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003600:	4b63      	ldr	r3, [pc, #396]	; (8003790 <HAL_RCC_ClockConfig+0x1f0>)
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	4960      	ldr	r1, [pc, #384]	; (8003790 <HAL_RCC_ClockConfig+0x1f0>)
 800360e:	4313      	orrs	r3, r2
 8003610:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	2b00      	cmp	r3, #0
 800361c:	d04c      	beq.n	80036b8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	2b03      	cmp	r3, #3
 8003624:	d107      	bne.n	8003636 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003626:	4b5a      	ldr	r3, [pc, #360]	; (8003790 <HAL_RCC_ClockConfig+0x1f0>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d121      	bne.n	8003676 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e0a6      	b.n	8003784 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	2b02      	cmp	r3, #2
 800363c:	d107      	bne.n	800364e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800363e:	4b54      	ldr	r3, [pc, #336]	; (8003790 <HAL_RCC_ClockConfig+0x1f0>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d115      	bne.n	8003676 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e09a      	b.n	8003784 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d107      	bne.n	8003666 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003656:	4b4e      	ldr	r3, [pc, #312]	; (8003790 <HAL_RCC_ClockConfig+0x1f0>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d109      	bne.n	8003676 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e08e      	b.n	8003784 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003666:	4b4a      	ldr	r3, [pc, #296]	; (8003790 <HAL_RCC_ClockConfig+0x1f0>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800366e:	2b00      	cmp	r3, #0
 8003670:	d101      	bne.n	8003676 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e086      	b.n	8003784 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003676:	4b46      	ldr	r3, [pc, #280]	; (8003790 <HAL_RCC_ClockConfig+0x1f0>)
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f023 0203 	bic.w	r2, r3, #3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	4943      	ldr	r1, [pc, #268]	; (8003790 <HAL_RCC_ClockConfig+0x1f0>)
 8003684:	4313      	orrs	r3, r2
 8003686:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003688:	f7fe fa66 	bl	8001b58 <HAL_GetTick>
 800368c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800368e:	e00a      	b.n	80036a6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003690:	f7fe fa62 	bl	8001b58 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	f241 3288 	movw	r2, #5000	; 0x1388
 800369e:	4293      	cmp	r3, r2
 80036a0:	d901      	bls.n	80036a6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e06e      	b.n	8003784 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036a6:	4b3a      	ldr	r3, [pc, #232]	; (8003790 <HAL_RCC_ClockConfig+0x1f0>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f003 020c 	and.w	r2, r3, #12
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d1eb      	bne.n	8003690 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0302 	and.w	r3, r3, #2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d010      	beq.n	80036e6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	689a      	ldr	r2, [r3, #8]
 80036c8:	4b31      	ldr	r3, [pc, #196]	; (8003790 <HAL_RCC_ClockConfig+0x1f0>)
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d208      	bcs.n	80036e6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036d4:	4b2e      	ldr	r3, [pc, #184]	; (8003790 <HAL_RCC_ClockConfig+0x1f0>)
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	492b      	ldr	r1, [pc, #172]	; (8003790 <HAL_RCC_ClockConfig+0x1f0>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036e6:	4b29      	ldr	r3, [pc, #164]	; (800378c <HAL_RCC_ClockConfig+0x1ec>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0307 	and.w	r3, r3, #7
 80036ee:	683a      	ldr	r2, [r7, #0]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d210      	bcs.n	8003716 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036f4:	4b25      	ldr	r3, [pc, #148]	; (800378c <HAL_RCC_ClockConfig+0x1ec>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f023 0207 	bic.w	r2, r3, #7
 80036fc:	4923      	ldr	r1, [pc, #140]	; (800378c <HAL_RCC_ClockConfig+0x1ec>)
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	4313      	orrs	r3, r2
 8003702:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003704:	4b21      	ldr	r3, [pc, #132]	; (800378c <HAL_RCC_ClockConfig+0x1ec>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0307 	and.w	r3, r3, #7
 800370c:	683a      	ldr	r2, [r7, #0]
 800370e:	429a      	cmp	r2, r3
 8003710:	d001      	beq.n	8003716 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e036      	b.n	8003784 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0304 	and.w	r3, r3, #4
 800371e:	2b00      	cmp	r3, #0
 8003720:	d008      	beq.n	8003734 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003722:	4b1b      	ldr	r3, [pc, #108]	; (8003790 <HAL_RCC_ClockConfig+0x1f0>)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	4918      	ldr	r1, [pc, #96]	; (8003790 <HAL_RCC_ClockConfig+0x1f0>)
 8003730:	4313      	orrs	r3, r2
 8003732:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0308 	and.w	r3, r3, #8
 800373c:	2b00      	cmp	r3, #0
 800373e:	d009      	beq.n	8003754 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003740:	4b13      	ldr	r3, [pc, #76]	; (8003790 <HAL_RCC_ClockConfig+0x1f0>)
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	00db      	lsls	r3, r3, #3
 800374e:	4910      	ldr	r1, [pc, #64]	; (8003790 <HAL_RCC_ClockConfig+0x1f0>)
 8003750:	4313      	orrs	r3, r2
 8003752:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003754:	f000 f824 	bl	80037a0 <HAL_RCC_GetSysClockFreq>
 8003758:	4602      	mov	r2, r0
 800375a:	4b0d      	ldr	r3, [pc, #52]	; (8003790 <HAL_RCC_ClockConfig+0x1f0>)
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	091b      	lsrs	r3, r3, #4
 8003760:	f003 030f 	and.w	r3, r3, #15
 8003764:	490b      	ldr	r1, [pc, #44]	; (8003794 <HAL_RCC_ClockConfig+0x1f4>)
 8003766:	5ccb      	ldrb	r3, [r1, r3]
 8003768:	f003 031f 	and.w	r3, r3, #31
 800376c:	fa22 f303 	lsr.w	r3, r2, r3
 8003770:	4a09      	ldr	r2, [pc, #36]	; (8003798 <HAL_RCC_ClockConfig+0x1f8>)
 8003772:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003774:	4b09      	ldr	r3, [pc, #36]	; (800379c <HAL_RCC_ClockConfig+0x1fc>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4618      	mov	r0, r3
 800377a:	f7fe f873 	bl	8001864 <HAL_InitTick>
 800377e:	4603      	mov	r3, r0
 8003780:	72fb      	strb	r3, [r7, #11]

  return status;
 8003782:	7afb      	ldrb	r3, [r7, #11]
}
 8003784:	4618      	mov	r0, r3
 8003786:	3710      	adds	r7, #16
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	40022000 	.word	0x40022000
 8003790:	40021000 	.word	0x40021000
 8003794:	0800991c 	.word	0x0800991c
 8003798:	20000070 	.word	0x20000070
 800379c:	20000074 	.word	0x20000074

080037a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b089      	sub	sp, #36	; 0x24
 80037a4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80037a6:	2300      	movs	r3, #0
 80037a8:	61fb      	str	r3, [r7, #28]
 80037aa:	2300      	movs	r3, #0
 80037ac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037ae:	4b3e      	ldr	r3, [pc, #248]	; (80038a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f003 030c 	and.w	r3, r3, #12
 80037b6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037b8:	4b3b      	ldr	r3, [pc, #236]	; (80038a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	f003 0303 	and.w	r3, r3, #3
 80037c0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d005      	beq.n	80037d4 <HAL_RCC_GetSysClockFreq+0x34>
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	2b0c      	cmp	r3, #12
 80037cc:	d121      	bne.n	8003812 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d11e      	bne.n	8003812 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80037d4:	4b34      	ldr	r3, [pc, #208]	; (80038a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0308 	and.w	r3, r3, #8
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d107      	bne.n	80037f0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80037e0:	4b31      	ldr	r3, [pc, #196]	; (80038a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80037e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037e6:	0a1b      	lsrs	r3, r3, #8
 80037e8:	f003 030f 	and.w	r3, r3, #15
 80037ec:	61fb      	str	r3, [r7, #28]
 80037ee:	e005      	b.n	80037fc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80037f0:	4b2d      	ldr	r3, [pc, #180]	; (80038a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	091b      	lsrs	r3, r3, #4
 80037f6:	f003 030f 	and.w	r3, r3, #15
 80037fa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80037fc:	4a2b      	ldr	r2, [pc, #172]	; (80038ac <HAL_RCC_GetSysClockFreq+0x10c>)
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003804:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d10d      	bne.n	8003828 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003810:	e00a      	b.n	8003828 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	2b04      	cmp	r3, #4
 8003816:	d102      	bne.n	800381e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003818:	4b25      	ldr	r3, [pc, #148]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x110>)
 800381a:	61bb      	str	r3, [r7, #24]
 800381c:	e004      	b.n	8003828 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	2b08      	cmp	r3, #8
 8003822:	d101      	bne.n	8003828 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003824:	4b23      	ldr	r3, [pc, #140]	; (80038b4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003826:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	2b0c      	cmp	r3, #12
 800382c:	d134      	bne.n	8003898 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800382e:	4b1e      	ldr	r3, [pc, #120]	; (80038a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	f003 0303 	and.w	r3, r3, #3
 8003836:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	2b02      	cmp	r3, #2
 800383c:	d003      	beq.n	8003846 <HAL_RCC_GetSysClockFreq+0xa6>
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	2b03      	cmp	r3, #3
 8003842:	d003      	beq.n	800384c <HAL_RCC_GetSysClockFreq+0xac>
 8003844:	e005      	b.n	8003852 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003846:	4b1a      	ldr	r3, [pc, #104]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003848:	617b      	str	r3, [r7, #20]
      break;
 800384a:	e005      	b.n	8003858 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800384c:	4b19      	ldr	r3, [pc, #100]	; (80038b4 <HAL_RCC_GetSysClockFreq+0x114>)
 800384e:	617b      	str	r3, [r7, #20]
      break;
 8003850:	e002      	b.n	8003858 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	617b      	str	r3, [r7, #20]
      break;
 8003856:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003858:	4b13      	ldr	r3, [pc, #76]	; (80038a8 <HAL_RCC_GetSysClockFreq+0x108>)
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	091b      	lsrs	r3, r3, #4
 800385e:	f003 0307 	and.w	r3, r3, #7
 8003862:	3301      	adds	r3, #1
 8003864:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003866:	4b10      	ldr	r3, [pc, #64]	; (80038a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	0a1b      	lsrs	r3, r3, #8
 800386c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003870:	697a      	ldr	r2, [r7, #20]
 8003872:	fb02 f203 	mul.w	r2, r2, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	fbb2 f3f3 	udiv	r3, r2, r3
 800387c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800387e:	4b0a      	ldr	r3, [pc, #40]	; (80038a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	0e5b      	lsrs	r3, r3, #25
 8003884:	f003 0303 	and.w	r3, r3, #3
 8003888:	3301      	adds	r3, #1
 800388a:	005b      	lsls	r3, r3, #1
 800388c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800388e:	697a      	ldr	r2, [r7, #20]
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	fbb2 f3f3 	udiv	r3, r2, r3
 8003896:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003898:	69bb      	ldr	r3, [r7, #24]
}
 800389a:	4618      	mov	r0, r3
 800389c:	3724      	adds	r7, #36	; 0x24
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	40021000 	.word	0x40021000
 80038ac:	08009934 	.word	0x08009934
 80038b0:	00f42400 	.word	0x00f42400
 80038b4:	007a1200 	.word	0x007a1200

080038b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038b8:	b480      	push	{r7}
 80038ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038bc:	4b03      	ldr	r3, [pc, #12]	; (80038cc <HAL_RCC_GetHCLKFreq+0x14>)
 80038be:	681b      	ldr	r3, [r3, #0]
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	20000070 	.word	0x20000070

080038d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80038d4:	f7ff fff0 	bl	80038b8 <HAL_RCC_GetHCLKFreq>
 80038d8:	4602      	mov	r2, r0
 80038da:	4b06      	ldr	r3, [pc, #24]	; (80038f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	0a1b      	lsrs	r3, r3, #8
 80038e0:	f003 0307 	and.w	r3, r3, #7
 80038e4:	4904      	ldr	r1, [pc, #16]	; (80038f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80038e6:	5ccb      	ldrb	r3, [r1, r3]
 80038e8:	f003 031f 	and.w	r3, r3, #31
 80038ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	40021000 	.word	0x40021000
 80038f8:	0800992c 	.word	0x0800992c

080038fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003900:	f7ff ffda 	bl	80038b8 <HAL_RCC_GetHCLKFreq>
 8003904:	4602      	mov	r2, r0
 8003906:	4b06      	ldr	r3, [pc, #24]	; (8003920 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	0adb      	lsrs	r3, r3, #11
 800390c:	f003 0307 	and.w	r3, r3, #7
 8003910:	4904      	ldr	r1, [pc, #16]	; (8003924 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003912:	5ccb      	ldrb	r3, [r1, r3]
 8003914:	f003 031f 	and.w	r3, r3, #31
 8003918:	fa22 f303 	lsr.w	r3, r2, r3
}
 800391c:	4618      	mov	r0, r3
 800391e:	bd80      	pop	{r7, pc}
 8003920:	40021000 	.word	0x40021000
 8003924:	0800992c 	.word	0x0800992c

08003928 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	220f      	movs	r2, #15
 8003936:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003938:	4b12      	ldr	r3, [pc, #72]	; (8003984 <HAL_RCC_GetClockConfig+0x5c>)
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f003 0203 	and.w	r2, r3, #3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003944:	4b0f      	ldr	r3, [pc, #60]	; (8003984 <HAL_RCC_GetClockConfig+0x5c>)
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003950:	4b0c      	ldr	r3, [pc, #48]	; (8003984 <HAL_RCC_GetClockConfig+0x5c>)
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800395c:	4b09      	ldr	r3, [pc, #36]	; (8003984 <HAL_RCC_GetClockConfig+0x5c>)
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	08db      	lsrs	r3, r3, #3
 8003962:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800396a:	4b07      	ldr	r3, [pc, #28]	; (8003988 <HAL_RCC_GetClockConfig+0x60>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0207 	and.w	r2, r3, #7
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	601a      	str	r2, [r3, #0]
}
 8003976:	bf00      	nop
 8003978:	370c      	adds	r7, #12
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	40021000 	.word	0x40021000
 8003988:	40022000 	.word	0x40022000

0800398c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b086      	sub	sp, #24
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003994:	2300      	movs	r3, #0
 8003996:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003998:	4b2a      	ldr	r3, [pc, #168]	; (8003a44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800399a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800399c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d003      	beq.n	80039ac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80039a4:	f7ff f986 	bl	8002cb4 <HAL_PWREx_GetVoltageRange>
 80039a8:	6178      	str	r0, [r7, #20]
 80039aa:	e014      	b.n	80039d6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80039ac:	4b25      	ldr	r3, [pc, #148]	; (8003a44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039b0:	4a24      	ldr	r2, [pc, #144]	; (8003a44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039b6:	6593      	str	r3, [r2, #88]	; 0x58
 80039b8:	4b22      	ldr	r3, [pc, #136]	; (8003a44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039c0:	60fb      	str	r3, [r7, #12]
 80039c2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80039c4:	f7ff f976 	bl	8002cb4 <HAL_PWREx_GetVoltageRange>
 80039c8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80039ca:	4b1e      	ldr	r3, [pc, #120]	; (8003a44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ce:	4a1d      	ldr	r2, [pc, #116]	; (8003a44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039d4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039dc:	d10b      	bne.n	80039f6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2b80      	cmp	r3, #128	; 0x80
 80039e2:	d919      	bls.n	8003a18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2ba0      	cmp	r3, #160	; 0xa0
 80039e8:	d902      	bls.n	80039f0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80039ea:	2302      	movs	r3, #2
 80039ec:	613b      	str	r3, [r7, #16]
 80039ee:	e013      	b.n	8003a18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80039f0:	2301      	movs	r3, #1
 80039f2:	613b      	str	r3, [r7, #16]
 80039f4:	e010      	b.n	8003a18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2b80      	cmp	r3, #128	; 0x80
 80039fa:	d902      	bls.n	8003a02 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80039fc:	2303      	movs	r3, #3
 80039fe:	613b      	str	r3, [r7, #16]
 8003a00:	e00a      	b.n	8003a18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2b80      	cmp	r3, #128	; 0x80
 8003a06:	d102      	bne.n	8003a0e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a08:	2302      	movs	r3, #2
 8003a0a:	613b      	str	r3, [r7, #16]
 8003a0c:	e004      	b.n	8003a18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2b70      	cmp	r3, #112	; 0x70
 8003a12:	d101      	bne.n	8003a18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a14:	2301      	movs	r3, #1
 8003a16:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003a18:	4b0b      	ldr	r3, [pc, #44]	; (8003a48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f023 0207 	bic.w	r2, r3, #7
 8003a20:	4909      	ldr	r1, [pc, #36]	; (8003a48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003a28:	4b07      	ldr	r3, [pc, #28]	; (8003a48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0307 	and.w	r3, r3, #7
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d001      	beq.n	8003a3a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e000      	b.n	8003a3c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3718      	adds	r7, #24
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	40021000 	.word	0x40021000
 8003a48:	40022000 	.word	0x40022000

08003a4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b086      	sub	sp, #24
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a54:	2300      	movs	r3, #0
 8003a56:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a58:	2300      	movs	r3, #0
 8003a5a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d031      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a6c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003a70:	d01a      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003a72:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003a76:	d814      	bhi.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d009      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003a7c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a80:	d10f      	bne.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003a82:	4bac      	ldr	r3, [pc, #688]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	4aab      	ldr	r2, [pc, #684]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003a88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a8c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a8e:	e00c      	b.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	3304      	adds	r3, #4
 8003a94:	2100      	movs	r1, #0
 8003a96:	4618      	mov	r0, r3
 8003a98:	f000 f9dc 	bl	8003e54 <RCCEx_PLLSAI1_Config>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003aa0:	e003      	b.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	74fb      	strb	r3, [r7, #19]
      break;
 8003aa6:	e000      	b.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003aa8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003aaa:	7cfb      	ldrb	r3, [r7, #19]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d10b      	bne.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ab0:	4ba0      	ldr	r3, [pc, #640]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003abe:	499d      	ldr	r1, [pc, #628]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003ac6:	e001      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ac8:	7cfb      	ldrb	r3, [r7, #19]
 8003aca:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	f000 8099 	beq.w	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ada:	2300      	movs	r3, #0
 8003adc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003ade:	4b95      	ldr	r3, [pc, #596]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d101      	bne.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003aea:	2301      	movs	r3, #1
 8003aec:	e000      	b.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003aee:	2300      	movs	r3, #0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d00d      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003af4:	4b8f      	ldr	r3, [pc, #572]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003af8:	4a8e      	ldr	r2, [pc, #568]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003afa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003afe:	6593      	str	r3, [r2, #88]	; 0x58
 8003b00:	4b8c      	ldr	r3, [pc, #560]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b08:	60bb      	str	r3, [r7, #8]
 8003b0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b10:	4b89      	ldr	r3, [pc, #548]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a88      	ldr	r2, [pc, #544]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003b16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b1a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b1c:	f7fe f81c 	bl	8001b58 <HAL_GetTick>
 8003b20:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b22:	e009      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b24:	f7fe f818 	bl	8001b58 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d902      	bls.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	74fb      	strb	r3, [r7, #19]
        break;
 8003b36:	e005      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b38:	4b7f      	ldr	r3, [pc, #508]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d0ef      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003b44:	7cfb      	ldrb	r3, [r7, #19]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d155      	bne.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b4a:	4b7a      	ldr	r3, [pc, #488]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b54:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d01e      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b60:	697a      	ldr	r2, [r7, #20]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d019      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b66:	4b73      	ldr	r3, [pc, #460]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b70:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b72:	4b70      	ldr	r3, [pc, #448]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b78:	4a6e      	ldr	r2, [pc, #440]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b82:	4b6c      	ldr	r3, [pc, #432]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b88:	4a6a      	ldr	r2, [pc, #424]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b92:	4a68      	ldr	r2, [pc, #416]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	f003 0301 	and.w	r3, r3, #1
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d016      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba4:	f7fd ffd8 	bl	8001b58 <HAL_GetTick>
 8003ba8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003baa:	e00b      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bac:	f7fd ffd4 	bl	8001b58 <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d902      	bls.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	74fb      	strb	r3, [r7, #19]
            break;
 8003bc2:	e006      	b.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bc4:	4b5b      	ldr	r3, [pc, #364]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d0ec      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003bd2:	7cfb      	ldrb	r3, [r7, #19]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d10b      	bne.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bd8:	4b56      	ldr	r3, [pc, #344]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bde:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003be6:	4953      	ldr	r1, [pc, #332]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003bee:	e004      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bf0:	7cfb      	ldrb	r3, [r7, #19]
 8003bf2:	74bb      	strb	r3, [r7, #18]
 8003bf4:	e001      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bf6:	7cfb      	ldrb	r3, [r7, #19]
 8003bf8:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bfa:	7c7b      	ldrb	r3, [r7, #17]
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d105      	bne.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c00:	4b4c      	ldr	r3, [pc, #304]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c04:	4a4b      	ldr	r2, [pc, #300]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003c06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c0a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0301 	and.w	r3, r3, #1
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d00a      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c18:	4b46      	ldr	r3, [pc, #280]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c1e:	f023 0203 	bic.w	r2, r3, #3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a1b      	ldr	r3, [r3, #32]
 8003c26:	4943      	ldr	r1, [pc, #268]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0302 	and.w	r3, r3, #2
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00a      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c3a:	4b3e      	ldr	r3, [pc, #248]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c40:	f023 020c 	bic.w	r2, r3, #12
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c48:	493a      	ldr	r1, [pc, #232]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0320 	and.w	r3, r3, #32
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00a      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c5c:	4b35      	ldr	r3, [pc, #212]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c62:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6a:	4932      	ldr	r1, [pc, #200]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00a      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c7e:	4b2d      	ldr	r3, [pc, #180]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c84:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c8c:	4929      	ldr	r1, [pc, #164]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d00a      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ca0:	4b24      	ldr	r3, [pc, #144]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cae:	4921      	ldr	r1, [pc, #132]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00a      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cc2:	4b1c      	ldr	r3, [pc, #112]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd0:	4918      	ldr	r1, [pc, #96]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d00a      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ce4:	4b13      	ldr	r3, [pc, #76]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf2:	4910      	ldr	r1, [pc, #64]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d02c      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d06:	4b0b      	ldr	r3, [pc, #44]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d0c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d14:	4907      	ldr	r1, [pc, #28]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d24:	d10a      	bne.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d26:	4b03      	ldr	r3, [pc, #12]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	4a02      	ldr	r2, [pc, #8]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003d2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d30:	60d3      	str	r3, [r2, #12]
 8003d32:	e015      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8003d34:	40021000 	.word	0x40021000
 8003d38:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d44:	d10c      	bne.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	3304      	adds	r3, #4
 8003d4a:	2101      	movs	r1, #1
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f000 f881 	bl	8003e54 <RCCEx_PLLSAI1_Config>
 8003d52:	4603      	mov	r3, r0
 8003d54:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003d56:	7cfb      	ldrb	r3, [r7, #19]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d001      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 8003d5c:	7cfb      	ldrb	r3, [r7, #19]
 8003d5e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d028      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d6c:	4b30      	ldr	r3, [pc, #192]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d72:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d7a:	492d      	ldr	r1, [pc, #180]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d8a:	d106      	bne.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d8c:	4b28      	ldr	r3, [pc, #160]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	4a27      	ldr	r2, [pc, #156]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d96:	60d3      	str	r3, [r2, #12]
 8003d98:	e011      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d9e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003da2:	d10c      	bne.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	3304      	adds	r3, #4
 8003da8:	2101      	movs	r1, #1
 8003daa:	4618      	mov	r0, r3
 8003dac:	f000 f852 	bl	8003e54 <RCCEx_PLLSAI1_Config>
 8003db0:	4603      	mov	r3, r0
 8003db2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003db4:	7cfb      	ldrb	r3, [r7, #19]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d001      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 8003dba:	7cfb      	ldrb	r3, [r7, #19]
 8003dbc:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d01c      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003dca:	4b19      	ldr	r3, [pc, #100]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dd0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dd8:	4915      	ldr	r1, [pc, #84]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003de4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003de8:	d10c      	bne.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	3304      	adds	r3, #4
 8003dee:	2102      	movs	r1, #2
 8003df0:	4618      	mov	r0, r3
 8003df2:	f000 f82f 	bl	8003e54 <RCCEx_PLLSAI1_Config>
 8003df6:	4603      	mov	r3, r0
 8003df8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003dfa:	7cfb      	ldrb	r3, [r7, #19]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d001      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8003e00:	7cfb      	ldrb	r3, [r7, #19]
 8003e02:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00a      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003e10:	4b07      	ldr	r3, [pc, #28]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e16:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e1e:	4904      	ldr	r1, [pc, #16]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003e26:	7cbb      	ldrb	r3, [r7, #18]
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3718      	adds	r7, #24
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	40021000 	.word	0x40021000

08003e34 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003e34:	b480      	push	{r7}
 8003e36:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003e38:	4b05      	ldr	r3, [pc, #20]	; (8003e50 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a04      	ldr	r2, [pc, #16]	; (8003e50 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003e3e:	f043 0304 	orr.w	r3, r3, #4
 8003e42:	6013      	str	r3, [r2, #0]
}
 8003e44:	bf00      	nop
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	40021000 	.word	0x40021000

08003e54 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003e62:	4b74      	ldr	r3, [pc, #464]	; (8004034 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	f003 0303 	and.w	r3, r3, #3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d018      	beq.n	8003ea0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003e6e:	4b71      	ldr	r3, [pc, #452]	; (8004034 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	f003 0203 	and.w	r2, r3, #3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d10d      	bne.n	8003e9a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
       ||
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d009      	beq.n	8003e9a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003e86:	4b6b      	ldr	r3, [pc, #428]	; (8004034 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	091b      	lsrs	r3, r3, #4
 8003e8c:	f003 0307 	and.w	r3, r3, #7
 8003e90:	1c5a      	adds	r2, r3, #1
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
       ||
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d047      	beq.n	8003f2a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	73fb      	strb	r3, [r7, #15]
 8003e9e:	e044      	b.n	8003f2a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2b03      	cmp	r3, #3
 8003ea6:	d018      	beq.n	8003eda <RCCEx_PLLSAI1_Config+0x86>
 8003ea8:	2b03      	cmp	r3, #3
 8003eaa:	d825      	bhi.n	8003ef8 <RCCEx_PLLSAI1_Config+0xa4>
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d002      	beq.n	8003eb6 <RCCEx_PLLSAI1_Config+0x62>
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d009      	beq.n	8003ec8 <RCCEx_PLLSAI1_Config+0x74>
 8003eb4:	e020      	b.n	8003ef8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003eb6:	4b5f      	ldr	r3, [pc, #380]	; (8004034 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0302 	and.w	r3, r3, #2
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d11d      	bne.n	8003efe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ec6:	e01a      	b.n	8003efe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ec8:	4b5a      	ldr	r3, [pc, #360]	; (8004034 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d116      	bne.n	8003f02 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ed8:	e013      	b.n	8003f02 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003eda:	4b56      	ldr	r3, [pc, #344]	; (8004034 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d10f      	bne.n	8003f06 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003ee6:	4b53      	ldr	r3, [pc, #332]	; (8004034 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d109      	bne.n	8003f06 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003ef6:	e006      	b.n	8003f06 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	73fb      	strb	r3, [r7, #15]
      break;
 8003efc:	e004      	b.n	8003f08 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003efe:	bf00      	nop
 8003f00:	e002      	b.n	8003f08 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f02:	bf00      	nop
 8003f04:	e000      	b.n	8003f08 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f06:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f08:	7bfb      	ldrb	r3, [r7, #15]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d10d      	bne.n	8003f2a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f0e:	4b49      	ldr	r3, [pc, #292]	; (8004034 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6819      	ldr	r1, [r3, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	011b      	lsls	r3, r3, #4
 8003f22:	430b      	orrs	r3, r1
 8003f24:	4943      	ldr	r1, [pc, #268]	; (8004034 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003f2a:	7bfb      	ldrb	r3, [r7, #15]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d17c      	bne.n	800402a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003f30:	4b40      	ldr	r3, [pc, #256]	; (8004034 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a3f      	ldr	r2, [pc, #252]	; (8004034 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f36:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003f3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f3c:	f7fd fe0c 	bl	8001b58 <HAL_GetTick>
 8003f40:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f42:	e009      	b.n	8003f58 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f44:	f7fd fe08 	bl	8001b58 <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d902      	bls.n	8003f58 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	73fb      	strb	r3, [r7, #15]
        break;
 8003f56:	e005      	b.n	8003f64 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f58:	4b36      	ldr	r3, [pc, #216]	; (8004034 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1ef      	bne.n	8003f44 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003f64:	7bfb      	ldrb	r3, [r7, #15]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d15f      	bne.n	800402a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d110      	bne.n	8003f92 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f70:	4b30      	ldr	r3, [pc, #192]	; (8004034 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f72:	691b      	ldr	r3, [r3, #16]
 8003f74:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003f78:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	6892      	ldr	r2, [r2, #8]
 8003f80:	0211      	lsls	r1, r2, #8
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	68d2      	ldr	r2, [r2, #12]
 8003f86:	06d2      	lsls	r2, r2, #27
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	492a      	ldr	r1, [pc, #168]	; (8004034 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	610b      	str	r3, [r1, #16]
 8003f90:	e027      	b.n	8003fe2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d112      	bne.n	8003fbe <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f98:	4b26      	ldr	r3, [pc, #152]	; (8004034 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f9a:	691b      	ldr	r3, [r3, #16]
 8003f9c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003fa0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	6892      	ldr	r2, [r2, #8]
 8003fa8:	0211      	lsls	r1, r2, #8
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	6912      	ldr	r2, [r2, #16]
 8003fae:	0852      	lsrs	r2, r2, #1
 8003fb0:	3a01      	subs	r2, #1
 8003fb2:	0552      	lsls	r2, r2, #21
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	491f      	ldr	r1, [pc, #124]	; (8004034 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	610b      	str	r3, [r1, #16]
 8003fbc:	e011      	b.n	8003fe2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003fbe:	4b1d      	ldr	r3, [pc, #116]	; (8004034 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003fc6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	6892      	ldr	r2, [r2, #8]
 8003fce:	0211      	lsls	r1, r2, #8
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	6952      	ldr	r2, [r2, #20]
 8003fd4:	0852      	lsrs	r2, r2, #1
 8003fd6:	3a01      	subs	r2, #1
 8003fd8:	0652      	lsls	r2, r2, #25
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	4915      	ldr	r1, [pc, #84]	; (8004034 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003fe2:	4b14      	ldr	r3, [pc, #80]	; (8004034 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a13      	ldr	r2, [pc, #76]	; (8004034 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fe8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003fec:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fee:	f7fd fdb3 	bl	8001b58 <HAL_GetTick>
 8003ff2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ff4:	e009      	b.n	800400a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ff6:	f7fd fdaf 	bl	8001b58 <HAL_GetTick>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	2b02      	cmp	r3, #2
 8004002:	d902      	bls.n	800400a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	73fb      	strb	r3, [r7, #15]
          break;
 8004008:	e005      	b.n	8004016 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800400a:	4b0a      	ldr	r3, [pc, #40]	; (8004034 <RCCEx_PLLSAI1_Config+0x1e0>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d0ef      	beq.n	8003ff6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004016:	7bfb      	ldrb	r3, [r7, #15]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d106      	bne.n	800402a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800401c:	4b05      	ldr	r3, [pc, #20]	; (8004034 <RCCEx_PLLSAI1_Config+0x1e0>)
 800401e:	691a      	ldr	r2, [r3, #16]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	699b      	ldr	r3, [r3, #24]
 8004024:	4903      	ldr	r1, [pc, #12]	; (8004034 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004026:	4313      	orrs	r3, r2
 8004028:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800402a:	7bfb      	ldrb	r3, [r7, #15]
}
 800402c:	4618      	mov	r0, r3
 800402e:	3710      	adds	r7, #16
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}
 8004034:	40021000 	.word	0x40021000

08004038 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d101      	bne.n	800404a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e049      	b.n	80040de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004050:	b2db      	uxtb	r3, r3
 8004052:	2b00      	cmp	r3, #0
 8004054:	d106      	bne.n	8004064 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 f841 	bl	80040e6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2202      	movs	r2, #2
 8004068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	3304      	adds	r3, #4
 8004074:	4619      	mov	r1, r3
 8004076:	4610      	mov	r0, r2
 8004078:	f000 f9dc 	bl	8004434 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3708      	adds	r7, #8
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}

080040e6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80040e6:	b480      	push	{r7}
 80040e8:	b083      	sub	sp, #12
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80040ee:	bf00      	nop
 80040f0:	370c      	adds	r7, #12
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
	...

080040fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b085      	sub	sp, #20
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800410a:	b2db      	uxtb	r3, r3
 800410c:	2b01      	cmp	r3, #1
 800410e:	d001      	beq.n	8004114 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e03b      	b.n	800418c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2202      	movs	r2, #2
 8004118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68da      	ldr	r2, [r3, #12]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f042 0201 	orr.w	r2, r2, #1
 800412a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a19      	ldr	r2, [pc, #100]	; (8004198 <HAL_TIM_Base_Start_IT+0x9c>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d009      	beq.n	800414a <HAL_TIM_Base_Start_IT+0x4e>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800413e:	d004      	beq.n	800414a <HAL_TIM_Base_Start_IT+0x4e>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a15      	ldr	r2, [pc, #84]	; (800419c <HAL_TIM_Base_Start_IT+0xa0>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d115      	bne.n	8004176 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	689a      	ldr	r2, [r3, #8]
 8004150:	4b13      	ldr	r3, [pc, #76]	; (80041a0 <HAL_TIM_Base_Start_IT+0xa4>)
 8004152:	4013      	ands	r3, r2
 8004154:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2b06      	cmp	r3, #6
 800415a:	d015      	beq.n	8004188 <HAL_TIM_Base_Start_IT+0x8c>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004162:	d011      	beq.n	8004188 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f042 0201 	orr.w	r2, r2, #1
 8004172:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004174:	e008      	b.n	8004188 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f042 0201 	orr.w	r2, r2, #1
 8004184:	601a      	str	r2, [r3, #0]
 8004186:	e000      	b.n	800418a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004188:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800418a:	2300      	movs	r3, #0
}
 800418c:	4618      	mov	r0, r3
 800418e:	3714      	adds	r7, #20
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr
 8004198:	40012c00 	.word	0x40012c00
 800419c:	40014000 	.word	0x40014000
 80041a0:	00010007 	.word	0x00010007

080041a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	f003 0302 	and.w	r3, r3, #2
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d122      	bne.n	8004200 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	f003 0302 	and.w	r3, r3, #2
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	d11b      	bne.n	8004200 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f06f 0202 	mvn.w	r2, #2
 80041d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2201      	movs	r2, #1
 80041d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	f003 0303 	and.w	r3, r3, #3
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d003      	beq.n	80041ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 f905 	bl	80043f6 <HAL_TIM_IC_CaptureCallback>
 80041ec:	e005      	b.n	80041fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 f8f7 	bl	80043e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f000 f908 	bl	800440a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	f003 0304 	and.w	r3, r3, #4
 800420a:	2b04      	cmp	r3, #4
 800420c:	d122      	bne.n	8004254 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	f003 0304 	and.w	r3, r3, #4
 8004218:	2b04      	cmp	r3, #4
 800421a:	d11b      	bne.n	8004254 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f06f 0204 	mvn.w	r2, #4
 8004224:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2202      	movs	r2, #2
 800422a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	699b      	ldr	r3, [r3, #24]
 8004232:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004236:	2b00      	cmp	r3, #0
 8004238:	d003      	beq.n	8004242 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 f8db 	bl	80043f6 <HAL_TIM_IC_CaptureCallback>
 8004240:	e005      	b.n	800424e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 f8cd 	bl	80043e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f000 f8de 	bl	800440a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	f003 0308 	and.w	r3, r3, #8
 800425e:	2b08      	cmp	r3, #8
 8004260:	d122      	bne.n	80042a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	f003 0308 	and.w	r3, r3, #8
 800426c:	2b08      	cmp	r3, #8
 800426e:	d11b      	bne.n	80042a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f06f 0208 	mvn.w	r2, #8
 8004278:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2204      	movs	r2, #4
 800427e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	69db      	ldr	r3, [r3, #28]
 8004286:	f003 0303 	and.w	r3, r3, #3
 800428a:	2b00      	cmp	r3, #0
 800428c:	d003      	beq.n	8004296 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 f8b1 	bl	80043f6 <HAL_TIM_IC_CaptureCallback>
 8004294:	e005      	b.n	80042a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 f8a3 	bl	80043e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f000 f8b4 	bl	800440a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	f003 0310 	and.w	r3, r3, #16
 80042b2:	2b10      	cmp	r3, #16
 80042b4:	d122      	bne.n	80042fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	f003 0310 	and.w	r3, r3, #16
 80042c0:	2b10      	cmp	r3, #16
 80042c2:	d11b      	bne.n	80042fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f06f 0210 	mvn.w	r2, #16
 80042cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2208      	movs	r2, #8
 80042d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	69db      	ldr	r3, [r3, #28]
 80042da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d003      	beq.n	80042ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 f887 	bl	80043f6 <HAL_TIM_IC_CaptureCallback>
 80042e8:	e005      	b.n	80042f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 f879 	bl	80043e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f000 f88a 	bl	800440a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	2b01      	cmp	r3, #1
 8004308:	d10e      	bne.n	8004328 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	f003 0301 	and.w	r3, r3, #1
 8004314:	2b01      	cmp	r3, #1
 8004316:	d107      	bne.n	8004328 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f06f 0201 	mvn.w	r2, #1
 8004320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f7fd f94c 	bl	80015c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004332:	2b80      	cmp	r3, #128	; 0x80
 8004334:	d10e      	bne.n	8004354 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004340:	2b80      	cmp	r3, #128	; 0x80
 8004342:	d107      	bne.n	8004354 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800434c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 f8de 	bl	8004510 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800435e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004362:	d10e      	bne.n	8004382 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800436e:	2b80      	cmp	r3, #128	; 0x80
 8004370:	d107      	bne.n	8004382 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800437a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f000 f8d1 	bl	8004524 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	691b      	ldr	r3, [r3, #16]
 8004388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800438c:	2b40      	cmp	r3, #64	; 0x40
 800438e:	d10e      	bne.n	80043ae <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800439a:	2b40      	cmp	r3, #64	; 0x40
 800439c:	d107      	bne.n	80043ae <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80043a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f000 f838 	bl	800441e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	691b      	ldr	r3, [r3, #16]
 80043b4:	f003 0320 	and.w	r3, r3, #32
 80043b8:	2b20      	cmp	r3, #32
 80043ba:	d10e      	bne.n	80043da <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	f003 0320 	and.w	r3, r3, #32
 80043c6:	2b20      	cmp	r3, #32
 80043c8:	d107      	bne.n	80043da <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f06f 0220 	mvn.w	r2, #32
 80043d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f000 f891 	bl	80044fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043da:	bf00      	nop
 80043dc:	3708      	adds	r7, #8
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}

080043e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043e2:	b480      	push	{r7}
 80043e4:	b083      	sub	sp, #12
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043ea:	bf00      	nop
 80043ec:	370c      	adds	r7, #12
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr

080043f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043f6:	b480      	push	{r7}
 80043f8:	b083      	sub	sp, #12
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043fe:	bf00      	nop
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr

0800440a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800440a:	b480      	push	{r7}
 800440c:	b083      	sub	sp, #12
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004412:	bf00      	nop
 8004414:	370c      	adds	r7, #12
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr

0800441e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800441e:	b480      	push	{r7}
 8004420:	b083      	sub	sp, #12
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004426:	bf00      	nop
 8004428:	370c      	adds	r7, #12
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
	...

08004434 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004434:	b480      	push	{r7}
 8004436:	b085      	sub	sp, #20
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a2a      	ldr	r2, [pc, #168]	; (80044f0 <TIM_Base_SetConfig+0xbc>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d003      	beq.n	8004454 <TIM_Base_SetConfig+0x20>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004452:	d108      	bne.n	8004466 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800445a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	4313      	orrs	r3, r2
 8004464:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a21      	ldr	r2, [pc, #132]	; (80044f0 <TIM_Base_SetConfig+0xbc>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d00b      	beq.n	8004486 <TIM_Base_SetConfig+0x52>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004474:	d007      	beq.n	8004486 <TIM_Base_SetConfig+0x52>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a1e      	ldr	r2, [pc, #120]	; (80044f4 <TIM_Base_SetConfig+0xc0>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d003      	beq.n	8004486 <TIM_Base_SetConfig+0x52>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a1d      	ldr	r2, [pc, #116]	; (80044f8 <TIM_Base_SetConfig+0xc4>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d108      	bne.n	8004498 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800448c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	4313      	orrs	r3, r2
 8004496:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	68fa      	ldr	r2, [r7, #12]
 80044aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	689a      	ldr	r2, [r3, #8]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a0c      	ldr	r2, [pc, #48]	; (80044f0 <TIM_Base_SetConfig+0xbc>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d007      	beq.n	80044d4 <TIM_Base_SetConfig+0xa0>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	4a0b      	ldr	r2, [pc, #44]	; (80044f4 <TIM_Base_SetConfig+0xc0>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d003      	beq.n	80044d4 <TIM_Base_SetConfig+0xa0>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4a0a      	ldr	r2, [pc, #40]	; (80044f8 <TIM_Base_SetConfig+0xc4>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d103      	bne.n	80044dc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	691a      	ldr	r2, [r3, #16]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	615a      	str	r2, [r3, #20]
}
 80044e2:	bf00      	nop
 80044e4:	3714      	adds	r7, #20
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr
 80044ee:	bf00      	nop
 80044f0:	40012c00 	.word	0x40012c00
 80044f4:	40014000 	.word	0x40014000
 80044f8:	40014400 	.word	0x40014400

080044fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004504:	bf00      	nop
 8004506:	370c      	adds	r7, #12
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr

08004510 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004518:	bf00      	nop
 800451a:	370c      	adds	r7, #12
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800452c:	bf00      	nop
 800452e:	370c      	adds	r7, #12
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr

08004538 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d101      	bne.n	800454a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e040      	b.n	80045cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800454e:	2b00      	cmp	r3, #0
 8004550:	d106      	bne.n	8004560 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f7fd f8c8 	bl	80016f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2224      	movs	r2, #36	; 0x24
 8004564:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f022 0201 	bic.w	r2, r2, #1
 8004574:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 fd16 	bl	8004fa8 <UART_SetConfig>
 800457c:	4603      	mov	r3, r0
 800457e:	2b01      	cmp	r3, #1
 8004580:	d101      	bne.n	8004586 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e022      	b.n	80045cc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458a:	2b00      	cmp	r3, #0
 800458c:	d002      	beq.n	8004594 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 ff14 	bl	80053bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	685a      	ldr	r2, [r3, #4]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	689a      	ldr	r2, [r3, #8]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f042 0201 	orr.w	r2, r2, #1
 80045c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f000 ff9b 	bl	8005500 <UART_CheckIdleState>
 80045ca:	4603      	mov	r3, r0
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3708      	adds	r7, #8
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b08a      	sub	sp, #40	; 0x28
 80045d8:	af02      	add	r7, sp, #8
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	603b      	str	r3, [r7, #0]
 80045e0:	4613      	mov	r3, r2
 80045e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045e8:	2b20      	cmp	r3, #32
 80045ea:	f040 8082 	bne.w	80046f2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d002      	beq.n	80045fa <HAL_UART_Transmit+0x26>
 80045f4:	88fb      	ldrh	r3, [r7, #6]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d101      	bne.n	80045fe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e07a      	b.n	80046f4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004604:	2b01      	cmp	r3, #1
 8004606:	d101      	bne.n	800460c <HAL_UART_Transmit+0x38>
 8004608:	2302      	movs	r3, #2
 800460a:	e073      	b.n	80046f4 <HAL_UART_Transmit+0x120>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2200      	movs	r2, #0
 8004618:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2221      	movs	r2, #33	; 0x21
 8004620:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004622:	f7fd fa99 	bl	8001b58 <HAL_GetTick>
 8004626:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	88fa      	ldrh	r2, [r7, #6]
 800462c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	88fa      	ldrh	r2, [r7, #6]
 8004634:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004640:	d108      	bne.n	8004654 <HAL_UART_Transmit+0x80>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d104      	bne.n	8004654 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800464a:	2300      	movs	r3, #0
 800464c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	61bb      	str	r3, [r7, #24]
 8004652:	e003      	b.n	800465c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004658:	2300      	movs	r3, #0
 800465a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004664:	e02d      	b.n	80046c2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	9300      	str	r3, [sp, #0]
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	2200      	movs	r2, #0
 800466e:	2180      	movs	r1, #128	; 0x80
 8004670:	68f8      	ldr	r0, [r7, #12]
 8004672:	f000 ff8e 	bl	8005592 <UART_WaitOnFlagUntilTimeout>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d001      	beq.n	8004680 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e039      	b.n	80046f4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d10b      	bne.n	800469e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	881a      	ldrh	r2, [r3, #0]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004692:	b292      	uxth	r2, r2
 8004694:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	3302      	adds	r3, #2
 800469a:	61bb      	str	r3, [r7, #24]
 800469c:	e008      	b.n	80046b0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	781a      	ldrb	r2, [r3, #0]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	b292      	uxth	r2, r2
 80046a8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	3301      	adds	r3, #1
 80046ae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	3b01      	subs	r3, #1
 80046ba:	b29a      	uxth	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d1cb      	bne.n	8004666 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	9300      	str	r3, [sp, #0]
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	2200      	movs	r2, #0
 80046d6:	2140      	movs	r1, #64	; 0x40
 80046d8:	68f8      	ldr	r0, [r7, #12]
 80046da:	f000 ff5a 	bl	8005592 <UART_WaitOnFlagUntilTimeout>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d001      	beq.n	80046e8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e005      	b.n	80046f4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2220      	movs	r2, #32
 80046ec:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80046ee:	2300      	movs	r3, #0
 80046f0:	e000      	b.n	80046f4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80046f2:	2302      	movs	r3, #2
  }
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3720      	adds	r7, #32
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b08a      	sub	sp, #40	; 0x28
 8004700:	af02      	add	r7, sp, #8
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	603b      	str	r3, [r7, #0]
 8004708:	4613      	mov	r3, r2
 800470a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004710:	2b20      	cmp	r3, #32
 8004712:	f040 80bf 	bne.w	8004894 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d002      	beq.n	8004722 <HAL_UART_Receive+0x26>
 800471c:	88fb      	ldrh	r3, [r7, #6]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d101      	bne.n	8004726 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e0b7      	b.n	8004896 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800472c:	2b01      	cmp	r3, #1
 800472e:	d101      	bne.n	8004734 <HAL_UART_Receive+0x38>
 8004730:	2302      	movs	r3, #2
 8004732:	e0b0      	b.n	8004896 <HAL_UART_Receive+0x19a>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2200      	movs	r2, #0
 8004740:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2222      	movs	r2, #34	; 0x22
 8004748:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004750:	f7fd fa02 	bl	8001b58 <HAL_GetTick>
 8004754:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	88fa      	ldrh	r2, [r7, #6]
 800475a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	88fa      	ldrh	r2, [r7, #6]
 8004762:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800476e:	d10e      	bne.n	800478e <HAL_UART_Receive+0x92>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	691b      	ldr	r3, [r3, #16]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d105      	bne.n	8004784 <HAL_UART_Receive+0x88>
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800477e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004782:	e02d      	b.n	80047e0 <HAL_UART_Receive+0xe4>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	22ff      	movs	r2, #255	; 0xff
 8004788:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800478c:	e028      	b.n	80047e0 <HAL_UART_Receive+0xe4>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d10d      	bne.n	80047b2 <HAL_UART_Receive+0xb6>
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d104      	bne.n	80047a8 <HAL_UART_Receive+0xac>
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	22ff      	movs	r2, #255	; 0xff
 80047a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80047a6:	e01b      	b.n	80047e0 <HAL_UART_Receive+0xe4>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	227f      	movs	r2, #127	; 0x7f
 80047ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80047b0:	e016      	b.n	80047e0 <HAL_UART_Receive+0xe4>
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047ba:	d10d      	bne.n	80047d8 <HAL_UART_Receive+0xdc>
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d104      	bne.n	80047ce <HAL_UART_Receive+0xd2>
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	227f      	movs	r2, #127	; 0x7f
 80047c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80047cc:	e008      	b.n	80047e0 <HAL_UART_Receive+0xe4>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	223f      	movs	r2, #63	; 0x3f
 80047d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80047d6:	e003      	b.n	80047e0 <HAL_UART_Receive+0xe4>
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2200      	movs	r2, #0
 80047dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80047e6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047f0:	d108      	bne.n	8004804 <HAL_UART_Receive+0x108>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d104      	bne.n	8004804 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80047fa:	2300      	movs	r3, #0
 80047fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	61bb      	str	r3, [r7, #24]
 8004802:	e003      	b.n	800480c <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004808:	2300      	movs	r3, #0
 800480a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2200      	movs	r2, #0
 8004810:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004814:	e033      	b.n	800487e <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	9300      	str	r3, [sp, #0]
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	2200      	movs	r2, #0
 800481e:	2120      	movs	r1, #32
 8004820:	68f8      	ldr	r0, [r7, #12]
 8004822:	f000 feb6 	bl	8005592 <UART_WaitOnFlagUntilTimeout>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d001      	beq.n	8004830 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	e032      	b.n	8004896 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d10c      	bne.n	8004850 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800483c:	b29a      	uxth	r2, r3
 800483e:	8a7b      	ldrh	r3, [r7, #18]
 8004840:	4013      	ands	r3, r2
 8004842:	b29a      	uxth	r2, r3
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	3302      	adds	r3, #2
 800484c:	61bb      	str	r3, [r7, #24]
 800484e:	e00d      	b.n	800486c <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004856:	b29b      	uxth	r3, r3
 8004858:	b2da      	uxtb	r2, r3
 800485a:	8a7b      	ldrh	r3, [r7, #18]
 800485c:	b2db      	uxtb	r3, r3
 800485e:	4013      	ands	r3, r2
 8004860:	b2da      	uxtb	r2, r3
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	3301      	adds	r3, #1
 800486a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004872:	b29b      	uxth	r3, r3
 8004874:	3b01      	subs	r3, #1
 8004876:	b29a      	uxth	r2, r3
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004884:	b29b      	uxth	r3, r3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d1c5      	bne.n	8004816 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2220      	movs	r2, #32
 800488e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004890:	2300      	movs	r3, #0
 8004892:	e000      	b.n	8004896 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8004894:	2302      	movs	r3, #2
  }
}
 8004896:	4618      	mov	r0, r3
 8004898:	3720      	adds	r7, #32
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
	...

080048a0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b08b      	sub	sp, #44	; 0x2c
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	60b9      	str	r1, [r7, #8]
 80048aa:	4613      	mov	r3, r2
 80048ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048b2:	2b20      	cmp	r3, #32
 80048b4:	d156      	bne.n	8004964 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d002      	beq.n	80048c2 <HAL_UART_Transmit_IT+0x22>
 80048bc:	88fb      	ldrh	r3, [r7, #6]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d101      	bne.n	80048c6 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e04f      	b.n	8004966 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d101      	bne.n	80048d4 <HAL_UART_Transmit_IT+0x34>
 80048d0:	2302      	movs	r3, #2
 80048d2:	e048      	b.n	8004966 <HAL_UART_Transmit_IT+0xc6>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	68ba      	ldr	r2, [r7, #8]
 80048e0:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	88fa      	ldrh	r2, [r7, #6]
 80048e6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	88fa      	ldrh	r2, [r7, #6]
 80048ee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2200      	movs	r2, #0
 80048f6:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2221      	movs	r2, #33	; 0x21
 8004904:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800490e:	d107      	bne.n	8004920 <HAL_UART_Transmit_IT+0x80>
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	691b      	ldr	r3, [r3, #16]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d103      	bne.n	8004920 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	4a16      	ldr	r2, [pc, #88]	; (8004974 <HAL_UART_Transmit_IT+0xd4>)
 800491c:	669a      	str	r2, [r3, #104]	; 0x68
 800491e:	e002      	b.n	8004926 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	4a15      	ldr	r2, [pc, #84]	; (8004978 <HAL_UART_Transmit_IT+0xd8>)
 8004924:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2200      	movs	r2, #0
 800492a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	e853 3f00 	ldrex	r3, [r3]
 800493a:	613b      	str	r3, [r7, #16]
   return(result);
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004942:	627b      	str	r3, [r7, #36]	; 0x24
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	461a      	mov	r2, r3
 800494a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494c:	623b      	str	r3, [r7, #32]
 800494e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004950:	69f9      	ldr	r1, [r7, #28]
 8004952:	6a3a      	ldr	r2, [r7, #32]
 8004954:	e841 2300 	strex	r3, r2, [r1]
 8004958:	61bb      	str	r3, [r7, #24]
   return(result);
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1e6      	bne.n	800492e <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8004960:	2300      	movs	r3, #0
 8004962:	e000      	b.n	8004966 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8004964:	2302      	movs	r3, #2
  }
}
 8004966:	4618      	mov	r0, r3
 8004968:	372c      	adds	r7, #44	; 0x2c
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop
 8004974:	080058c5 	.word	0x080058c5
 8004978:	0800580d 	.word	0x0800580d

0800497c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b0ba      	sub	sp, #232	; 0xe8
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	69db      	ldr	r3, [r3, #28]
 800498a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80049a2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80049a6:	f640 030f 	movw	r3, #2063	; 0x80f
 80049aa:	4013      	ands	r3, r2
 80049ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80049b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d115      	bne.n	80049e4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80049b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049bc:	f003 0320 	and.w	r3, r3, #32
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d00f      	beq.n	80049e4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80049c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049c8:	f003 0320 	and.w	r3, r3, #32
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d009      	beq.n	80049e4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	f000 82a6 	beq.w	8004f26 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	4798      	blx	r3
      }
      return;
 80049e2:	e2a0      	b.n	8004f26 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80049e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	f000 8117 	beq.w	8004c1c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80049ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049f2:	f003 0301 	and.w	r3, r3, #1
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d106      	bne.n	8004a08 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80049fa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80049fe:	4b85      	ldr	r3, [pc, #532]	; (8004c14 <HAL_UART_IRQHandler+0x298>)
 8004a00:	4013      	ands	r3, r2
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	f000 810a 	beq.w	8004c1c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004a08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a0c:	f003 0301 	and.w	r3, r3, #1
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d011      	beq.n	8004a38 <HAL_UART_IRQHandler+0xbc>
 8004a14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d00b      	beq.n	8004a38 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2201      	movs	r2, #1
 8004a26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a2e:	f043 0201 	orr.w	r2, r3, #1
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a3c:	f003 0302 	and.w	r3, r3, #2
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d011      	beq.n	8004a68 <HAL_UART_IRQHandler+0xec>
 8004a44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a48:	f003 0301 	and.w	r3, r3, #1
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d00b      	beq.n	8004a68 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2202      	movs	r2, #2
 8004a56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a5e:	f043 0204 	orr.w	r2, r3, #4
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a6c:	f003 0304 	and.w	r3, r3, #4
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d011      	beq.n	8004a98 <HAL_UART_IRQHandler+0x11c>
 8004a74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a78:	f003 0301 	and.w	r3, r3, #1
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d00b      	beq.n	8004a98 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2204      	movs	r2, #4
 8004a86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a8e:	f043 0202 	orr.w	r2, r3, #2
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004a98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a9c:	f003 0308 	and.w	r3, r3, #8
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d017      	beq.n	8004ad4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004aa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004aa8:	f003 0320 	and.w	r3, r3, #32
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d105      	bne.n	8004abc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004ab0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ab4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d00b      	beq.n	8004ad4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2208      	movs	r2, #8
 8004ac2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004aca:	f043 0208 	orr.w	r2, r3, #8
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004ad4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ad8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d012      	beq.n	8004b06 <HAL_UART_IRQHandler+0x18a>
 8004ae0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ae4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d00c      	beq.n	8004b06 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004af4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004afc:	f043 0220 	orr.w	r2, r3, #32
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	f000 820c 	beq.w	8004f2a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004b12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b16:	f003 0320 	and.w	r3, r3, #32
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00d      	beq.n	8004b3a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004b1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b22:	f003 0320 	and.w	r3, r3, #32
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d007      	beq.n	8004b3a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d003      	beq.n	8004b3a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b40:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b4e:	2b40      	cmp	r3, #64	; 0x40
 8004b50:	d005      	beq.n	8004b5e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004b52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b56:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d04f      	beq.n	8004bfe <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 fddb 	bl	800571a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b6e:	2b40      	cmp	r3, #64	; 0x40
 8004b70:	d141      	bne.n	8004bf6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	3308      	adds	r3, #8
 8004b78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b80:	e853 3f00 	ldrex	r3, [r3]
 8004b84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004b88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	3308      	adds	r3, #8
 8004b9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004b9e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004ba2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004baa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004bae:	e841 2300 	strex	r3, r2, [r1]
 8004bb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004bb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d1d9      	bne.n	8004b72 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d013      	beq.n	8004bee <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bca:	4a13      	ldr	r2, [pc, #76]	; (8004c18 <HAL_UART_IRQHandler+0x29c>)
 8004bcc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f7fd f910 	bl	8001df8 <HAL_DMA_Abort_IT>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d017      	beq.n	8004c0e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004be8:	4610      	mov	r0, r2
 8004bea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bec:	e00f      	b.n	8004c0e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 f9b0 	bl	8004f54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bf4:	e00b      	b.n	8004c0e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 f9ac 	bl	8004f54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bfc:	e007      	b.n	8004c0e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 f9a8 	bl	8004f54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004c0c:	e18d      	b.n	8004f2a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c0e:	bf00      	nop
    return;
 8004c10:	e18b      	b.n	8004f2a <HAL_UART_IRQHandler+0x5ae>
 8004c12:	bf00      	nop
 8004c14:	04000120 	.word	0x04000120
 8004c18:	080057e1 	.word	0x080057e1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	f040 8146 	bne.w	8004eb2 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c2a:	f003 0310 	and.w	r3, r3, #16
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	f000 813f 	beq.w	8004eb2 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004c34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c38:	f003 0310 	and.w	r3, r3, #16
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	f000 8138 	beq.w	8004eb2 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2210      	movs	r2, #16
 8004c48:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c54:	2b40      	cmp	r3, #64	; 0x40
 8004c56:	f040 80b4 	bne.w	8004dc2 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004c66:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	f000 815f 	beq.w	8004f2e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004c76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	f080 8157 	bcs.w	8004f2e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c86:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 0320 	and.w	r3, r3, #32
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	f040 8085 	bne.w	8004da6 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ca8:	e853 3f00 	ldrex	r3, [r3]
 8004cac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004cb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004cb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cb8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004cc6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004cca:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004cd2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004cd6:	e841 2300 	strex	r3, r2, [r1]
 8004cda:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004cde:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d1da      	bne.n	8004c9c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	3308      	adds	r3, #8
 8004cec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cf0:	e853 3f00 	ldrex	r3, [r3]
 8004cf4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004cf6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004cf8:	f023 0301 	bic.w	r3, r3, #1
 8004cfc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	3308      	adds	r3, #8
 8004d06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004d0a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004d0e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d10:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004d12:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004d16:	e841 2300 	strex	r3, r2, [r1]
 8004d1a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004d1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d1e1      	bne.n	8004ce6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	3308      	adds	r3, #8
 8004d28:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d2c:	e853 3f00 	ldrex	r3, [r3]
 8004d30:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004d32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	3308      	adds	r3, #8
 8004d42:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004d46:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004d48:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d4a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004d4c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004d4e:	e841 2300 	strex	r3, r2, [r1]
 8004d52:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004d54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d1e3      	bne.n	8004d22 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2220      	movs	r2, #32
 8004d5e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d6e:	e853 3f00 	ldrex	r3, [r3]
 8004d72:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004d74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d76:	f023 0310 	bic.w	r3, r3, #16
 8004d7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	461a      	mov	r2, r3
 8004d84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004d88:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d8a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004d8e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d90:	e841 2300 	strex	r3, r2, [r1]
 8004d94:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004d96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d1e4      	bne.n	8004d66 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da0:	4618      	mov	r0, r3
 8004da2:	f7fc ffeb 	bl	8001d7c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	4619      	mov	r1, r3
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f000 f8d4 	bl	8004f68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004dc0:	e0b5      	b.n	8004f2e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	f000 80a7 	beq.w	8004f32 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8004de4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f000 80a2 	beq.w	8004f32 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df6:	e853 3f00 	ldrex	r3, [r3]
 8004dfa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dfe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e02:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004e10:	647b      	str	r3, [r7, #68]	; 0x44
 8004e12:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e14:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e18:	e841 2300 	strex	r3, r2, [r1]
 8004e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d1e4      	bne.n	8004dee <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	3308      	adds	r3, #8
 8004e2a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2e:	e853 3f00 	ldrex	r3, [r3]
 8004e32:	623b      	str	r3, [r7, #32]
   return(result);
 8004e34:	6a3b      	ldr	r3, [r7, #32]
 8004e36:	f023 0301 	bic.w	r3, r3, #1
 8004e3a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	3308      	adds	r3, #8
 8004e44:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004e48:	633a      	str	r2, [r7, #48]	; 0x30
 8004e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e4c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e50:	e841 2300 	strex	r3, r2, [r1]
 8004e54:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d1e3      	bne.n	8004e24 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2220      	movs	r2, #32
 8004e60:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	e853 3f00 	ldrex	r3, [r3]
 8004e7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f023 0310 	bic.w	r3, r3, #16
 8004e82:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004e90:	61fb      	str	r3, [r7, #28]
 8004e92:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e94:	69b9      	ldr	r1, [r7, #24]
 8004e96:	69fa      	ldr	r2, [r7, #28]
 8004e98:	e841 2300 	strex	r3, r2, [r1]
 8004e9c:	617b      	str	r3, [r7, #20]
   return(result);
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d1e4      	bne.n	8004e6e <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ea4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 f85c 	bl	8004f68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004eb0:	e03f      	b.n	8004f32 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004eb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004eb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d00e      	beq.n	8004edc <HAL_UART_IRQHandler+0x560>
 8004ebe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ec2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d008      	beq.n	8004edc <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004ed2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f000 fd7f 	bl	80059d8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004eda:	e02d      	b.n	8004f38 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004edc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d00e      	beq.n	8004f06 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004ee8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d008      	beq.n	8004f06 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d01c      	beq.n	8004f36 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	4798      	blx	r3
    }
    return;
 8004f04:	e017      	b.n	8004f36 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004f06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d012      	beq.n	8004f38 <HAL_UART_IRQHandler+0x5bc>
 8004f12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00c      	beq.n	8004f38 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 fd30 	bl	8005984 <UART_EndTransmit_IT>
    return;
 8004f24:	e008      	b.n	8004f38 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004f26:	bf00      	nop
 8004f28:	e006      	b.n	8004f38 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004f2a:	bf00      	nop
 8004f2c:	e004      	b.n	8004f38 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004f2e:	bf00      	nop
 8004f30:	e002      	b.n	8004f38 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004f32:	bf00      	nop
 8004f34:	e000      	b.n	8004f38 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004f36:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004f38:	37e8      	adds	r7, #232	; 0xe8
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop

08004f40 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004f5c:	bf00      	nop
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	460b      	mov	r3, r1
 8004f72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f74:	bf00      	nop
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b085      	sub	sp, #20
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f8c:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f92:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	4313      	orrs	r3, r2
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3714      	adds	r7, #20
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr
	...

08004fa8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fa8:	b5b0      	push	{r4, r5, r7, lr}
 8004faa:	b088      	sub	sp, #32
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	689a      	ldr	r2, [r3, #8]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	431a      	orrs	r2, r3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	695b      	ldr	r3, [r3, #20]
 8004fc2:	431a      	orrs	r2, r3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	69db      	ldr	r3, [r3, #28]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	4baf      	ldr	r3, [pc, #700]	; (8005290 <UART_SetConfig+0x2e8>)
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	6812      	ldr	r2, [r2, #0]
 8004fda:	69f9      	ldr	r1, [r7, #28]
 8004fdc:	430b      	orrs	r3, r1
 8004fde:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	68da      	ldr	r2, [r3, #12]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	430a      	orrs	r2, r1
 8004ff4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	699b      	ldr	r3, [r3, #24]
 8004ffa:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4aa4      	ldr	r2, [pc, #656]	; (8005294 <UART_SetConfig+0x2ec>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d004      	beq.n	8005010 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a1b      	ldr	r3, [r3, #32]
 800500a:	69fa      	ldr	r2, [r7, #28]
 800500c:	4313      	orrs	r3, r2
 800500e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	69fa      	ldr	r2, [r7, #28]
 8005020:	430a      	orrs	r2, r1
 8005022:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a9b      	ldr	r2, [pc, #620]	; (8005298 <UART_SetConfig+0x2f0>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d121      	bne.n	8005072 <UART_SetConfig+0xca>
 800502e:	4b9b      	ldr	r3, [pc, #620]	; (800529c <UART_SetConfig+0x2f4>)
 8005030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005034:	f003 0303 	and.w	r3, r3, #3
 8005038:	2b03      	cmp	r3, #3
 800503a:	d817      	bhi.n	800506c <UART_SetConfig+0xc4>
 800503c:	a201      	add	r2, pc, #4	; (adr r2, 8005044 <UART_SetConfig+0x9c>)
 800503e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005042:	bf00      	nop
 8005044:	08005055 	.word	0x08005055
 8005048:	08005061 	.word	0x08005061
 800504c:	0800505b 	.word	0x0800505b
 8005050:	08005067 	.word	0x08005067
 8005054:	2301      	movs	r3, #1
 8005056:	76fb      	strb	r3, [r7, #27]
 8005058:	e070      	b.n	800513c <UART_SetConfig+0x194>
 800505a:	2302      	movs	r3, #2
 800505c:	76fb      	strb	r3, [r7, #27]
 800505e:	e06d      	b.n	800513c <UART_SetConfig+0x194>
 8005060:	2304      	movs	r3, #4
 8005062:	76fb      	strb	r3, [r7, #27]
 8005064:	e06a      	b.n	800513c <UART_SetConfig+0x194>
 8005066:	2308      	movs	r3, #8
 8005068:	76fb      	strb	r3, [r7, #27]
 800506a:	e067      	b.n	800513c <UART_SetConfig+0x194>
 800506c:	2310      	movs	r3, #16
 800506e:	76fb      	strb	r3, [r7, #27]
 8005070:	e064      	b.n	800513c <UART_SetConfig+0x194>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a8a      	ldr	r2, [pc, #552]	; (80052a0 <UART_SetConfig+0x2f8>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d132      	bne.n	80050e2 <UART_SetConfig+0x13a>
 800507c:	4b87      	ldr	r3, [pc, #540]	; (800529c <UART_SetConfig+0x2f4>)
 800507e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005082:	f003 030c 	and.w	r3, r3, #12
 8005086:	2b0c      	cmp	r3, #12
 8005088:	d828      	bhi.n	80050dc <UART_SetConfig+0x134>
 800508a:	a201      	add	r2, pc, #4	; (adr r2, 8005090 <UART_SetConfig+0xe8>)
 800508c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005090:	080050c5 	.word	0x080050c5
 8005094:	080050dd 	.word	0x080050dd
 8005098:	080050dd 	.word	0x080050dd
 800509c:	080050dd 	.word	0x080050dd
 80050a0:	080050d1 	.word	0x080050d1
 80050a4:	080050dd 	.word	0x080050dd
 80050a8:	080050dd 	.word	0x080050dd
 80050ac:	080050dd 	.word	0x080050dd
 80050b0:	080050cb 	.word	0x080050cb
 80050b4:	080050dd 	.word	0x080050dd
 80050b8:	080050dd 	.word	0x080050dd
 80050bc:	080050dd 	.word	0x080050dd
 80050c0:	080050d7 	.word	0x080050d7
 80050c4:	2300      	movs	r3, #0
 80050c6:	76fb      	strb	r3, [r7, #27]
 80050c8:	e038      	b.n	800513c <UART_SetConfig+0x194>
 80050ca:	2302      	movs	r3, #2
 80050cc:	76fb      	strb	r3, [r7, #27]
 80050ce:	e035      	b.n	800513c <UART_SetConfig+0x194>
 80050d0:	2304      	movs	r3, #4
 80050d2:	76fb      	strb	r3, [r7, #27]
 80050d4:	e032      	b.n	800513c <UART_SetConfig+0x194>
 80050d6:	2308      	movs	r3, #8
 80050d8:	76fb      	strb	r3, [r7, #27]
 80050da:	e02f      	b.n	800513c <UART_SetConfig+0x194>
 80050dc:	2310      	movs	r3, #16
 80050de:	76fb      	strb	r3, [r7, #27]
 80050e0:	e02c      	b.n	800513c <UART_SetConfig+0x194>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a6b      	ldr	r2, [pc, #428]	; (8005294 <UART_SetConfig+0x2ec>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d125      	bne.n	8005138 <UART_SetConfig+0x190>
 80050ec:	4b6b      	ldr	r3, [pc, #428]	; (800529c <UART_SetConfig+0x2f4>)
 80050ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050f2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80050f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80050fa:	d017      	beq.n	800512c <UART_SetConfig+0x184>
 80050fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005100:	d817      	bhi.n	8005132 <UART_SetConfig+0x18a>
 8005102:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005106:	d00b      	beq.n	8005120 <UART_SetConfig+0x178>
 8005108:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800510c:	d811      	bhi.n	8005132 <UART_SetConfig+0x18a>
 800510e:	2b00      	cmp	r3, #0
 8005110:	d003      	beq.n	800511a <UART_SetConfig+0x172>
 8005112:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005116:	d006      	beq.n	8005126 <UART_SetConfig+0x17e>
 8005118:	e00b      	b.n	8005132 <UART_SetConfig+0x18a>
 800511a:	2300      	movs	r3, #0
 800511c:	76fb      	strb	r3, [r7, #27]
 800511e:	e00d      	b.n	800513c <UART_SetConfig+0x194>
 8005120:	2302      	movs	r3, #2
 8005122:	76fb      	strb	r3, [r7, #27]
 8005124:	e00a      	b.n	800513c <UART_SetConfig+0x194>
 8005126:	2304      	movs	r3, #4
 8005128:	76fb      	strb	r3, [r7, #27]
 800512a:	e007      	b.n	800513c <UART_SetConfig+0x194>
 800512c:	2308      	movs	r3, #8
 800512e:	76fb      	strb	r3, [r7, #27]
 8005130:	e004      	b.n	800513c <UART_SetConfig+0x194>
 8005132:	2310      	movs	r3, #16
 8005134:	76fb      	strb	r3, [r7, #27]
 8005136:	e001      	b.n	800513c <UART_SetConfig+0x194>
 8005138:	2310      	movs	r3, #16
 800513a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a54      	ldr	r2, [pc, #336]	; (8005294 <UART_SetConfig+0x2ec>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d173      	bne.n	800522e <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005146:	7efb      	ldrb	r3, [r7, #27]
 8005148:	2b08      	cmp	r3, #8
 800514a:	d824      	bhi.n	8005196 <UART_SetConfig+0x1ee>
 800514c:	a201      	add	r2, pc, #4	; (adr r2, 8005154 <UART_SetConfig+0x1ac>)
 800514e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005152:	bf00      	nop
 8005154:	08005179 	.word	0x08005179
 8005158:	08005197 	.word	0x08005197
 800515c:	08005181 	.word	0x08005181
 8005160:	08005197 	.word	0x08005197
 8005164:	08005187 	.word	0x08005187
 8005168:	08005197 	.word	0x08005197
 800516c:	08005197 	.word	0x08005197
 8005170:	08005197 	.word	0x08005197
 8005174:	0800518f 	.word	0x0800518f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005178:	f7fe fbaa 	bl	80038d0 <HAL_RCC_GetPCLK1Freq>
 800517c:	6178      	str	r0, [r7, #20]
        break;
 800517e:	e00f      	b.n	80051a0 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005180:	4b48      	ldr	r3, [pc, #288]	; (80052a4 <UART_SetConfig+0x2fc>)
 8005182:	617b      	str	r3, [r7, #20]
        break;
 8005184:	e00c      	b.n	80051a0 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005186:	f7fe fb0b 	bl	80037a0 <HAL_RCC_GetSysClockFreq>
 800518a:	6178      	str	r0, [r7, #20]
        break;
 800518c:	e008      	b.n	80051a0 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800518e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005192:	617b      	str	r3, [r7, #20]
        break;
 8005194:	e004      	b.n	80051a0 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 8005196:	2300      	movs	r3, #0
 8005198:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	76bb      	strb	r3, [r7, #26]
        break;
 800519e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	f000 80fc 	beq.w	80053a0 <UART_SetConfig+0x3f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	685a      	ldr	r2, [r3, #4]
 80051ac:	4613      	mov	r3, r2
 80051ae:	005b      	lsls	r3, r3, #1
 80051b0:	4413      	add	r3, r2
 80051b2:	697a      	ldr	r2, [r7, #20]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d305      	bcc.n	80051c4 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80051be:	697a      	ldr	r2, [r7, #20]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d902      	bls.n	80051ca <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	76bb      	strb	r3, [r7, #26]
 80051c8:	e0ea      	b.n	80053a0 <UART_SetConfig+0x3f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	4618      	mov	r0, r3
 80051ce:	f04f 0100 	mov.w	r1, #0
 80051d2:	f04f 0200 	mov.w	r2, #0
 80051d6:	f04f 0300 	mov.w	r3, #0
 80051da:	020b      	lsls	r3, r1, #8
 80051dc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80051e0:	0202      	lsls	r2, r0, #8
 80051e2:	6879      	ldr	r1, [r7, #4]
 80051e4:	6849      	ldr	r1, [r1, #4]
 80051e6:	0849      	lsrs	r1, r1, #1
 80051e8:	4608      	mov	r0, r1
 80051ea:	f04f 0100 	mov.w	r1, #0
 80051ee:	1814      	adds	r4, r2, r0
 80051f0:	eb43 0501 	adc.w	r5, r3, r1
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	461a      	mov	r2, r3
 80051fa:	f04f 0300 	mov.w	r3, #0
 80051fe:	4620      	mov	r0, r4
 8005200:	4629      	mov	r1, r5
 8005202:	f7fb fb83 	bl	800090c <__aeabi_uldivmod>
 8005206:	4602      	mov	r2, r0
 8005208:	460b      	mov	r3, r1
 800520a:	4613      	mov	r3, r2
 800520c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005214:	d308      	bcc.n	8005228 <UART_SetConfig+0x280>
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800521c:	d204      	bcs.n	8005228 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	693a      	ldr	r2, [r7, #16]
 8005224:	60da      	str	r2, [r3, #12]
 8005226:	e0bb      	b.n	80053a0 <UART_SetConfig+0x3f8>
        }
        else
        {
          ret = HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	76bb      	strb	r3, [r7, #26]
 800522c:	e0b8      	b.n	80053a0 <UART_SetConfig+0x3f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	69db      	ldr	r3, [r3, #28]
 8005232:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005236:	d167      	bne.n	8005308 <UART_SetConfig+0x360>
  {
    switch (clocksource)
 8005238:	7efb      	ldrb	r3, [r7, #27]
 800523a:	2b08      	cmp	r3, #8
 800523c:	d834      	bhi.n	80052a8 <UART_SetConfig+0x300>
 800523e:	a201      	add	r2, pc, #4	; (adr r2, 8005244 <UART_SetConfig+0x29c>)
 8005240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005244:	08005269 	.word	0x08005269
 8005248:	08005271 	.word	0x08005271
 800524c:	08005279 	.word	0x08005279
 8005250:	080052a9 	.word	0x080052a9
 8005254:	0800527f 	.word	0x0800527f
 8005258:	080052a9 	.word	0x080052a9
 800525c:	080052a9 	.word	0x080052a9
 8005260:	080052a9 	.word	0x080052a9
 8005264:	08005287 	.word	0x08005287
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005268:	f7fe fb32 	bl	80038d0 <HAL_RCC_GetPCLK1Freq>
 800526c:	6178      	str	r0, [r7, #20]
        break;
 800526e:	e020      	b.n	80052b2 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005270:	f7fe fb44 	bl	80038fc <HAL_RCC_GetPCLK2Freq>
 8005274:	6178      	str	r0, [r7, #20]
        break;
 8005276:	e01c      	b.n	80052b2 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005278:	4b0a      	ldr	r3, [pc, #40]	; (80052a4 <UART_SetConfig+0x2fc>)
 800527a:	617b      	str	r3, [r7, #20]
        break;
 800527c:	e019      	b.n	80052b2 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800527e:	f7fe fa8f 	bl	80037a0 <HAL_RCC_GetSysClockFreq>
 8005282:	6178      	str	r0, [r7, #20]
        break;
 8005284:	e015      	b.n	80052b2 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005286:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800528a:	617b      	str	r3, [r7, #20]
        break;
 800528c:	e011      	b.n	80052b2 <UART_SetConfig+0x30a>
 800528e:	bf00      	nop
 8005290:	efff69f3 	.word	0xefff69f3
 8005294:	40008000 	.word	0x40008000
 8005298:	40013800 	.word	0x40013800
 800529c:	40021000 	.word	0x40021000
 80052a0:	40004400 	.word	0x40004400
 80052a4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80052a8:	2300      	movs	r3, #0
 80052aa:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	76bb      	strb	r3, [r7, #26]
        break;
 80052b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d073      	beq.n	80053a0 <UART_SetConfig+0x3f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	005a      	lsls	r2, r3, #1
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	085b      	lsrs	r3, r3, #1
 80052c2:	441a      	add	r2, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80052cc:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	2b0f      	cmp	r3, #15
 80052d2:	d916      	bls.n	8005302 <UART_SetConfig+0x35a>
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052da:	d212      	bcs.n	8005302 <UART_SetConfig+0x35a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	b29b      	uxth	r3, r3
 80052e0:	f023 030f 	bic.w	r3, r3, #15
 80052e4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	085b      	lsrs	r3, r3, #1
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	f003 0307 	and.w	r3, r3, #7
 80052f0:	b29a      	uxth	r2, r3
 80052f2:	89fb      	ldrh	r3, [r7, #14]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	89fa      	ldrh	r2, [r7, #14]
 80052fe:	60da      	str	r2, [r3, #12]
 8005300:	e04e      	b.n	80053a0 <UART_SetConfig+0x3f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	76bb      	strb	r3, [r7, #26]
 8005306:	e04b      	b.n	80053a0 <UART_SetConfig+0x3f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005308:	7efb      	ldrb	r3, [r7, #27]
 800530a:	2b08      	cmp	r3, #8
 800530c:	d827      	bhi.n	800535e <UART_SetConfig+0x3b6>
 800530e:	a201      	add	r2, pc, #4	; (adr r2, 8005314 <UART_SetConfig+0x36c>)
 8005310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005314:	08005339 	.word	0x08005339
 8005318:	08005341 	.word	0x08005341
 800531c:	08005349 	.word	0x08005349
 8005320:	0800535f 	.word	0x0800535f
 8005324:	0800534f 	.word	0x0800534f
 8005328:	0800535f 	.word	0x0800535f
 800532c:	0800535f 	.word	0x0800535f
 8005330:	0800535f 	.word	0x0800535f
 8005334:	08005357 	.word	0x08005357
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005338:	f7fe faca 	bl	80038d0 <HAL_RCC_GetPCLK1Freq>
 800533c:	6178      	str	r0, [r7, #20]
        break;
 800533e:	e013      	b.n	8005368 <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005340:	f7fe fadc 	bl	80038fc <HAL_RCC_GetPCLK2Freq>
 8005344:	6178      	str	r0, [r7, #20]
        break;
 8005346:	e00f      	b.n	8005368 <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005348:	4b1b      	ldr	r3, [pc, #108]	; (80053b8 <UART_SetConfig+0x410>)
 800534a:	617b      	str	r3, [r7, #20]
        break;
 800534c:	e00c      	b.n	8005368 <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800534e:	f7fe fa27 	bl	80037a0 <HAL_RCC_GetSysClockFreq>
 8005352:	6178      	str	r0, [r7, #20]
        break;
 8005354:	e008      	b.n	8005368 <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005356:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800535a:	617b      	str	r3, [r7, #20]
        break;
 800535c:	e004      	b.n	8005368 <UART_SetConfig+0x3c0>
      default:
        pclk = 0U;
 800535e:	2300      	movs	r3, #0
 8005360:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	76bb      	strb	r3, [r7, #26]
        break;
 8005366:	bf00      	nop
    }

    if (pclk != 0U)
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d018      	beq.n	80053a0 <UART_SetConfig+0x3f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	085a      	lsrs	r2, r3, #1
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	441a      	add	r2, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005380:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	2b0f      	cmp	r3, #15
 8005386:	d909      	bls.n	800539c <UART_SetConfig+0x3f4>
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800538e:	d205      	bcs.n	800539c <UART_SetConfig+0x3f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	b29a      	uxth	r2, r3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	60da      	str	r2, [r3, #12]
 800539a:	e001      	b.n	80053a0 <UART_SetConfig+0x3f8>
      }
      else
      {
        ret = HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80053ac:	7ebb      	ldrb	r3, [r7, #26]
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3720      	adds	r7, #32
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bdb0      	pop	{r4, r5, r7, pc}
 80053b6:	bf00      	nop
 80053b8:	00f42400 	.word	0x00f42400

080053bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c8:	f003 0301 	and.w	r3, r3, #1
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d00a      	beq.n	80053e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	430a      	orrs	r2, r1
 80053e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ea:	f003 0302 	and.w	r3, r3, #2
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d00a      	beq.n	8005408 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	430a      	orrs	r2, r1
 8005406:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540c:	f003 0304 	and.w	r3, r3, #4
 8005410:	2b00      	cmp	r3, #0
 8005412:	d00a      	beq.n	800542a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	430a      	orrs	r2, r1
 8005428:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542e:	f003 0308 	and.w	r3, r3, #8
 8005432:	2b00      	cmp	r3, #0
 8005434:	d00a      	beq.n	800544c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	430a      	orrs	r2, r1
 800544a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005450:	f003 0310 	and.w	r3, r3, #16
 8005454:	2b00      	cmp	r3, #0
 8005456:	d00a      	beq.n	800546e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	430a      	orrs	r2, r1
 800546c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005472:	f003 0320 	and.w	r3, r3, #32
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00a      	beq.n	8005490 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	430a      	orrs	r2, r1
 800548e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005498:	2b00      	cmp	r3, #0
 800549a:	d01a      	beq.n	80054d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	430a      	orrs	r2, r1
 80054b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054ba:	d10a      	bne.n	80054d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	430a      	orrs	r2, r1
 80054d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d00a      	beq.n	80054f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	430a      	orrs	r2, r1
 80054f2:	605a      	str	r2, [r3, #4]
  }
}
 80054f4:	bf00      	nop
 80054f6:	370c      	adds	r7, #12
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b086      	sub	sp, #24
 8005504:	af02      	add	r7, sp, #8
 8005506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005510:	f7fc fb22 	bl	8001b58 <HAL_GetTick>
 8005514:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 0308 	and.w	r3, r3, #8
 8005520:	2b08      	cmp	r3, #8
 8005522:	d10e      	bne.n	8005542 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005524:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005528:	9300      	str	r3, [sp, #0]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2200      	movs	r2, #0
 800552e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 f82d 	bl	8005592 <UART_WaitOnFlagUntilTimeout>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d001      	beq.n	8005542 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800553e:	2303      	movs	r3, #3
 8005540:	e023      	b.n	800558a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 0304 	and.w	r3, r3, #4
 800554c:	2b04      	cmp	r3, #4
 800554e:	d10e      	bne.n	800556e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005550:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005554:	9300      	str	r3, [sp, #0]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2200      	movs	r2, #0
 800555a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 f817 	bl	8005592 <UART_WaitOnFlagUntilTimeout>
 8005564:	4603      	mov	r3, r0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d001      	beq.n	800556e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800556a:	2303      	movs	r3, #3
 800556c:	e00d      	b.n	800558a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2220      	movs	r2, #32
 8005572:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2220      	movs	r2, #32
 8005578:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005588:	2300      	movs	r3, #0
}
 800558a:	4618      	mov	r0, r3
 800558c:	3710      	adds	r7, #16
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}

08005592 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005592:	b580      	push	{r7, lr}
 8005594:	b09c      	sub	sp, #112	; 0x70
 8005596:	af00      	add	r7, sp, #0
 8005598:	60f8      	str	r0, [r7, #12]
 800559a:	60b9      	str	r1, [r7, #8]
 800559c:	603b      	str	r3, [r7, #0]
 800559e:	4613      	mov	r3, r2
 80055a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055a2:	e0a5      	b.n	80056f0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055aa:	f000 80a1 	beq.w	80056f0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055ae:	f7fc fad3 	bl	8001b58 <HAL_GetTick>
 80055b2:	4602      	mov	r2, r0
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	1ad3      	subs	r3, r2, r3
 80055b8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d302      	bcc.n	80055c4 <UART_WaitOnFlagUntilTimeout+0x32>
 80055be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d13e      	bne.n	8005642 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055cc:	e853 3f00 	ldrex	r3, [r3]
 80055d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80055d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80055d8:	667b      	str	r3, [r7, #100]	; 0x64
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	461a      	mov	r2, r3
 80055e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055e4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80055e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80055ea:	e841 2300 	strex	r3, r2, [r1]
 80055ee:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80055f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d1e6      	bne.n	80055c4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	3308      	adds	r3, #8
 80055fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005600:	e853 3f00 	ldrex	r3, [r3]
 8005604:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005608:	f023 0301 	bic.w	r3, r3, #1
 800560c:	663b      	str	r3, [r7, #96]	; 0x60
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	3308      	adds	r3, #8
 8005614:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005616:	64ba      	str	r2, [r7, #72]	; 0x48
 8005618:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800561a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800561c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800561e:	e841 2300 	strex	r3, r2, [r1]
 8005622:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005624:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005626:	2b00      	cmp	r3, #0
 8005628:	d1e5      	bne.n	80055f6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2220      	movs	r2, #32
 800562e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2220      	movs	r2, #32
 8005634:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2200      	movs	r2, #0
 800563a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	e067      	b.n	8005712 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 0304 	and.w	r3, r3, #4
 800564c:	2b00      	cmp	r3, #0
 800564e:	d04f      	beq.n	80056f0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	69db      	ldr	r3, [r3, #28]
 8005656:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800565a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800565e:	d147      	bne.n	80056f0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005668:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005672:	e853 3f00 	ldrex	r3, [r3]
 8005676:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800567e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	461a      	mov	r2, r3
 8005686:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005688:	637b      	str	r3, [r7, #52]	; 0x34
 800568a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800568c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800568e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005690:	e841 2300 	strex	r3, r2, [r1]
 8005694:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005698:	2b00      	cmp	r3, #0
 800569a:	d1e6      	bne.n	800566a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	3308      	adds	r3, #8
 80056a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	e853 3f00 	ldrex	r3, [r3]
 80056aa:	613b      	str	r3, [r7, #16]
   return(result);
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	f023 0301 	bic.w	r3, r3, #1
 80056b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	3308      	adds	r3, #8
 80056ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80056bc:	623a      	str	r2, [r7, #32]
 80056be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c0:	69f9      	ldr	r1, [r7, #28]
 80056c2:	6a3a      	ldr	r2, [r7, #32]
 80056c4:	e841 2300 	strex	r3, r2, [r1]
 80056c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80056ca:	69bb      	ldr	r3, [r7, #24]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d1e5      	bne.n	800569c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2220      	movs	r2, #32
 80056d4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2220      	movs	r2, #32
 80056da:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2220      	movs	r2, #32
 80056e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80056ec:	2303      	movs	r3, #3
 80056ee:	e010      	b.n	8005712 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	69da      	ldr	r2, [r3, #28]
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	4013      	ands	r3, r2
 80056fa:	68ba      	ldr	r2, [r7, #8]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	bf0c      	ite	eq
 8005700:	2301      	moveq	r3, #1
 8005702:	2300      	movne	r3, #0
 8005704:	b2db      	uxtb	r3, r3
 8005706:	461a      	mov	r2, r3
 8005708:	79fb      	ldrb	r3, [r7, #7]
 800570a:	429a      	cmp	r2, r3
 800570c:	f43f af4a 	beq.w	80055a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005710:	2300      	movs	r3, #0
}
 8005712:	4618      	mov	r0, r3
 8005714:	3770      	adds	r7, #112	; 0x70
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}

0800571a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800571a:	b480      	push	{r7}
 800571c:	b095      	sub	sp, #84	; 0x54
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800572a:	e853 3f00 	ldrex	r3, [r3]
 800572e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005732:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005736:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	461a      	mov	r2, r3
 800573e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005740:	643b      	str	r3, [r7, #64]	; 0x40
 8005742:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005744:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005746:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005748:	e841 2300 	strex	r3, r2, [r1]
 800574c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800574e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005750:	2b00      	cmp	r3, #0
 8005752:	d1e6      	bne.n	8005722 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	3308      	adds	r3, #8
 800575a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800575c:	6a3b      	ldr	r3, [r7, #32]
 800575e:	e853 3f00 	ldrex	r3, [r3]
 8005762:	61fb      	str	r3, [r7, #28]
   return(result);
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	f023 0301 	bic.w	r3, r3, #1
 800576a:	64bb      	str	r3, [r7, #72]	; 0x48
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	3308      	adds	r3, #8
 8005772:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005774:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005776:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005778:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800577a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800577c:	e841 2300 	strex	r3, r2, [r1]
 8005780:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005784:	2b00      	cmp	r3, #0
 8005786:	d1e5      	bne.n	8005754 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800578c:	2b01      	cmp	r3, #1
 800578e:	d118      	bne.n	80057c2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	e853 3f00 	ldrex	r3, [r3]
 800579c:	60bb      	str	r3, [r7, #8]
   return(result);
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	f023 0310 	bic.w	r3, r3, #16
 80057a4:	647b      	str	r3, [r7, #68]	; 0x44
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	461a      	mov	r2, r3
 80057ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057ae:	61bb      	str	r3, [r7, #24]
 80057b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b2:	6979      	ldr	r1, [r7, #20]
 80057b4:	69ba      	ldr	r2, [r7, #24]
 80057b6:	e841 2300 	strex	r3, r2, [r1]
 80057ba:	613b      	str	r3, [r7, #16]
   return(result);
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d1e6      	bne.n	8005790 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2220      	movs	r2, #32
 80057c6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	665a      	str	r2, [r3, #100]	; 0x64
}
 80057d4:	bf00      	nop
 80057d6:	3754      	adds	r7, #84	; 0x54
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b084      	sub	sp, #16
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80057fe:	68f8      	ldr	r0, [r7, #12]
 8005800:	f7ff fba8 	bl	8004f54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005804:	bf00      	nop
 8005806:	3710      	adds	r7, #16
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800580c:	b480      	push	{r7}
 800580e:	b08f      	sub	sp, #60	; 0x3c
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005818:	2b21      	cmp	r3, #33	; 0x21
 800581a:	d14d      	bne.n	80058b8 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005822:	b29b      	uxth	r3, r3
 8005824:	2b00      	cmp	r3, #0
 8005826:	d132      	bne.n	800588e <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582e:	6a3b      	ldr	r3, [r7, #32]
 8005830:	e853 3f00 	ldrex	r3, [r3]
 8005834:	61fb      	str	r3, [r7, #28]
   return(result);
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800583c:	637b      	str	r3, [r7, #52]	; 0x34
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	461a      	mov	r2, r3
 8005844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005846:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005848:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800584a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800584c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800584e:	e841 2300 	strex	r3, r2, [r1]
 8005852:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005856:	2b00      	cmp	r3, #0
 8005858:	d1e6      	bne.n	8005828 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	e853 3f00 	ldrex	r3, [r3]
 8005866:	60bb      	str	r3, [r7, #8]
   return(result);
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800586e:	633b      	str	r3, [r7, #48]	; 0x30
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	461a      	mov	r2, r3
 8005876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005878:	61bb      	str	r3, [r7, #24]
 800587a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800587c:	6979      	ldr	r1, [r7, #20]
 800587e:	69ba      	ldr	r2, [r7, #24]
 8005880:	e841 2300 	strex	r3, r2, [r1]
 8005884:	613b      	str	r3, [r7, #16]
   return(result);
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d1e6      	bne.n	800585a <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800588c:	e014      	b.n	80058b8 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005892:	781a      	ldrb	r2, [r3, #0]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	b292      	uxth	r2, r2
 800589a:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058a0:	1c5a      	adds	r2, r3, #1
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	3b01      	subs	r3, #1
 80058b0:	b29a      	uxth	r2, r3
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80058b8:	bf00      	nop
 80058ba:	373c      	adds	r7, #60	; 0x3c
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr

080058c4 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b091      	sub	sp, #68	; 0x44
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058d0:	2b21      	cmp	r3, #33	; 0x21
 80058d2:	d151      	bne.n	8005978 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80058da:	b29b      	uxth	r3, r3
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d132      	bne.n	8005946 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e8:	e853 3f00 	ldrex	r3, [r3]
 80058ec:	623b      	str	r3, [r7, #32]
   return(result);
 80058ee:	6a3b      	ldr	r3, [r7, #32]
 80058f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	461a      	mov	r2, r3
 80058fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058fe:	633b      	str	r3, [r7, #48]	; 0x30
 8005900:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005902:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005904:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005906:	e841 2300 	strex	r3, r2, [r1]
 800590a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800590c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800590e:	2b00      	cmp	r3, #0
 8005910:	d1e6      	bne.n	80058e0 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	e853 3f00 	ldrex	r3, [r3]
 800591e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005926:	637b      	str	r3, [r7, #52]	; 0x34
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	461a      	mov	r2, r3
 800592e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005930:	61fb      	str	r3, [r7, #28]
 8005932:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005934:	69b9      	ldr	r1, [r7, #24]
 8005936:	69fa      	ldr	r2, [r7, #28]
 8005938:	e841 2300 	strex	r3, r2, [r1]
 800593c:	617b      	str	r3, [r7, #20]
   return(result);
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d1e6      	bne.n	8005912 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005944:	e018      	b.n	8005978 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800594a:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800594c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800594e:	881a      	ldrh	r2, [r3, #0]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005958:	b292      	uxth	r2, r2
 800595a:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005960:	1c9a      	adds	r2, r3, #2
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800596c:	b29b      	uxth	r3, r3
 800596e:	3b01      	subs	r3, #1
 8005970:	b29a      	uxth	r2, r3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005978:	bf00      	nop
 800597a:	3744      	adds	r7, #68	; 0x44
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b088      	sub	sp, #32
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	e853 3f00 	ldrex	r3, [r3]
 8005998:	60bb      	str	r3, [r7, #8]
   return(result);
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059a0:	61fb      	str	r3, [r7, #28]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	461a      	mov	r2, r3
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	61bb      	str	r3, [r7, #24]
 80059ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ae:	6979      	ldr	r1, [r7, #20]
 80059b0:	69ba      	ldr	r2, [r7, #24]
 80059b2:	e841 2300 	strex	r3, r2, [r1]
 80059b6:	613b      	str	r3, [r7, #16]
   return(result);
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d1e6      	bne.n	800598c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2220      	movs	r2, #32
 80059c2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f7ff fab8 	bl	8004f40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059d0:	bf00      	nop
 80059d2:	3720      	adds	r7, #32
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80059e0:	bf00      	nop
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <__NVIC_SetPriority>:
{
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	4603      	mov	r3, r0
 80059f4:	6039      	str	r1, [r7, #0]
 80059f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	db0a      	blt.n	8005a16 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	b2da      	uxtb	r2, r3
 8005a04:	490c      	ldr	r1, [pc, #48]	; (8005a38 <__NVIC_SetPriority+0x4c>)
 8005a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a0a:	0112      	lsls	r2, r2, #4
 8005a0c:	b2d2      	uxtb	r2, r2
 8005a0e:	440b      	add	r3, r1
 8005a10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005a14:	e00a      	b.n	8005a2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	b2da      	uxtb	r2, r3
 8005a1a:	4908      	ldr	r1, [pc, #32]	; (8005a3c <__NVIC_SetPriority+0x50>)
 8005a1c:	79fb      	ldrb	r3, [r7, #7]
 8005a1e:	f003 030f 	and.w	r3, r3, #15
 8005a22:	3b04      	subs	r3, #4
 8005a24:	0112      	lsls	r2, r2, #4
 8005a26:	b2d2      	uxtb	r2, r2
 8005a28:	440b      	add	r3, r1
 8005a2a:	761a      	strb	r2, [r3, #24]
}
 8005a2c:	bf00      	nop
 8005a2e:	370c      	adds	r7, #12
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr
 8005a38:	e000e100 	.word	0xe000e100
 8005a3c:	e000ed00 	.word	0xe000ed00

08005a40 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005a40:	b580      	push	{r7, lr}
 8005a42:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005a44:	4b05      	ldr	r3, [pc, #20]	; (8005a5c <SysTick_Handler+0x1c>)
 8005a46:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005a48:	f001 fd28 	bl	800749c <xTaskGetSchedulerState>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d001      	beq.n	8005a56 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005a52:	f002 fb11 	bl	8008078 <xPortSysTickHandler>
  }
}
 8005a56:	bf00      	nop
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	e000e010 	.word	0xe000e010

08005a60 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005a60:	b580      	push	{r7, lr}
 8005a62:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005a64:	2100      	movs	r1, #0
 8005a66:	f06f 0004 	mvn.w	r0, #4
 8005a6a:	f7ff ffbf 	bl	80059ec <__NVIC_SetPriority>
#endif
}
 8005a6e:	bf00      	nop
 8005a70:	bd80      	pop	{r7, pc}
	...

08005a74 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a7a:	f3ef 8305 	mrs	r3, IPSR
 8005a7e:	603b      	str	r3, [r7, #0]
  return(result);
 8005a80:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d003      	beq.n	8005a8e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005a86:	f06f 0305 	mvn.w	r3, #5
 8005a8a:	607b      	str	r3, [r7, #4]
 8005a8c:	e00c      	b.n	8005aa8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005a8e:	4b0a      	ldr	r3, [pc, #40]	; (8005ab8 <osKernelInitialize+0x44>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d105      	bne.n	8005aa2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005a96:	4b08      	ldr	r3, [pc, #32]	; (8005ab8 <osKernelInitialize+0x44>)
 8005a98:	2201      	movs	r2, #1
 8005a9a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	607b      	str	r3, [r7, #4]
 8005aa0:	e002      	b.n	8005aa8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8005aa6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005aa8:	687b      	ldr	r3, [r7, #4]
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	370c      	adds	r7, #12
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
 8005ab6:	bf00      	nop
 8005ab8:	20000108 	.word	0x20000108

08005abc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ac2:	f3ef 8305 	mrs	r3, IPSR
 8005ac6:	603b      	str	r3, [r7, #0]
  return(result);
 8005ac8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d003      	beq.n	8005ad6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8005ace:	f06f 0305 	mvn.w	r3, #5
 8005ad2:	607b      	str	r3, [r7, #4]
 8005ad4:	e010      	b.n	8005af8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005ad6:	4b0b      	ldr	r3, [pc, #44]	; (8005b04 <osKernelStart+0x48>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d109      	bne.n	8005af2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005ade:	f7ff ffbf 	bl	8005a60 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005ae2:	4b08      	ldr	r3, [pc, #32]	; (8005b04 <osKernelStart+0x48>)
 8005ae4:	2202      	movs	r2, #2
 8005ae6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005ae8:	f001 f87c 	bl	8006be4 <vTaskStartScheduler>
      stat = osOK;
 8005aec:	2300      	movs	r3, #0
 8005aee:	607b      	str	r3, [r7, #4]
 8005af0:	e002      	b.n	8005af8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005af2:	f04f 33ff 	mov.w	r3, #4294967295
 8005af6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005af8:	687b      	ldr	r3, [r7, #4]
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3708      	adds	r7, #8
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop
 8005b04:	20000108 	.word	0x20000108

08005b08 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b08e      	sub	sp, #56	; 0x38
 8005b0c:	af04      	add	r7, sp, #16
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005b14:	2300      	movs	r3, #0
 8005b16:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b18:	f3ef 8305 	mrs	r3, IPSR
 8005b1c:	617b      	str	r3, [r7, #20]
  return(result);
 8005b1e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d17e      	bne.n	8005c22 <osThreadNew+0x11a>
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d07b      	beq.n	8005c22 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005b2a:	2380      	movs	r3, #128	; 0x80
 8005b2c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005b2e:	2318      	movs	r3, #24
 8005b30:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005b32:	2300      	movs	r3, #0
 8005b34:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005b36:	f04f 33ff 	mov.w	r3, #4294967295
 8005b3a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d045      	beq.n	8005bce <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d002      	beq.n	8005b50 <osThreadNew+0x48>
        name = attr->name;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	699b      	ldr	r3, [r3, #24]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d002      	beq.n	8005b5e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	699b      	ldr	r3, [r3, #24]
 8005b5c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d008      	beq.n	8005b76 <osThreadNew+0x6e>
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	2b38      	cmp	r3, #56	; 0x38
 8005b68:	d805      	bhi.n	8005b76 <osThreadNew+0x6e>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	f003 0301 	and.w	r3, r3, #1
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d001      	beq.n	8005b7a <osThreadNew+0x72>
        return (NULL);
 8005b76:	2300      	movs	r3, #0
 8005b78:	e054      	b.n	8005c24 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	695b      	ldr	r3, [r3, #20]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d003      	beq.n	8005b8a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	695b      	ldr	r3, [r3, #20]
 8005b86:	089b      	lsrs	r3, r3, #2
 8005b88:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d00e      	beq.n	8005bb0 <osThreadNew+0xa8>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	68db      	ldr	r3, [r3, #12]
 8005b96:	2bbb      	cmp	r3, #187	; 0xbb
 8005b98:	d90a      	bls.n	8005bb0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d006      	beq.n	8005bb0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	695b      	ldr	r3, [r3, #20]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d002      	beq.n	8005bb0 <osThreadNew+0xa8>
        mem = 1;
 8005baa:	2301      	movs	r3, #1
 8005bac:	61bb      	str	r3, [r7, #24]
 8005bae:	e010      	b.n	8005bd2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d10c      	bne.n	8005bd2 <osThreadNew+0xca>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d108      	bne.n	8005bd2 <osThreadNew+0xca>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	691b      	ldr	r3, [r3, #16]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d104      	bne.n	8005bd2 <osThreadNew+0xca>
          mem = 0;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	61bb      	str	r3, [r7, #24]
 8005bcc:	e001      	b.n	8005bd2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d110      	bne.n	8005bfa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005be0:	9202      	str	r2, [sp, #8]
 8005be2:	9301      	str	r3, [sp, #4]
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	9300      	str	r3, [sp, #0]
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	6a3a      	ldr	r2, [r7, #32]
 8005bec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005bee:	68f8      	ldr	r0, [r7, #12]
 8005bf0:	f000 fe0c 	bl	800680c <xTaskCreateStatic>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	613b      	str	r3, [r7, #16]
 8005bf8:	e013      	b.n	8005c22 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d110      	bne.n	8005c22 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005c00:	6a3b      	ldr	r3, [r7, #32]
 8005c02:	b29a      	uxth	r2, r3
 8005c04:	f107 0310 	add.w	r3, r7, #16
 8005c08:	9301      	str	r3, [sp, #4]
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	9300      	str	r3, [sp, #0]
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c12:	68f8      	ldr	r0, [r7, #12]
 8005c14:	f000 fe57 	bl	80068c6 <xTaskCreate>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d001      	beq.n	8005c22 <osThreadNew+0x11a>
            hTask = NULL;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005c22:	693b      	ldr	r3, [r7, #16]
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3728      	adds	r7, #40	; 0x28
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b084      	sub	sp, #16
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c34:	f3ef 8305 	mrs	r3, IPSR
 8005c38:	60bb      	str	r3, [r7, #8]
  return(result);
 8005c3a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d003      	beq.n	8005c48 <osDelay+0x1c>
    stat = osErrorISR;
 8005c40:	f06f 0305 	mvn.w	r3, #5
 8005c44:	60fb      	str	r3, [r7, #12]
 8005c46:	e007      	b.n	8005c58 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d002      	beq.n	8005c58 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 ff92 	bl	8006b7c <vTaskDelay>
    }
  }

  return (stat);
 8005c58:	68fb      	ldr	r3, [r7, #12]
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3710      	adds	r7, #16
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
	...

08005c64 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005c64:	b480      	push	{r7}
 8005c66:	b085      	sub	sp, #20
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	60b9      	str	r1, [r7, #8]
 8005c6e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	4a07      	ldr	r2, [pc, #28]	; (8005c90 <vApplicationGetIdleTaskMemory+0x2c>)
 8005c74:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	4a06      	ldr	r2, [pc, #24]	; (8005c94 <vApplicationGetIdleTaskMemory+0x30>)
 8005c7a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2280      	movs	r2, #128	; 0x80
 8005c80:	601a      	str	r2, [r3, #0]
}
 8005c82:	bf00      	nop
 8005c84:	3714      	adds	r7, #20
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr
 8005c8e:	bf00      	nop
 8005c90:	2000010c 	.word	0x2000010c
 8005c94:	200001c8 	.word	0x200001c8

08005c98 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005c98:	b480      	push	{r7}
 8005c9a:	b085      	sub	sp, #20
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	60f8      	str	r0, [r7, #12]
 8005ca0:	60b9      	str	r1, [r7, #8]
 8005ca2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	4a07      	ldr	r2, [pc, #28]	; (8005cc4 <vApplicationGetTimerTaskMemory+0x2c>)
 8005ca8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	4a06      	ldr	r2, [pc, #24]	; (8005cc8 <vApplicationGetTimerTaskMemory+0x30>)
 8005cae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005cb6:	601a      	str	r2, [r3, #0]
}
 8005cb8:	bf00      	nop
 8005cba:	3714      	adds	r7, #20
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr
 8005cc4:	200003c8 	.word	0x200003c8
 8005cc8:	20000484 	.word	0x20000484

08005ccc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f103 0208 	add.w	r2, r3, #8
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ce4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f103 0208 	add.w	r2, r3, #8
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f103 0208 	add.w	r2, r3, #8
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005d00:	bf00      	nop
 8005d02:	370c      	adds	r7, #12
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005d1a:	bf00      	nop
 8005d1c:	370c      	adds	r7, #12
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr

08005d26 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d26:	b480      	push	{r7}
 8005d28:	b085      	sub	sp, #20
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6078      	str	r0, [r7, #4]
 8005d2e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	68fa      	ldr	r2, [r7, #12]
 8005d3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	689a      	ldr	r2, [r3, #8]
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	683a      	ldr	r2, [r7, #0]
 8005d4a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	683a      	ldr	r2, [r7, #0]
 8005d50:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	1c5a      	adds	r2, r3, #1
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	601a      	str	r2, [r3, #0]
}
 8005d62:	bf00      	nop
 8005d64:	3714      	adds	r7, #20
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr

08005d6e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d6e:	b480      	push	{r7}
 8005d70:	b085      	sub	sp, #20
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
 8005d76:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d84:	d103      	bne.n	8005d8e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	691b      	ldr	r3, [r3, #16]
 8005d8a:	60fb      	str	r3, [r7, #12]
 8005d8c:	e00c      	b.n	8005da8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	3308      	adds	r3, #8
 8005d92:	60fb      	str	r3, [r7, #12]
 8005d94:	e002      	b.n	8005d9c <vListInsert+0x2e>
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	60fb      	str	r3, [r7, #12]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	68ba      	ldr	r2, [r7, #8]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d2f6      	bcs.n	8005d96 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	685a      	ldr	r2, [r3, #4]
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	683a      	ldr	r2, [r7, #0]
 8005db6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	68fa      	ldr	r2, [r7, #12]
 8005dbc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	683a      	ldr	r2, [r7, #0]
 8005dc2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	1c5a      	adds	r2, r3, #1
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	601a      	str	r2, [r3, #0]
}
 8005dd4:	bf00      	nop
 8005dd6:	3714      	adds	r7, #20
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr

08005de0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005de0:	b480      	push	{r7}
 8005de2:	b085      	sub	sp, #20
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	691b      	ldr	r3, [r3, #16]
 8005dec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	6892      	ldr	r2, [r2, #8]
 8005df6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	6852      	ldr	r2, [r2, #4]
 8005e00:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d103      	bne.n	8005e14 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	689a      	ldr	r2, [r3, #8]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	1e5a      	subs	r2, r3, #1
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3714      	adds	r7, #20
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d10a      	bne.n	8005e5e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e4c:	f383 8811 	msr	BASEPRI, r3
 8005e50:	f3bf 8f6f 	isb	sy
 8005e54:	f3bf 8f4f 	dsb	sy
 8005e58:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005e5a:	bf00      	nop
 8005e5c:	e7fe      	b.n	8005e5c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005e5e:	f002 f879 	bl	8007f54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e6a:	68f9      	ldr	r1, [r7, #12]
 8005e6c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005e6e:	fb01 f303 	mul.w	r3, r1, r3
 8005e72:	441a      	add	r2, r3
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e8e:	3b01      	subs	r3, #1
 8005e90:	68f9      	ldr	r1, [r7, #12]
 8005e92:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005e94:	fb01 f303 	mul.w	r3, r1, r3
 8005e98:	441a      	add	r2, r3
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	22ff      	movs	r2, #255	; 0xff
 8005ea2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	22ff      	movs	r2, #255	; 0xff
 8005eaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d114      	bne.n	8005ede <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	691b      	ldr	r3, [r3, #16]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d01a      	beq.n	8005ef2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	3310      	adds	r3, #16
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f001 f929 	bl	8007118 <xTaskRemoveFromEventList>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d012      	beq.n	8005ef2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005ecc:	4b0c      	ldr	r3, [pc, #48]	; (8005f00 <xQueueGenericReset+0xcc>)
 8005ece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ed2:	601a      	str	r2, [r3, #0]
 8005ed4:	f3bf 8f4f 	dsb	sy
 8005ed8:	f3bf 8f6f 	isb	sy
 8005edc:	e009      	b.n	8005ef2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	3310      	adds	r3, #16
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f7ff fef2 	bl	8005ccc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	3324      	adds	r3, #36	; 0x24
 8005eec:	4618      	mov	r0, r3
 8005eee:	f7ff feed 	bl	8005ccc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005ef2:	f002 f85f 	bl	8007fb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005ef6:	2301      	movs	r3, #1
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3710      	adds	r7, #16
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}
 8005f00:	e000ed04 	.word	0xe000ed04

08005f04 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b08e      	sub	sp, #56	; 0x38
 8005f08:	af02      	add	r7, sp, #8
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	607a      	str	r2, [r7, #4]
 8005f10:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d10a      	bne.n	8005f2e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f1c:	f383 8811 	msr	BASEPRI, r3
 8005f20:	f3bf 8f6f 	isb	sy
 8005f24:	f3bf 8f4f 	dsb	sy
 8005f28:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005f2a:	bf00      	nop
 8005f2c:	e7fe      	b.n	8005f2c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d10a      	bne.n	8005f4a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f38:	f383 8811 	msr	BASEPRI, r3
 8005f3c:	f3bf 8f6f 	isb	sy
 8005f40:	f3bf 8f4f 	dsb	sy
 8005f44:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005f46:	bf00      	nop
 8005f48:	e7fe      	b.n	8005f48 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d002      	beq.n	8005f56 <xQueueGenericCreateStatic+0x52>
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d001      	beq.n	8005f5a <xQueueGenericCreateStatic+0x56>
 8005f56:	2301      	movs	r3, #1
 8005f58:	e000      	b.n	8005f5c <xQueueGenericCreateStatic+0x58>
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d10a      	bne.n	8005f76 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f64:	f383 8811 	msr	BASEPRI, r3
 8005f68:	f3bf 8f6f 	isb	sy
 8005f6c:	f3bf 8f4f 	dsb	sy
 8005f70:	623b      	str	r3, [r7, #32]
}
 8005f72:	bf00      	nop
 8005f74:	e7fe      	b.n	8005f74 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d102      	bne.n	8005f82 <xQueueGenericCreateStatic+0x7e>
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d101      	bne.n	8005f86 <xQueueGenericCreateStatic+0x82>
 8005f82:	2301      	movs	r3, #1
 8005f84:	e000      	b.n	8005f88 <xQueueGenericCreateStatic+0x84>
 8005f86:	2300      	movs	r3, #0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d10a      	bne.n	8005fa2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f90:	f383 8811 	msr	BASEPRI, r3
 8005f94:	f3bf 8f6f 	isb	sy
 8005f98:	f3bf 8f4f 	dsb	sy
 8005f9c:	61fb      	str	r3, [r7, #28]
}
 8005f9e:	bf00      	nop
 8005fa0:	e7fe      	b.n	8005fa0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005fa2:	2350      	movs	r3, #80	; 0x50
 8005fa4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	2b50      	cmp	r3, #80	; 0x50
 8005faa:	d00a      	beq.n	8005fc2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb0:	f383 8811 	msr	BASEPRI, r3
 8005fb4:	f3bf 8f6f 	isb	sy
 8005fb8:	f3bf 8f4f 	dsb	sy
 8005fbc:	61bb      	str	r3, [r7, #24]
}
 8005fbe:	bf00      	nop
 8005fc0:	e7fe      	b.n	8005fc0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005fc2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d00d      	beq.n	8005fea <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005fd6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fdc:	9300      	str	r3, [sp, #0]
 8005fde:	4613      	mov	r3, r2
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	68b9      	ldr	r1, [r7, #8]
 8005fe4:	68f8      	ldr	r0, [r7, #12]
 8005fe6:	f000 f805 	bl	8005ff4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3730      	adds	r7, #48	; 0x30
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}

08005ff4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	60b9      	str	r1, [r7, #8]
 8005ffe:	607a      	str	r2, [r7, #4]
 8006000:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d103      	bne.n	8006010 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006008:	69bb      	ldr	r3, [r7, #24]
 800600a:	69ba      	ldr	r2, [r7, #24]
 800600c:	601a      	str	r2, [r3, #0]
 800600e:	e002      	b.n	8006016 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006016:	69bb      	ldr	r3, [r7, #24]
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800601c:	69bb      	ldr	r3, [r7, #24]
 800601e:	68ba      	ldr	r2, [r7, #8]
 8006020:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006022:	2101      	movs	r1, #1
 8006024:	69b8      	ldr	r0, [r7, #24]
 8006026:	f7ff ff05 	bl	8005e34 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	78fa      	ldrb	r2, [r7, #3]
 800602e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006032:	bf00      	nop
 8006034:	3710      	adds	r7, #16
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
	...

0800603c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b08e      	sub	sp, #56	; 0x38
 8006040:	af00      	add	r7, sp, #0
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	607a      	str	r2, [r7, #4]
 8006048:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800604a:	2300      	movs	r3, #0
 800604c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006054:	2b00      	cmp	r3, #0
 8006056:	d10a      	bne.n	800606e <xQueueGenericSend+0x32>
	__asm volatile
 8006058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800605c:	f383 8811 	msr	BASEPRI, r3
 8006060:	f3bf 8f6f 	isb	sy
 8006064:	f3bf 8f4f 	dsb	sy
 8006068:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800606a:	bf00      	nop
 800606c:	e7fe      	b.n	800606c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d103      	bne.n	800607c <xQueueGenericSend+0x40>
 8006074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006078:	2b00      	cmp	r3, #0
 800607a:	d101      	bne.n	8006080 <xQueueGenericSend+0x44>
 800607c:	2301      	movs	r3, #1
 800607e:	e000      	b.n	8006082 <xQueueGenericSend+0x46>
 8006080:	2300      	movs	r3, #0
 8006082:	2b00      	cmp	r3, #0
 8006084:	d10a      	bne.n	800609c <xQueueGenericSend+0x60>
	__asm volatile
 8006086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800608a:	f383 8811 	msr	BASEPRI, r3
 800608e:	f3bf 8f6f 	isb	sy
 8006092:	f3bf 8f4f 	dsb	sy
 8006096:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006098:	bf00      	nop
 800609a:	e7fe      	b.n	800609a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	2b02      	cmp	r3, #2
 80060a0:	d103      	bne.n	80060aa <xQueueGenericSend+0x6e>
 80060a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d101      	bne.n	80060ae <xQueueGenericSend+0x72>
 80060aa:	2301      	movs	r3, #1
 80060ac:	e000      	b.n	80060b0 <xQueueGenericSend+0x74>
 80060ae:	2300      	movs	r3, #0
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d10a      	bne.n	80060ca <xQueueGenericSend+0x8e>
	__asm volatile
 80060b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b8:	f383 8811 	msr	BASEPRI, r3
 80060bc:	f3bf 8f6f 	isb	sy
 80060c0:	f3bf 8f4f 	dsb	sy
 80060c4:	623b      	str	r3, [r7, #32]
}
 80060c6:	bf00      	nop
 80060c8:	e7fe      	b.n	80060c8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80060ca:	f001 f9e7 	bl	800749c <xTaskGetSchedulerState>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d102      	bne.n	80060da <xQueueGenericSend+0x9e>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d101      	bne.n	80060de <xQueueGenericSend+0xa2>
 80060da:	2301      	movs	r3, #1
 80060dc:	e000      	b.n	80060e0 <xQueueGenericSend+0xa4>
 80060de:	2300      	movs	r3, #0
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d10a      	bne.n	80060fa <xQueueGenericSend+0xbe>
	__asm volatile
 80060e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e8:	f383 8811 	msr	BASEPRI, r3
 80060ec:	f3bf 8f6f 	isb	sy
 80060f0:	f3bf 8f4f 	dsb	sy
 80060f4:	61fb      	str	r3, [r7, #28]
}
 80060f6:	bf00      	nop
 80060f8:	e7fe      	b.n	80060f8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80060fa:	f001 ff2b 	bl	8007f54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80060fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006100:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006106:	429a      	cmp	r2, r3
 8006108:	d302      	bcc.n	8006110 <xQueueGenericSend+0xd4>
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	2b02      	cmp	r3, #2
 800610e:	d129      	bne.n	8006164 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006110:	683a      	ldr	r2, [r7, #0]
 8006112:	68b9      	ldr	r1, [r7, #8]
 8006114:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006116:	f000 fa0b 	bl	8006530 <prvCopyDataToQueue>
 800611a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800611c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006120:	2b00      	cmp	r3, #0
 8006122:	d010      	beq.n	8006146 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006126:	3324      	adds	r3, #36	; 0x24
 8006128:	4618      	mov	r0, r3
 800612a:	f000 fff5 	bl	8007118 <xTaskRemoveFromEventList>
 800612e:	4603      	mov	r3, r0
 8006130:	2b00      	cmp	r3, #0
 8006132:	d013      	beq.n	800615c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006134:	4b3f      	ldr	r3, [pc, #252]	; (8006234 <xQueueGenericSend+0x1f8>)
 8006136:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800613a:	601a      	str	r2, [r3, #0]
 800613c:	f3bf 8f4f 	dsb	sy
 8006140:	f3bf 8f6f 	isb	sy
 8006144:	e00a      	b.n	800615c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006148:	2b00      	cmp	r3, #0
 800614a:	d007      	beq.n	800615c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800614c:	4b39      	ldr	r3, [pc, #228]	; (8006234 <xQueueGenericSend+0x1f8>)
 800614e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006152:	601a      	str	r2, [r3, #0]
 8006154:	f3bf 8f4f 	dsb	sy
 8006158:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800615c:	f001 ff2a 	bl	8007fb4 <vPortExitCritical>
				return pdPASS;
 8006160:	2301      	movs	r3, #1
 8006162:	e063      	b.n	800622c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d103      	bne.n	8006172 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800616a:	f001 ff23 	bl	8007fb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800616e:	2300      	movs	r3, #0
 8006170:	e05c      	b.n	800622c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006174:	2b00      	cmp	r3, #0
 8006176:	d106      	bne.n	8006186 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006178:	f107 0314 	add.w	r3, r7, #20
 800617c:	4618      	mov	r0, r3
 800617e:	f001 f82f 	bl	80071e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006182:	2301      	movs	r3, #1
 8006184:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006186:	f001 ff15 	bl	8007fb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800618a:	f000 fd9b 	bl	8006cc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800618e:	f001 fee1 	bl	8007f54 <vPortEnterCritical>
 8006192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006194:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006198:	b25b      	sxtb	r3, r3
 800619a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800619e:	d103      	bne.n	80061a8 <xQueueGenericSend+0x16c>
 80061a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a2:	2200      	movs	r2, #0
 80061a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061ae:	b25b      	sxtb	r3, r3
 80061b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b4:	d103      	bne.n	80061be <xQueueGenericSend+0x182>
 80061b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b8:	2200      	movs	r2, #0
 80061ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061be:	f001 fef9 	bl	8007fb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80061c2:	1d3a      	adds	r2, r7, #4
 80061c4:	f107 0314 	add.w	r3, r7, #20
 80061c8:	4611      	mov	r1, r2
 80061ca:	4618      	mov	r0, r3
 80061cc:	f001 f81e 	bl	800720c <xTaskCheckForTimeOut>
 80061d0:	4603      	mov	r3, r0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d124      	bne.n	8006220 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80061d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80061d8:	f000 faa2 	bl	8006720 <prvIsQueueFull>
 80061dc:	4603      	mov	r3, r0
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d018      	beq.n	8006214 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80061e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e4:	3310      	adds	r3, #16
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	4611      	mov	r1, r2
 80061ea:	4618      	mov	r0, r3
 80061ec:	f000 ff44 	bl	8007078 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80061f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80061f2:	f000 fa2d 	bl	8006650 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80061f6:	f000 fd73 	bl	8006ce0 <xTaskResumeAll>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	f47f af7c 	bne.w	80060fa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006202:	4b0c      	ldr	r3, [pc, #48]	; (8006234 <xQueueGenericSend+0x1f8>)
 8006204:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006208:	601a      	str	r2, [r3, #0]
 800620a:	f3bf 8f4f 	dsb	sy
 800620e:	f3bf 8f6f 	isb	sy
 8006212:	e772      	b.n	80060fa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006214:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006216:	f000 fa1b 	bl	8006650 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800621a:	f000 fd61 	bl	8006ce0 <xTaskResumeAll>
 800621e:	e76c      	b.n	80060fa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006220:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006222:	f000 fa15 	bl	8006650 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006226:	f000 fd5b 	bl	8006ce0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800622a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800622c:	4618      	mov	r0, r3
 800622e:	3738      	adds	r7, #56	; 0x38
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}
 8006234:	e000ed04 	.word	0xe000ed04

08006238 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b090      	sub	sp, #64	; 0x40
 800623c:	af00      	add	r7, sp, #0
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	607a      	str	r2, [r7, #4]
 8006244:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800624a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800624c:	2b00      	cmp	r3, #0
 800624e:	d10a      	bne.n	8006266 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006254:	f383 8811 	msr	BASEPRI, r3
 8006258:	f3bf 8f6f 	isb	sy
 800625c:	f3bf 8f4f 	dsb	sy
 8006260:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006262:	bf00      	nop
 8006264:	e7fe      	b.n	8006264 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d103      	bne.n	8006274 <xQueueGenericSendFromISR+0x3c>
 800626c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800626e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006270:	2b00      	cmp	r3, #0
 8006272:	d101      	bne.n	8006278 <xQueueGenericSendFromISR+0x40>
 8006274:	2301      	movs	r3, #1
 8006276:	e000      	b.n	800627a <xQueueGenericSendFromISR+0x42>
 8006278:	2300      	movs	r3, #0
 800627a:	2b00      	cmp	r3, #0
 800627c:	d10a      	bne.n	8006294 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800627e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006282:	f383 8811 	msr	BASEPRI, r3
 8006286:	f3bf 8f6f 	isb	sy
 800628a:	f3bf 8f4f 	dsb	sy
 800628e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006290:	bf00      	nop
 8006292:	e7fe      	b.n	8006292 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	2b02      	cmp	r3, #2
 8006298:	d103      	bne.n	80062a2 <xQueueGenericSendFromISR+0x6a>
 800629a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800629c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d101      	bne.n	80062a6 <xQueueGenericSendFromISR+0x6e>
 80062a2:	2301      	movs	r3, #1
 80062a4:	e000      	b.n	80062a8 <xQueueGenericSendFromISR+0x70>
 80062a6:	2300      	movs	r3, #0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d10a      	bne.n	80062c2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80062ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b0:	f383 8811 	msr	BASEPRI, r3
 80062b4:	f3bf 8f6f 	isb	sy
 80062b8:	f3bf 8f4f 	dsb	sy
 80062bc:	623b      	str	r3, [r7, #32]
}
 80062be:	bf00      	nop
 80062c0:	e7fe      	b.n	80062c0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80062c2:	f001 ff29 	bl	8008118 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80062c6:	f3ef 8211 	mrs	r2, BASEPRI
 80062ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ce:	f383 8811 	msr	BASEPRI, r3
 80062d2:	f3bf 8f6f 	isb	sy
 80062d6:	f3bf 8f4f 	dsb	sy
 80062da:	61fa      	str	r2, [r7, #28]
 80062dc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80062de:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80062e0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80062e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d302      	bcc.n	80062f4 <xQueueGenericSendFromISR+0xbc>
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	2b02      	cmp	r3, #2
 80062f2:	d12f      	bne.n	8006354 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80062f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80062fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006302:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006304:	683a      	ldr	r2, [r7, #0]
 8006306:	68b9      	ldr	r1, [r7, #8]
 8006308:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800630a:	f000 f911 	bl	8006530 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800630e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006316:	d112      	bne.n	800633e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800631a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800631c:	2b00      	cmp	r3, #0
 800631e:	d016      	beq.n	800634e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006322:	3324      	adds	r3, #36	; 0x24
 8006324:	4618      	mov	r0, r3
 8006326:	f000 fef7 	bl	8007118 <xTaskRemoveFromEventList>
 800632a:	4603      	mov	r3, r0
 800632c:	2b00      	cmp	r3, #0
 800632e:	d00e      	beq.n	800634e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d00b      	beq.n	800634e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2201      	movs	r2, #1
 800633a:	601a      	str	r2, [r3, #0]
 800633c:	e007      	b.n	800634e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800633e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006342:	3301      	adds	r3, #1
 8006344:	b2db      	uxtb	r3, r3
 8006346:	b25a      	sxtb	r2, r3
 8006348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800634a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800634e:	2301      	movs	r3, #1
 8006350:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006352:	e001      	b.n	8006358 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006354:	2300      	movs	r3, #0
 8006356:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800635a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006362:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006366:	4618      	mov	r0, r3
 8006368:	3740      	adds	r7, #64	; 0x40
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
	...

08006370 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b08c      	sub	sp, #48	; 0x30
 8006374:	af00      	add	r7, sp, #0
 8006376:	60f8      	str	r0, [r7, #12]
 8006378:	60b9      	str	r1, [r7, #8]
 800637a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800637c:	2300      	movs	r3, #0
 800637e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006386:	2b00      	cmp	r3, #0
 8006388:	d10a      	bne.n	80063a0 <xQueueReceive+0x30>
	__asm volatile
 800638a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800638e:	f383 8811 	msr	BASEPRI, r3
 8006392:	f3bf 8f6f 	isb	sy
 8006396:	f3bf 8f4f 	dsb	sy
 800639a:	623b      	str	r3, [r7, #32]
}
 800639c:	bf00      	nop
 800639e:	e7fe      	b.n	800639e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d103      	bne.n	80063ae <xQueueReceive+0x3e>
 80063a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d101      	bne.n	80063b2 <xQueueReceive+0x42>
 80063ae:	2301      	movs	r3, #1
 80063b0:	e000      	b.n	80063b4 <xQueueReceive+0x44>
 80063b2:	2300      	movs	r3, #0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d10a      	bne.n	80063ce <xQueueReceive+0x5e>
	__asm volatile
 80063b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063bc:	f383 8811 	msr	BASEPRI, r3
 80063c0:	f3bf 8f6f 	isb	sy
 80063c4:	f3bf 8f4f 	dsb	sy
 80063c8:	61fb      	str	r3, [r7, #28]
}
 80063ca:	bf00      	nop
 80063cc:	e7fe      	b.n	80063cc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80063ce:	f001 f865 	bl	800749c <xTaskGetSchedulerState>
 80063d2:	4603      	mov	r3, r0
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d102      	bne.n	80063de <xQueueReceive+0x6e>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d101      	bne.n	80063e2 <xQueueReceive+0x72>
 80063de:	2301      	movs	r3, #1
 80063e0:	e000      	b.n	80063e4 <xQueueReceive+0x74>
 80063e2:	2300      	movs	r3, #0
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d10a      	bne.n	80063fe <xQueueReceive+0x8e>
	__asm volatile
 80063e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ec:	f383 8811 	msr	BASEPRI, r3
 80063f0:	f3bf 8f6f 	isb	sy
 80063f4:	f3bf 8f4f 	dsb	sy
 80063f8:	61bb      	str	r3, [r7, #24]
}
 80063fa:	bf00      	nop
 80063fc:	e7fe      	b.n	80063fc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80063fe:	f001 fda9 	bl	8007f54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006406:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640a:	2b00      	cmp	r3, #0
 800640c:	d01f      	beq.n	800644e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800640e:	68b9      	ldr	r1, [r7, #8]
 8006410:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006412:	f000 f8f7 	bl	8006604 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006418:	1e5a      	subs	r2, r3, #1
 800641a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800641c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800641e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006420:	691b      	ldr	r3, [r3, #16]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d00f      	beq.n	8006446 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006428:	3310      	adds	r3, #16
 800642a:	4618      	mov	r0, r3
 800642c:	f000 fe74 	bl	8007118 <xTaskRemoveFromEventList>
 8006430:	4603      	mov	r3, r0
 8006432:	2b00      	cmp	r3, #0
 8006434:	d007      	beq.n	8006446 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006436:	4b3d      	ldr	r3, [pc, #244]	; (800652c <xQueueReceive+0x1bc>)
 8006438:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800643c:	601a      	str	r2, [r3, #0]
 800643e:	f3bf 8f4f 	dsb	sy
 8006442:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006446:	f001 fdb5 	bl	8007fb4 <vPortExitCritical>
				return pdPASS;
 800644a:	2301      	movs	r3, #1
 800644c:	e069      	b.n	8006522 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d103      	bne.n	800645c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006454:	f001 fdae 	bl	8007fb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006458:	2300      	movs	r3, #0
 800645a:	e062      	b.n	8006522 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800645c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800645e:	2b00      	cmp	r3, #0
 8006460:	d106      	bne.n	8006470 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006462:	f107 0310 	add.w	r3, r7, #16
 8006466:	4618      	mov	r0, r3
 8006468:	f000 feba 	bl	80071e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800646c:	2301      	movs	r3, #1
 800646e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006470:	f001 fda0 	bl	8007fb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006474:	f000 fc26 	bl	8006cc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006478:	f001 fd6c 	bl	8007f54 <vPortEnterCritical>
 800647c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800647e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006482:	b25b      	sxtb	r3, r3
 8006484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006488:	d103      	bne.n	8006492 <xQueueReceive+0x122>
 800648a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800648c:	2200      	movs	r2, #0
 800648e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006494:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006498:	b25b      	sxtb	r3, r3
 800649a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800649e:	d103      	bne.n	80064a8 <xQueueReceive+0x138>
 80064a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a2:	2200      	movs	r2, #0
 80064a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064a8:	f001 fd84 	bl	8007fb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80064ac:	1d3a      	adds	r2, r7, #4
 80064ae:	f107 0310 	add.w	r3, r7, #16
 80064b2:	4611      	mov	r1, r2
 80064b4:	4618      	mov	r0, r3
 80064b6:	f000 fea9 	bl	800720c <xTaskCheckForTimeOut>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d123      	bne.n	8006508 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80064c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064c2:	f000 f917 	bl	80066f4 <prvIsQueueEmpty>
 80064c6:	4603      	mov	r3, r0
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d017      	beq.n	80064fc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80064cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ce:	3324      	adds	r3, #36	; 0x24
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	4611      	mov	r1, r2
 80064d4:	4618      	mov	r0, r3
 80064d6:	f000 fdcf 	bl	8007078 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80064da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064dc:	f000 f8b8 	bl	8006650 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80064e0:	f000 fbfe 	bl	8006ce0 <xTaskResumeAll>
 80064e4:	4603      	mov	r3, r0
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d189      	bne.n	80063fe <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80064ea:	4b10      	ldr	r3, [pc, #64]	; (800652c <xQueueReceive+0x1bc>)
 80064ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064f0:	601a      	str	r2, [r3, #0]
 80064f2:	f3bf 8f4f 	dsb	sy
 80064f6:	f3bf 8f6f 	isb	sy
 80064fa:	e780      	b.n	80063fe <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80064fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064fe:	f000 f8a7 	bl	8006650 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006502:	f000 fbed 	bl	8006ce0 <xTaskResumeAll>
 8006506:	e77a      	b.n	80063fe <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006508:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800650a:	f000 f8a1 	bl	8006650 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800650e:	f000 fbe7 	bl	8006ce0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006512:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006514:	f000 f8ee 	bl	80066f4 <prvIsQueueEmpty>
 8006518:	4603      	mov	r3, r0
 800651a:	2b00      	cmp	r3, #0
 800651c:	f43f af6f 	beq.w	80063fe <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006520:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006522:	4618      	mov	r0, r3
 8006524:	3730      	adds	r7, #48	; 0x30
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
 800652a:	bf00      	nop
 800652c:	e000ed04 	.word	0xe000ed04

08006530 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b086      	sub	sp, #24
 8006534:	af00      	add	r7, sp, #0
 8006536:	60f8      	str	r0, [r7, #12]
 8006538:	60b9      	str	r1, [r7, #8]
 800653a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800653c:	2300      	movs	r3, #0
 800653e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006544:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800654a:	2b00      	cmp	r3, #0
 800654c:	d10d      	bne.n	800656a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d14d      	bne.n	80065f2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	4618      	mov	r0, r3
 800655c:	f000 ffbc 	bl	80074d8 <xTaskPriorityDisinherit>
 8006560:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2200      	movs	r2, #0
 8006566:	609a      	str	r2, [r3, #8]
 8006568:	e043      	b.n	80065f2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d119      	bne.n	80065a4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6858      	ldr	r0, [r3, #4]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006578:	461a      	mov	r2, r3
 800657a:	68b9      	ldr	r1, [r7, #8]
 800657c:	f002 f919 	bl	80087b2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	685a      	ldr	r2, [r3, #4]
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006588:	441a      	add	r2, r3
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	685a      	ldr	r2, [r3, #4]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	429a      	cmp	r2, r3
 8006598:	d32b      	bcc.n	80065f2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	605a      	str	r2, [r3, #4]
 80065a2:	e026      	b.n	80065f2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	68d8      	ldr	r0, [r3, #12]
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ac:	461a      	mov	r2, r3
 80065ae:	68b9      	ldr	r1, [r7, #8]
 80065b0:	f002 f8ff 	bl	80087b2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	68da      	ldr	r2, [r3, #12]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065bc:	425b      	negs	r3, r3
 80065be:	441a      	add	r2, r3
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	68da      	ldr	r2, [r3, #12]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d207      	bcs.n	80065e0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	689a      	ldr	r2, [r3, #8]
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d8:	425b      	negs	r3, r3
 80065da:	441a      	add	r2, r3
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2b02      	cmp	r3, #2
 80065e4:	d105      	bne.n	80065f2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d002      	beq.n	80065f2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	3b01      	subs	r3, #1
 80065f0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	1c5a      	adds	r2, r3, #1
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80065fa:	697b      	ldr	r3, [r7, #20]
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3718      	adds	r7, #24
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}

08006604 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b082      	sub	sp, #8
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006612:	2b00      	cmp	r3, #0
 8006614:	d018      	beq.n	8006648 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	68da      	ldr	r2, [r3, #12]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661e:	441a      	add	r2, r3
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	68da      	ldr	r2, [r3, #12]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	429a      	cmp	r2, r3
 800662e:	d303      	bcc.n	8006638 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	68d9      	ldr	r1, [r3, #12]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006640:	461a      	mov	r2, r3
 8006642:	6838      	ldr	r0, [r7, #0]
 8006644:	f002 f8b5 	bl	80087b2 <memcpy>
	}
}
 8006648:	bf00      	nop
 800664a:	3708      	adds	r7, #8
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b084      	sub	sp, #16
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006658:	f001 fc7c 	bl	8007f54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006662:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006664:	e011      	b.n	800668a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800666a:	2b00      	cmp	r3, #0
 800666c:	d012      	beq.n	8006694 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	3324      	adds	r3, #36	; 0x24
 8006672:	4618      	mov	r0, r3
 8006674:	f000 fd50 	bl	8007118 <xTaskRemoveFromEventList>
 8006678:	4603      	mov	r3, r0
 800667a:	2b00      	cmp	r3, #0
 800667c:	d001      	beq.n	8006682 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800667e:	f000 fe27 	bl	80072d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006682:	7bfb      	ldrb	r3, [r7, #15]
 8006684:	3b01      	subs	r3, #1
 8006686:	b2db      	uxtb	r3, r3
 8006688:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800668a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800668e:	2b00      	cmp	r3, #0
 8006690:	dce9      	bgt.n	8006666 <prvUnlockQueue+0x16>
 8006692:	e000      	b.n	8006696 <prvUnlockQueue+0x46>
					break;
 8006694:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	22ff      	movs	r2, #255	; 0xff
 800669a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800669e:	f001 fc89 	bl	8007fb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80066a2:	f001 fc57 	bl	8007f54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80066ac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80066ae:	e011      	b.n	80066d4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	691b      	ldr	r3, [r3, #16]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d012      	beq.n	80066de <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	3310      	adds	r3, #16
 80066bc:	4618      	mov	r0, r3
 80066be:	f000 fd2b 	bl	8007118 <xTaskRemoveFromEventList>
 80066c2:	4603      	mov	r3, r0
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d001      	beq.n	80066cc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80066c8:	f000 fe02 	bl	80072d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80066cc:	7bbb      	ldrb	r3, [r7, #14]
 80066ce:	3b01      	subs	r3, #1
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80066d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	dce9      	bgt.n	80066b0 <prvUnlockQueue+0x60>
 80066dc:	e000      	b.n	80066e0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80066de:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	22ff      	movs	r2, #255	; 0xff
 80066e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80066e8:	f001 fc64 	bl	8007fb4 <vPortExitCritical>
}
 80066ec:	bf00      	nop
 80066ee:	3710      	adds	r7, #16
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b084      	sub	sp, #16
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80066fc:	f001 fc2a 	bl	8007f54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006704:	2b00      	cmp	r3, #0
 8006706:	d102      	bne.n	800670e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006708:	2301      	movs	r3, #1
 800670a:	60fb      	str	r3, [r7, #12]
 800670c:	e001      	b.n	8006712 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800670e:	2300      	movs	r3, #0
 8006710:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006712:	f001 fc4f 	bl	8007fb4 <vPortExitCritical>

	return xReturn;
 8006716:	68fb      	ldr	r3, [r7, #12]
}
 8006718:	4618      	mov	r0, r3
 800671a:	3710      	adds	r7, #16
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b084      	sub	sp, #16
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006728:	f001 fc14 	bl	8007f54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006734:	429a      	cmp	r2, r3
 8006736:	d102      	bne.n	800673e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006738:	2301      	movs	r3, #1
 800673a:	60fb      	str	r3, [r7, #12]
 800673c:	e001      	b.n	8006742 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800673e:	2300      	movs	r3, #0
 8006740:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006742:	f001 fc37 	bl	8007fb4 <vPortExitCritical>

	return xReturn;
 8006746:	68fb      	ldr	r3, [r7, #12]
}
 8006748:	4618      	mov	r0, r3
 800674a:	3710      	adds	r7, #16
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}

08006750 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006750:	b480      	push	{r7}
 8006752:	b085      	sub	sp, #20
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800675a:	2300      	movs	r3, #0
 800675c:	60fb      	str	r3, [r7, #12]
 800675e:	e014      	b.n	800678a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006760:	4a0f      	ldr	r2, [pc, #60]	; (80067a0 <vQueueAddToRegistry+0x50>)
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d10b      	bne.n	8006784 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800676c:	490c      	ldr	r1, [pc, #48]	; (80067a0 <vQueueAddToRegistry+0x50>)
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	683a      	ldr	r2, [r7, #0]
 8006772:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006776:	4a0a      	ldr	r2, [pc, #40]	; (80067a0 <vQueueAddToRegistry+0x50>)
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	00db      	lsls	r3, r3, #3
 800677c:	4413      	add	r3, r2
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006782:	e006      	b.n	8006792 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	3301      	adds	r3, #1
 8006788:	60fb      	str	r3, [r7, #12]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2b07      	cmp	r3, #7
 800678e:	d9e7      	bls.n	8006760 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006790:	bf00      	nop
 8006792:	bf00      	nop
 8006794:	3714      	adds	r7, #20
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr
 800679e:	bf00      	nop
 80067a0:	200029c4 	.word	0x200029c4

080067a4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b086      	sub	sp, #24
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	60f8      	str	r0, [r7, #12]
 80067ac:	60b9      	str	r1, [r7, #8]
 80067ae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80067b4:	f001 fbce 	bl	8007f54 <vPortEnterCritical>
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067be:	b25b      	sxtb	r3, r3
 80067c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067c4:	d103      	bne.n	80067ce <vQueueWaitForMessageRestricted+0x2a>
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	2200      	movs	r2, #0
 80067ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067d4:	b25b      	sxtb	r3, r3
 80067d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067da:	d103      	bne.n	80067e4 <vQueueWaitForMessageRestricted+0x40>
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	2200      	movs	r2, #0
 80067e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067e4:	f001 fbe6 	bl	8007fb4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d106      	bne.n	80067fe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	3324      	adds	r3, #36	; 0x24
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	68b9      	ldr	r1, [r7, #8]
 80067f8:	4618      	mov	r0, r3
 80067fa:	f000 fc61 	bl	80070c0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80067fe:	6978      	ldr	r0, [r7, #20]
 8006800:	f7ff ff26 	bl	8006650 <prvUnlockQueue>
	}
 8006804:	bf00      	nop
 8006806:	3718      	adds	r7, #24
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}

0800680c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800680c:	b580      	push	{r7, lr}
 800680e:	b08e      	sub	sp, #56	; 0x38
 8006810:	af04      	add	r7, sp, #16
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	60b9      	str	r1, [r7, #8]
 8006816:	607a      	str	r2, [r7, #4]
 8006818:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800681a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800681c:	2b00      	cmp	r3, #0
 800681e:	d10a      	bne.n	8006836 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006824:	f383 8811 	msr	BASEPRI, r3
 8006828:	f3bf 8f6f 	isb	sy
 800682c:	f3bf 8f4f 	dsb	sy
 8006830:	623b      	str	r3, [r7, #32]
}
 8006832:	bf00      	nop
 8006834:	e7fe      	b.n	8006834 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006838:	2b00      	cmp	r3, #0
 800683a:	d10a      	bne.n	8006852 <xTaskCreateStatic+0x46>
	__asm volatile
 800683c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006840:	f383 8811 	msr	BASEPRI, r3
 8006844:	f3bf 8f6f 	isb	sy
 8006848:	f3bf 8f4f 	dsb	sy
 800684c:	61fb      	str	r3, [r7, #28]
}
 800684e:	bf00      	nop
 8006850:	e7fe      	b.n	8006850 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006852:	23bc      	movs	r3, #188	; 0xbc
 8006854:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	2bbc      	cmp	r3, #188	; 0xbc
 800685a:	d00a      	beq.n	8006872 <xTaskCreateStatic+0x66>
	__asm volatile
 800685c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006860:	f383 8811 	msr	BASEPRI, r3
 8006864:	f3bf 8f6f 	isb	sy
 8006868:	f3bf 8f4f 	dsb	sy
 800686c:	61bb      	str	r3, [r7, #24]
}
 800686e:	bf00      	nop
 8006870:	e7fe      	b.n	8006870 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006872:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006876:	2b00      	cmp	r3, #0
 8006878:	d01e      	beq.n	80068b8 <xTaskCreateStatic+0xac>
 800687a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800687c:	2b00      	cmp	r3, #0
 800687e:	d01b      	beq.n	80068b8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006882:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006886:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006888:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800688a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688c:	2202      	movs	r2, #2
 800688e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006892:	2300      	movs	r3, #0
 8006894:	9303      	str	r3, [sp, #12]
 8006896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006898:	9302      	str	r3, [sp, #8]
 800689a:	f107 0314 	add.w	r3, r7, #20
 800689e:	9301      	str	r3, [sp, #4]
 80068a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a2:	9300      	str	r3, [sp, #0]
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	68b9      	ldr	r1, [r7, #8]
 80068aa:	68f8      	ldr	r0, [r7, #12]
 80068ac:	f000 f850 	bl	8006950 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80068b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80068b2:	f000 f8f3 	bl	8006a9c <prvAddNewTaskToReadyList>
 80068b6:	e001      	b.n	80068bc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80068b8:	2300      	movs	r3, #0
 80068ba:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80068bc:	697b      	ldr	r3, [r7, #20]
	}
 80068be:	4618      	mov	r0, r3
 80068c0:	3728      	adds	r7, #40	; 0x28
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}

080068c6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80068c6:	b580      	push	{r7, lr}
 80068c8:	b08c      	sub	sp, #48	; 0x30
 80068ca:	af04      	add	r7, sp, #16
 80068cc:	60f8      	str	r0, [r7, #12]
 80068ce:	60b9      	str	r1, [r7, #8]
 80068d0:	603b      	str	r3, [r7, #0]
 80068d2:	4613      	mov	r3, r2
 80068d4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80068d6:	88fb      	ldrh	r3, [r7, #6]
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	4618      	mov	r0, r3
 80068dc:	f001 fc5c 	bl	8008198 <pvPortMalloc>
 80068e0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d00e      	beq.n	8006906 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80068e8:	20bc      	movs	r0, #188	; 0xbc
 80068ea:	f001 fc55 	bl	8008198 <pvPortMalloc>
 80068ee:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80068f0:	69fb      	ldr	r3, [r7, #28]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d003      	beq.n	80068fe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80068f6:	69fb      	ldr	r3, [r7, #28]
 80068f8:	697a      	ldr	r2, [r7, #20]
 80068fa:	631a      	str	r2, [r3, #48]	; 0x30
 80068fc:	e005      	b.n	800690a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80068fe:	6978      	ldr	r0, [r7, #20]
 8006900:	f001 fd16 	bl	8008330 <vPortFree>
 8006904:	e001      	b.n	800690a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006906:	2300      	movs	r3, #0
 8006908:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800690a:	69fb      	ldr	r3, [r7, #28]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d017      	beq.n	8006940 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006910:	69fb      	ldr	r3, [r7, #28]
 8006912:	2200      	movs	r2, #0
 8006914:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006918:	88fa      	ldrh	r2, [r7, #6]
 800691a:	2300      	movs	r3, #0
 800691c:	9303      	str	r3, [sp, #12]
 800691e:	69fb      	ldr	r3, [r7, #28]
 8006920:	9302      	str	r3, [sp, #8]
 8006922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006924:	9301      	str	r3, [sp, #4]
 8006926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006928:	9300      	str	r3, [sp, #0]
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	68b9      	ldr	r1, [r7, #8]
 800692e:	68f8      	ldr	r0, [r7, #12]
 8006930:	f000 f80e 	bl	8006950 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006934:	69f8      	ldr	r0, [r7, #28]
 8006936:	f000 f8b1 	bl	8006a9c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800693a:	2301      	movs	r3, #1
 800693c:	61bb      	str	r3, [r7, #24]
 800693e:	e002      	b.n	8006946 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006940:	f04f 33ff 	mov.w	r3, #4294967295
 8006944:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006946:	69bb      	ldr	r3, [r7, #24]
	}
 8006948:	4618      	mov	r0, r3
 800694a:	3720      	adds	r7, #32
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}

08006950 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b088      	sub	sp, #32
 8006954:	af00      	add	r7, sp, #0
 8006956:	60f8      	str	r0, [r7, #12]
 8006958:	60b9      	str	r1, [r7, #8]
 800695a:	607a      	str	r2, [r7, #4]
 800695c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800695e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006960:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	461a      	mov	r2, r3
 8006968:	21a5      	movs	r1, #165	; 0xa5
 800696a:	f001 ff30 	bl	80087ce <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800696e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006970:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006978:	3b01      	subs	r3, #1
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	4413      	add	r3, r2
 800697e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006980:	69bb      	ldr	r3, [r7, #24]
 8006982:	f023 0307 	bic.w	r3, r3, #7
 8006986:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006988:	69bb      	ldr	r3, [r7, #24]
 800698a:	f003 0307 	and.w	r3, r3, #7
 800698e:	2b00      	cmp	r3, #0
 8006990:	d00a      	beq.n	80069a8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006996:	f383 8811 	msr	BASEPRI, r3
 800699a:	f3bf 8f6f 	isb	sy
 800699e:	f3bf 8f4f 	dsb	sy
 80069a2:	617b      	str	r3, [r7, #20]
}
 80069a4:	bf00      	nop
 80069a6:	e7fe      	b.n	80069a6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d01f      	beq.n	80069ee <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80069ae:	2300      	movs	r3, #0
 80069b0:	61fb      	str	r3, [r7, #28]
 80069b2:	e012      	b.n	80069da <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80069b4:	68ba      	ldr	r2, [r7, #8]
 80069b6:	69fb      	ldr	r3, [r7, #28]
 80069b8:	4413      	add	r3, r2
 80069ba:	7819      	ldrb	r1, [r3, #0]
 80069bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069be:	69fb      	ldr	r3, [r7, #28]
 80069c0:	4413      	add	r3, r2
 80069c2:	3334      	adds	r3, #52	; 0x34
 80069c4:	460a      	mov	r2, r1
 80069c6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80069c8:	68ba      	ldr	r2, [r7, #8]
 80069ca:	69fb      	ldr	r3, [r7, #28]
 80069cc:	4413      	add	r3, r2
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d006      	beq.n	80069e2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80069d4:	69fb      	ldr	r3, [r7, #28]
 80069d6:	3301      	adds	r3, #1
 80069d8:	61fb      	str	r3, [r7, #28]
 80069da:	69fb      	ldr	r3, [r7, #28]
 80069dc:	2b0f      	cmp	r3, #15
 80069de:	d9e9      	bls.n	80069b4 <prvInitialiseNewTask+0x64>
 80069e0:	e000      	b.n	80069e4 <prvInitialiseNewTask+0x94>
			{
				break;
 80069e2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80069e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e6:	2200      	movs	r2, #0
 80069e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80069ec:	e003      	b.n	80069f6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80069ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f0:	2200      	movs	r2, #0
 80069f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80069f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f8:	2b37      	cmp	r3, #55	; 0x37
 80069fa:	d901      	bls.n	8006a00 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80069fc:	2337      	movs	r3, #55	; 0x37
 80069fe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a04:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a0a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a0e:	2200      	movs	r2, #0
 8006a10:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a14:	3304      	adds	r3, #4
 8006a16:	4618      	mov	r0, r3
 8006a18:	f7ff f978 	bl	8005d0c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a1e:	3318      	adds	r3, #24
 8006a20:	4618      	mov	r0, r3
 8006a22:	f7ff f973 	bl	8005d0c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a2a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a2e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a34:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a3a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a46:	2200      	movs	r2, #0
 8006a48:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a4e:	3354      	adds	r3, #84	; 0x54
 8006a50:	2260      	movs	r2, #96	; 0x60
 8006a52:	2100      	movs	r1, #0
 8006a54:	4618      	mov	r0, r3
 8006a56:	f001 feba 	bl	80087ce <memset>
 8006a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a5c:	4a0c      	ldr	r2, [pc, #48]	; (8006a90 <prvInitialiseNewTask+0x140>)
 8006a5e:	659a      	str	r2, [r3, #88]	; 0x58
 8006a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a62:	4a0c      	ldr	r2, [pc, #48]	; (8006a94 <prvInitialiseNewTask+0x144>)
 8006a64:	65da      	str	r2, [r3, #92]	; 0x5c
 8006a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a68:	4a0b      	ldr	r2, [pc, #44]	; (8006a98 <prvInitialiseNewTask+0x148>)
 8006a6a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006a6c:	683a      	ldr	r2, [r7, #0]
 8006a6e:	68f9      	ldr	r1, [r7, #12]
 8006a70:	69b8      	ldr	r0, [r7, #24]
 8006a72:	f001 f941 	bl	8007cf8 <pxPortInitialiseStack>
 8006a76:	4602      	mov	r2, r0
 8006a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a7a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d002      	beq.n	8006a88 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a86:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a88:	bf00      	nop
 8006a8a:	3720      	adds	r7, #32
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}
 8006a90:	08009984 	.word	0x08009984
 8006a94:	080099a4 	.word	0x080099a4
 8006a98:	08009964 	.word	0x08009964

08006a9c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b082      	sub	sp, #8
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006aa4:	f001 fa56 	bl	8007f54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006aa8:	4b2d      	ldr	r3, [pc, #180]	; (8006b60 <prvAddNewTaskToReadyList+0xc4>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	3301      	adds	r3, #1
 8006aae:	4a2c      	ldr	r2, [pc, #176]	; (8006b60 <prvAddNewTaskToReadyList+0xc4>)
 8006ab0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006ab2:	4b2c      	ldr	r3, [pc, #176]	; (8006b64 <prvAddNewTaskToReadyList+0xc8>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d109      	bne.n	8006ace <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006aba:	4a2a      	ldr	r2, [pc, #168]	; (8006b64 <prvAddNewTaskToReadyList+0xc8>)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006ac0:	4b27      	ldr	r3, [pc, #156]	; (8006b60 <prvAddNewTaskToReadyList+0xc4>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d110      	bne.n	8006aea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006ac8:	f000 fc26 	bl	8007318 <prvInitialiseTaskLists>
 8006acc:	e00d      	b.n	8006aea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006ace:	4b26      	ldr	r3, [pc, #152]	; (8006b68 <prvAddNewTaskToReadyList+0xcc>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d109      	bne.n	8006aea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006ad6:	4b23      	ldr	r3, [pc, #140]	; (8006b64 <prvAddNewTaskToReadyList+0xc8>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d802      	bhi.n	8006aea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006ae4:	4a1f      	ldr	r2, [pc, #124]	; (8006b64 <prvAddNewTaskToReadyList+0xc8>)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006aea:	4b20      	ldr	r3, [pc, #128]	; (8006b6c <prvAddNewTaskToReadyList+0xd0>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	3301      	adds	r3, #1
 8006af0:	4a1e      	ldr	r2, [pc, #120]	; (8006b6c <prvAddNewTaskToReadyList+0xd0>)
 8006af2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006af4:	4b1d      	ldr	r3, [pc, #116]	; (8006b6c <prvAddNewTaskToReadyList+0xd0>)
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b00:	4b1b      	ldr	r3, [pc, #108]	; (8006b70 <prvAddNewTaskToReadyList+0xd4>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d903      	bls.n	8006b10 <prvAddNewTaskToReadyList+0x74>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b0c:	4a18      	ldr	r2, [pc, #96]	; (8006b70 <prvAddNewTaskToReadyList+0xd4>)
 8006b0e:	6013      	str	r3, [r2, #0]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b14:	4613      	mov	r3, r2
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	4413      	add	r3, r2
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	4a15      	ldr	r2, [pc, #84]	; (8006b74 <prvAddNewTaskToReadyList+0xd8>)
 8006b1e:	441a      	add	r2, r3
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	3304      	adds	r3, #4
 8006b24:	4619      	mov	r1, r3
 8006b26:	4610      	mov	r0, r2
 8006b28:	f7ff f8fd 	bl	8005d26 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006b2c:	f001 fa42 	bl	8007fb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006b30:	4b0d      	ldr	r3, [pc, #52]	; (8006b68 <prvAddNewTaskToReadyList+0xcc>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d00e      	beq.n	8006b56 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006b38:	4b0a      	ldr	r3, [pc, #40]	; (8006b64 <prvAddNewTaskToReadyList+0xc8>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d207      	bcs.n	8006b56 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006b46:	4b0c      	ldr	r3, [pc, #48]	; (8006b78 <prvAddNewTaskToReadyList+0xdc>)
 8006b48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b4c:	601a      	str	r2, [r3, #0]
 8006b4e:	f3bf 8f4f 	dsb	sy
 8006b52:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b56:	bf00      	nop
 8006b58:	3708      	adds	r7, #8
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	bf00      	nop
 8006b60:	20000d58 	.word	0x20000d58
 8006b64:	20000884 	.word	0x20000884
 8006b68:	20000d64 	.word	0x20000d64
 8006b6c:	20000d74 	.word	0x20000d74
 8006b70:	20000d60 	.word	0x20000d60
 8006b74:	20000888 	.word	0x20000888
 8006b78:	e000ed04 	.word	0xe000ed04

08006b7c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b084      	sub	sp, #16
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006b84:	2300      	movs	r3, #0
 8006b86:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d017      	beq.n	8006bbe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006b8e:	4b13      	ldr	r3, [pc, #76]	; (8006bdc <vTaskDelay+0x60>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d00a      	beq.n	8006bac <vTaskDelay+0x30>
	__asm volatile
 8006b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b9a:	f383 8811 	msr	BASEPRI, r3
 8006b9e:	f3bf 8f6f 	isb	sy
 8006ba2:	f3bf 8f4f 	dsb	sy
 8006ba6:	60bb      	str	r3, [r7, #8]
}
 8006ba8:	bf00      	nop
 8006baa:	e7fe      	b.n	8006baa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006bac:	f000 f88a 	bl	8006cc4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006bb0:	2100      	movs	r1, #0
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 fcfe 	bl	80075b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006bb8:	f000 f892 	bl	8006ce0 <xTaskResumeAll>
 8006bbc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d107      	bne.n	8006bd4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006bc4:	4b06      	ldr	r3, [pc, #24]	; (8006be0 <vTaskDelay+0x64>)
 8006bc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bca:	601a      	str	r2, [r3, #0]
 8006bcc:	f3bf 8f4f 	dsb	sy
 8006bd0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006bd4:	bf00      	nop
 8006bd6:	3710      	adds	r7, #16
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}
 8006bdc:	20000d80 	.word	0x20000d80
 8006be0:	e000ed04 	.word	0xe000ed04

08006be4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b08a      	sub	sp, #40	; 0x28
 8006be8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006bea:	2300      	movs	r3, #0
 8006bec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006bf2:	463a      	mov	r2, r7
 8006bf4:	1d39      	adds	r1, r7, #4
 8006bf6:	f107 0308 	add.w	r3, r7, #8
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f7ff f832 	bl	8005c64 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006c00:	6839      	ldr	r1, [r7, #0]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	68ba      	ldr	r2, [r7, #8]
 8006c06:	9202      	str	r2, [sp, #8]
 8006c08:	9301      	str	r3, [sp, #4]
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	9300      	str	r3, [sp, #0]
 8006c0e:	2300      	movs	r3, #0
 8006c10:	460a      	mov	r2, r1
 8006c12:	4924      	ldr	r1, [pc, #144]	; (8006ca4 <vTaskStartScheduler+0xc0>)
 8006c14:	4824      	ldr	r0, [pc, #144]	; (8006ca8 <vTaskStartScheduler+0xc4>)
 8006c16:	f7ff fdf9 	bl	800680c <xTaskCreateStatic>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	4a23      	ldr	r2, [pc, #140]	; (8006cac <vTaskStartScheduler+0xc8>)
 8006c1e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006c20:	4b22      	ldr	r3, [pc, #136]	; (8006cac <vTaskStartScheduler+0xc8>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d002      	beq.n	8006c2e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	617b      	str	r3, [r7, #20]
 8006c2c:	e001      	b.n	8006c32 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d102      	bne.n	8006c3e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006c38:	f000 fd10 	bl	800765c <xTimerCreateTimerTask>
 8006c3c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d11b      	bne.n	8006c7c <vTaskStartScheduler+0x98>
	__asm volatile
 8006c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c48:	f383 8811 	msr	BASEPRI, r3
 8006c4c:	f3bf 8f6f 	isb	sy
 8006c50:	f3bf 8f4f 	dsb	sy
 8006c54:	613b      	str	r3, [r7, #16]
}
 8006c56:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006c58:	4b15      	ldr	r3, [pc, #84]	; (8006cb0 <vTaskStartScheduler+0xcc>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	3354      	adds	r3, #84	; 0x54
 8006c5e:	4a15      	ldr	r2, [pc, #84]	; (8006cb4 <vTaskStartScheduler+0xd0>)
 8006c60:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006c62:	4b15      	ldr	r3, [pc, #84]	; (8006cb8 <vTaskStartScheduler+0xd4>)
 8006c64:	f04f 32ff 	mov.w	r2, #4294967295
 8006c68:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006c6a:	4b14      	ldr	r3, [pc, #80]	; (8006cbc <vTaskStartScheduler+0xd8>)
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006c70:	4b13      	ldr	r3, [pc, #76]	; (8006cc0 <vTaskStartScheduler+0xdc>)
 8006c72:	2200      	movs	r2, #0
 8006c74:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006c76:	f001 f8cb 	bl	8007e10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006c7a:	e00e      	b.n	8006c9a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c82:	d10a      	bne.n	8006c9a <vTaskStartScheduler+0xb6>
	__asm volatile
 8006c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c88:	f383 8811 	msr	BASEPRI, r3
 8006c8c:	f3bf 8f6f 	isb	sy
 8006c90:	f3bf 8f4f 	dsb	sy
 8006c94:	60fb      	str	r3, [r7, #12]
}
 8006c96:	bf00      	nop
 8006c98:	e7fe      	b.n	8006c98 <vTaskStartScheduler+0xb4>
}
 8006c9a:	bf00      	nop
 8006c9c:	3718      	adds	r7, #24
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	bf00      	nop
 8006ca4:	080098bc 	.word	0x080098bc
 8006ca8:	080072e9 	.word	0x080072e9
 8006cac:	20000d7c 	.word	0x20000d7c
 8006cb0:	20000884 	.word	0x20000884
 8006cb4:	20000080 	.word	0x20000080
 8006cb8:	20000d78 	.word	0x20000d78
 8006cbc:	20000d64 	.word	0x20000d64
 8006cc0:	20000d5c 	.word	0x20000d5c

08006cc4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006cc8:	4b04      	ldr	r3, [pc, #16]	; (8006cdc <vTaskSuspendAll+0x18>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	3301      	adds	r3, #1
 8006cce:	4a03      	ldr	r2, [pc, #12]	; (8006cdc <vTaskSuspendAll+0x18>)
 8006cd0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006cd2:	bf00      	nop
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr
 8006cdc:	20000d80 	.word	0x20000d80

08006ce0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006cea:	2300      	movs	r3, #0
 8006cec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006cee:	4b42      	ldr	r3, [pc, #264]	; (8006df8 <xTaskResumeAll+0x118>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d10a      	bne.n	8006d0c <xTaskResumeAll+0x2c>
	__asm volatile
 8006cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cfa:	f383 8811 	msr	BASEPRI, r3
 8006cfe:	f3bf 8f6f 	isb	sy
 8006d02:	f3bf 8f4f 	dsb	sy
 8006d06:	603b      	str	r3, [r7, #0]
}
 8006d08:	bf00      	nop
 8006d0a:	e7fe      	b.n	8006d0a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006d0c:	f001 f922 	bl	8007f54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006d10:	4b39      	ldr	r3, [pc, #228]	; (8006df8 <xTaskResumeAll+0x118>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	3b01      	subs	r3, #1
 8006d16:	4a38      	ldr	r2, [pc, #224]	; (8006df8 <xTaskResumeAll+0x118>)
 8006d18:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d1a:	4b37      	ldr	r3, [pc, #220]	; (8006df8 <xTaskResumeAll+0x118>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d162      	bne.n	8006de8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006d22:	4b36      	ldr	r3, [pc, #216]	; (8006dfc <xTaskResumeAll+0x11c>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d05e      	beq.n	8006de8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d2a:	e02f      	b.n	8006d8c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d2c:	4b34      	ldr	r3, [pc, #208]	; (8006e00 <xTaskResumeAll+0x120>)
 8006d2e:	68db      	ldr	r3, [r3, #12]
 8006d30:	68db      	ldr	r3, [r3, #12]
 8006d32:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	3318      	adds	r3, #24
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f7ff f851 	bl	8005de0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	3304      	adds	r3, #4
 8006d42:	4618      	mov	r0, r3
 8006d44:	f7ff f84c 	bl	8005de0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d4c:	4b2d      	ldr	r3, [pc, #180]	; (8006e04 <xTaskResumeAll+0x124>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d903      	bls.n	8006d5c <xTaskResumeAll+0x7c>
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d58:	4a2a      	ldr	r2, [pc, #168]	; (8006e04 <xTaskResumeAll+0x124>)
 8006d5a:	6013      	str	r3, [r2, #0]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d60:	4613      	mov	r3, r2
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	4413      	add	r3, r2
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	4a27      	ldr	r2, [pc, #156]	; (8006e08 <xTaskResumeAll+0x128>)
 8006d6a:	441a      	add	r2, r3
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	3304      	adds	r3, #4
 8006d70:	4619      	mov	r1, r3
 8006d72:	4610      	mov	r0, r2
 8006d74:	f7fe ffd7 	bl	8005d26 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d7c:	4b23      	ldr	r3, [pc, #140]	; (8006e0c <xTaskResumeAll+0x12c>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d302      	bcc.n	8006d8c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006d86:	4b22      	ldr	r3, [pc, #136]	; (8006e10 <xTaskResumeAll+0x130>)
 8006d88:	2201      	movs	r2, #1
 8006d8a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d8c:	4b1c      	ldr	r3, [pc, #112]	; (8006e00 <xTaskResumeAll+0x120>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d1cb      	bne.n	8006d2c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d001      	beq.n	8006d9e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006d9a:	f000 fb5f 	bl	800745c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006d9e:	4b1d      	ldr	r3, [pc, #116]	; (8006e14 <xTaskResumeAll+0x134>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d010      	beq.n	8006dcc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006daa:	f000 f847 	bl	8006e3c <xTaskIncrementTick>
 8006dae:	4603      	mov	r3, r0
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d002      	beq.n	8006dba <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006db4:	4b16      	ldr	r3, [pc, #88]	; (8006e10 <xTaskResumeAll+0x130>)
 8006db6:	2201      	movs	r2, #1
 8006db8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	3b01      	subs	r3, #1
 8006dbe:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d1f1      	bne.n	8006daa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006dc6:	4b13      	ldr	r3, [pc, #76]	; (8006e14 <xTaskResumeAll+0x134>)
 8006dc8:	2200      	movs	r2, #0
 8006dca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006dcc:	4b10      	ldr	r3, [pc, #64]	; (8006e10 <xTaskResumeAll+0x130>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d009      	beq.n	8006de8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006dd8:	4b0f      	ldr	r3, [pc, #60]	; (8006e18 <xTaskResumeAll+0x138>)
 8006dda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dde:	601a      	str	r2, [r3, #0]
 8006de0:	f3bf 8f4f 	dsb	sy
 8006de4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006de8:	f001 f8e4 	bl	8007fb4 <vPortExitCritical>

	return xAlreadyYielded;
 8006dec:	68bb      	ldr	r3, [r7, #8]
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3710      	adds	r7, #16
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	20000d80 	.word	0x20000d80
 8006dfc:	20000d58 	.word	0x20000d58
 8006e00:	20000d18 	.word	0x20000d18
 8006e04:	20000d60 	.word	0x20000d60
 8006e08:	20000888 	.word	0x20000888
 8006e0c:	20000884 	.word	0x20000884
 8006e10:	20000d6c 	.word	0x20000d6c
 8006e14:	20000d68 	.word	0x20000d68
 8006e18:	e000ed04 	.word	0xe000ed04

08006e1c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b083      	sub	sp, #12
 8006e20:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006e22:	4b05      	ldr	r3, [pc, #20]	; (8006e38 <xTaskGetTickCount+0x1c>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006e28:	687b      	ldr	r3, [r7, #4]
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	370c      	adds	r7, #12
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr
 8006e36:	bf00      	nop
 8006e38:	20000d5c 	.word	0x20000d5c

08006e3c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b086      	sub	sp, #24
 8006e40:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006e42:	2300      	movs	r3, #0
 8006e44:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e46:	4b4f      	ldr	r3, [pc, #316]	; (8006f84 <xTaskIncrementTick+0x148>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	f040 808f 	bne.w	8006f6e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006e50:	4b4d      	ldr	r3, [pc, #308]	; (8006f88 <xTaskIncrementTick+0x14c>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	3301      	adds	r3, #1
 8006e56:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006e58:	4a4b      	ldr	r2, [pc, #300]	; (8006f88 <xTaskIncrementTick+0x14c>)
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d120      	bne.n	8006ea6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006e64:	4b49      	ldr	r3, [pc, #292]	; (8006f8c <xTaskIncrementTick+0x150>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d00a      	beq.n	8006e84 <xTaskIncrementTick+0x48>
	__asm volatile
 8006e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e72:	f383 8811 	msr	BASEPRI, r3
 8006e76:	f3bf 8f6f 	isb	sy
 8006e7a:	f3bf 8f4f 	dsb	sy
 8006e7e:	603b      	str	r3, [r7, #0]
}
 8006e80:	bf00      	nop
 8006e82:	e7fe      	b.n	8006e82 <xTaskIncrementTick+0x46>
 8006e84:	4b41      	ldr	r3, [pc, #260]	; (8006f8c <xTaskIncrementTick+0x150>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	60fb      	str	r3, [r7, #12]
 8006e8a:	4b41      	ldr	r3, [pc, #260]	; (8006f90 <xTaskIncrementTick+0x154>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a3f      	ldr	r2, [pc, #252]	; (8006f8c <xTaskIncrementTick+0x150>)
 8006e90:	6013      	str	r3, [r2, #0]
 8006e92:	4a3f      	ldr	r2, [pc, #252]	; (8006f90 <xTaskIncrementTick+0x154>)
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	6013      	str	r3, [r2, #0]
 8006e98:	4b3e      	ldr	r3, [pc, #248]	; (8006f94 <xTaskIncrementTick+0x158>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	3301      	adds	r3, #1
 8006e9e:	4a3d      	ldr	r2, [pc, #244]	; (8006f94 <xTaskIncrementTick+0x158>)
 8006ea0:	6013      	str	r3, [r2, #0]
 8006ea2:	f000 fadb 	bl	800745c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006ea6:	4b3c      	ldr	r3, [pc, #240]	; (8006f98 <xTaskIncrementTick+0x15c>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	693a      	ldr	r2, [r7, #16]
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d349      	bcc.n	8006f44 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006eb0:	4b36      	ldr	r3, [pc, #216]	; (8006f8c <xTaskIncrementTick+0x150>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d104      	bne.n	8006ec4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006eba:	4b37      	ldr	r3, [pc, #220]	; (8006f98 <xTaskIncrementTick+0x15c>)
 8006ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8006ec0:	601a      	str	r2, [r3, #0]
					break;
 8006ec2:	e03f      	b.n	8006f44 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ec4:	4b31      	ldr	r3, [pc, #196]	; (8006f8c <xTaskIncrementTick+0x150>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	68db      	ldr	r3, [r3, #12]
 8006eca:	68db      	ldr	r3, [r3, #12]
 8006ecc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006ed4:	693a      	ldr	r2, [r7, #16]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d203      	bcs.n	8006ee4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006edc:	4a2e      	ldr	r2, [pc, #184]	; (8006f98 <xTaskIncrementTick+0x15c>)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006ee2:	e02f      	b.n	8006f44 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	3304      	adds	r3, #4
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f7fe ff79 	bl	8005de0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d004      	beq.n	8006f00 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	3318      	adds	r3, #24
 8006efa:	4618      	mov	r0, r3
 8006efc:	f7fe ff70 	bl	8005de0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f04:	4b25      	ldr	r3, [pc, #148]	; (8006f9c <xTaskIncrementTick+0x160>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d903      	bls.n	8006f14 <xTaskIncrementTick+0xd8>
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f10:	4a22      	ldr	r2, [pc, #136]	; (8006f9c <xTaskIncrementTick+0x160>)
 8006f12:	6013      	str	r3, [r2, #0]
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f18:	4613      	mov	r3, r2
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	4413      	add	r3, r2
 8006f1e:	009b      	lsls	r3, r3, #2
 8006f20:	4a1f      	ldr	r2, [pc, #124]	; (8006fa0 <xTaskIncrementTick+0x164>)
 8006f22:	441a      	add	r2, r3
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	3304      	adds	r3, #4
 8006f28:	4619      	mov	r1, r3
 8006f2a:	4610      	mov	r0, r2
 8006f2c:	f7fe fefb 	bl	8005d26 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f34:	4b1b      	ldr	r3, [pc, #108]	; (8006fa4 <xTaskIncrementTick+0x168>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d3b8      	bcc.n	8006eb0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f42:	e7b5      	b.n	8006eb0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006f44:	4b17      	ldr	r3, [pc, #92]	; (8006fa4 <xTaskIncrementTick+0x168>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f4a:	4915      	ldr	r1, [pc, #84]	; (8006fa0 <xTaskIncrementTick+0x164>)
 8006f4c:	4613      	mov	r3, r2
 8006f4e:	009b      	lsls	r3, r3, #2
 8006f50:	4413      	add	r3, r2
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	440b      	add	r3, r1
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d901      	bls.n	8006f60 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006f60:	4b11      	ldr	r3, [pc, #68]	; (8006fa8 <xTaskIncrementTick+0x16c>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d007      	beq.n	8006f78 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	617b      	str	r3, [r7, #20]
 8006f6c:	e004      	b.n	8006f78 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006f6e:	4b0f      	ldr	r3, [pc, #60]	; (8006fac <xTaskIncrementTick+0x170>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	3301      	adds	r3, #1
 8006f74:	4a0d      	ldr	r2, [pc, #52]	; (8006fac <xTaskIncrementTick+0x170>)
 8006f76:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006f78:	697b      	ldr	r3, [r7, #20]
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3718      	adds	r7, #24
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}
 8006f82:	bf00      	nop
 8006f84:	20000d80 	.word	0x20000d80
 8006f88:	20000d5c 	.word	0x20000d5c
 8006f8c:	20000d10 	.word	0x20000d10
 8006f90:	20000d14 	.word	0x20000d14
 8006f94:	20000d70 	.word	0x20000d70
 8006f98:	20000d78 	.word	0x20000d78
 8006f9c:	20000d60 	.word	0x20000d60
 8006fa0:	20000888 	.word	0x20000888
 8006fa4:	20000884 	.word	0x20000884
 8006fa8:	20000d6c 	.word	0x20000d6c
 8006fac:	20000d68 	.word	0x20000d68

08006fb0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b085      	sub	sp, #20
 8006fb4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006fb6:	4b2a      	ldr	r3, [pc, #168]	; (8007060 <vTaskSwitchContext+0xb0>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d003      	beq.n	8006fc6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006fbe:	4b29      	ldr	r3, [pc, #164]	; (8007064 <vTaskSwitchContext+0xb4>)
 8006fc0:	2201      	movs	r2, #1
 8006fc2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006fc4:	e046      	b.n	8007054 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006fc6:	4b27      	ldr	r3, [pc, #156]	; (8007064 <vTaskSwitchContext+0xb4>)
 8006fc8:	2200      	movs	r2, #0
 8006fca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fcc:	4b26      	ldr	r3, [pc, #152]	; (8007068 <vTaskSwitchContext+0xb8>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	60fb      	str	r3, [r7, #12]
 8006fd2:	e010      	b.n	8006ff6 <vTaskSwitchContext+0x46>
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d10a      	bne.n	8006ff0 <vTaskSwitchContext+0x40>
	__asm volatile
 8006fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fde:	f383 8811 	msr	BASEPRI, r3
 8006fe2:	f3bf 8f6f 	isb	sy
 8006fe6:	f3bf 8f4f 	dsb	sy
 8006fea:	607b      	str	r3, [r7, #4]
}
 8006fec:	bf00      	nop
 8006fee:	e7fe      	b.n	8006fee <vTaskSwitchContext+0x3e>
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	3b01      	subs	r3, #1
 8006ff4:	60fb      	str	r3, [r7, #12]
 8006ff6:	491d      	ldr	r1, [pc, #116]	; (800706c <vTaskSwitchContext+0xbc>)
 8006ff8:	68fa      	ldr	r2, [r7, #12]
 8006ffa:	4613      	mov	r3, r2
 8006ffc:	009b      	lsls	r3, r3, #2
 8006ffe:	4413      	add	r3, r2
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	440b      	add	r3, r1
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d0e4      	beq.n	8006fd4 <vTaskSwitchContext+0x24>
 800700a:	68fa      	ldr	r2, [r7, #12]
 800700c:	4613      	mov	r3, r2
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	4413      	add	r3, r2
 8007012:	009b      	lsls	r3, r3, #2
 8007014:	4a15      	ldr	r2, [pc, #84]	; (800706c <vTaskSwitchContext+0xbc>)
 8007016:	4413      	add	r3, r2
 8007018:	60bb      	str	r3, [r7, #8]
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	685a      	ldr	r2, [r3, #4]
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	605a      	str	r2, [r3, #4]
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	685a      	ldr	r2, [r3, #4]
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	3308      	adds	r3, #8
 800702c:	429a      	cmp	r2, r3
 800702e:	d104      	bne.n	800703a <vTaskSwitchContext+0x8a>
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	685a      	ldr	r2, [r3, #4]
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	605a      	str	r2, [r3, #4]
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	68db      	ldr	r3, [r3, #12]
 8007040:	4a0b      	ldr	r2, [pc, #44]	; (8007070 <vTaskSwitchContext+0xc0>)
 8007042:	6013      	str	r3, [r2, #0]
 8007044:	4a08      	ldr	r2, [pc, #32]	; (8007068 <vTaskSwitchContext+0xb8>)
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800704a:	4b09      	ldr	r3, [pc, #36]	; (8007070 <vTaskSwitchContext+0xc0>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	3354      	adds	r3, #84	; 0x54
 8007050:	4a08      	ldr	r2, [pc, #32]	; (8007074 <vTaskSwitchContext+0xc4>)
 8007052:	6013      	str	r3, [r2, #0]
}
 8007054:	bf00      	nop
 8007056:	3714      	adds	r7, #20
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr
 8007060:	20000d80 	.word	0x20000d80
 8007064:	20000d6c 	.word	0x20000d6c
 8007068:	20000d60 	.word	0x20000d60
 800706c:	20000888 	.word	0x20000888
 8007070:	20000884 	.word	0x20000884
 8007074:	20000080 	.word	0x20000080

08007078 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b084      	sub	sp, #16
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d10a      	bne.n	800709e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800708c:	f383 8811 	msr	BASEPRI, r3
 8007090:	f3bf 8f6f 	isb	sy
 8007094:	f3bf 8f4f 	dsb	sy
 8007098:	60fb      	str	r3, [r7, #12]
}
 800709a:	bf00      	nop
 800709c:	e7fe      	b.n	800709c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800709e:	4b07      	ldr	r3, [pc, #28]	; (80070bc <vTaskPlaceOnEventList+0x44>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	3318      	adds	r3, #24
 80070a4:	4619      	mov	r1, r3
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f7fe fe61 	bl	8005d6e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80070ac:	2101      	movs	r1, #1
 80070ae:	6838      	ldr	r0, [r7, #0]
 80070b0:	f000 fa80 	bl	80075b4 <prvAddCurrentTaskToDelayedList>
}
 80070b4:	bf00      	nop
 80070b6:	3710      	adds	r7, #16
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}
 80070bc:	20000884 	.word	0x20000884

080070c0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b086      	sub	sp, #24
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	60f8      	str	r0, [r7, #12]
 80070c8:	60b9      	str	r1, [r7, #8]
 80070ca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d10a      	bne.n	80070e8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80070d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d6:	f383 8811 	msr	BASEPRI, r3
 80070da:	f3bf 8f6f 	isb	sy
 80070de:	f3bf 8f4f 	dsb	sy
 80070e2:	617b      	str	r3, [r7, #20]
}
 80070e4:	bf00      	nop
 80070e6:	e7fe      	b.n	80070e6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80070e8:	4b0a      	ldr	r3, [pc, #40]	; (8007114 <vTaskPlaceOnEventListRestricted+0x54>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	3318      	adds	r3, #24
 80070ee:	4619      	mov	r1, r3
 80070f0:	68f8      	ldr	r0, [r7, #12]
 80070f2:	f7fe fe18 	bl	8005d26 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d002      	beq.n	8007102 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80070fc:	f04f 33ff 	mov.w	r3, #4294967295
 8007100:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007102:	6879      	ldr	r1, [r7, #4]
 8007104:	68b8      	ldr	r0, [r7, #8]
 8007106:	f000 fa55 	bl	80075b4 <prvAddCurrentTaskToDelayedList>
	}
 800710a:	bf00      	nop
 800710c:	3718      	adds	r7, #24
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}
 8007112:	bf00      	nop
 8007114:	20000884 	.word	0x20000884

08007118 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b086      	sub	sp, #24
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	68db      	ldr	r3, [r3, #12]
 8007124:	68db      	ldr	r3, [r3, #12]
 8007126:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d10a      	bne.n	8007144 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800712e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007132:	f383 8811 	msr	BASEPRI, r3
 8007136:	f3bf 8f6f 	isb	sy
 800713a:	f3bf 8f4f 	dsb	sy
 800713e:	60fb      	str	r3, [r7, #12]
}
 8007140:	bf00      	nop
 8007142:	e7fe      	b.n	8007142 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	3318      	adds	r3, #24
 8007148:	4618      	mov	r0, r3
 800714a:	f7fe fe49 	bl	8005de0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800714e:	4b1e      	ldr	r3, [pc, #120]	; (80071c8 <xTaskRemoveFromEventList+0xb0>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d11d      	bne.n	8007192 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	3304      	adds	r3, #4
 800715a:	4618      	mov	r0, r3
 800715c:	f7fe fe40 	bl	8005de0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007164:	4b19      	ldr	r3, [pc, #100]	; (80071cc <xTaskRemoveFromEventList+0xb4>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	429a      	cmp	r2, r3
 800716a:	d903      	bls.n	8007174 <xTaskRemoveFromEventList+0x5c>
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007170:	4a16      	ldr	r2, [pc, #88]	; (80071cc <xTaskRemoveFromEventList+0xb4>)
 8007172:	6013      	str	r3, [r2, #0]
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007178:	4613      	mov	r3, r2
 800717a:	009b      	lsls	r3, r3, #2
 800717c:	4413      	add	r3, r2
 800717e:	009b      	lsls	r3, r3, #2
 8007180:	4a13      	ldr	r2, [pc, #76]	; (80071d0 <xTaskRemoveFromEventList+0xb8>)
 8007182:	441a      	add	r2, r3
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	3304      	adds	r3, #4
 8007188:	4619      	mov	r1, r3
 800718a:	4610      	mov	r0, r2
 800718c:	f7fe fdcb 	bl	8005d26 <vListInsertEnd>
 8007190:	e005      	b.n	800719e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	3318      	adds	r3, #24
 8007196:	4619      	mov	r1, r3
 8007198:	480e      	ldr	r0, [pc, #56]	; (80071d4 <xTaskRemoveFromEventList+0xbc>)
 800719a:	f7fe fdc4 	bl	8005d26 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071a2:	4b0d      	ldr	r3, [pc, #52]	; (80071d8 <xTaskRemoveFromEventList+0xc0>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d905      	bls.n	80071b8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80071ac:	2301      	movs	r3, #1
 80071ae:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80071b0:	4b0a      	ldr	r3, [pc, #40]	; (80071dc <xTaskRemoveFromEventList+0xc4>)
 80071b2:	2201      	movs	r2, #1
 80071b4:	601a      	str	r2, [r3, #0]
 80071b6:	e001      	b.n	80071bc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80071b8:	2300      	movs	r3, #0
 80071ba:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80071bc:	697b      	ldr	r3, [r7, #20]
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3718      	adds	r7, #24
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	bf00      	nop
 80071c8:	20000d80 	.word	0x20000d80
 80071cc:	20000d60 	.word	0x20000d60
 80071d0:	20000888 	.word	0x20000888
 80071d4:	20000d18 	.word	0x20000d18
 80071d8:	20000884 	.word	0x20000884
 80071dc:	20000d6c 	.word	0x20000d6c

080071e0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80071e0:	b480      	push	{r7}
 80071e2:	b083      	sub	sp, #12
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80071e8:	4b06      	ldr	r3, [pc, #24]	; (8007204 <vTaskInternalSetTimeOutState+0x24>)
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80071f0:	4b05      	ldr	r3, [pc, #20]	; (8007208 <vTaskInternalSetTimeOutState+0x28>)
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	605a      	str	r2, [r3, #4]
}
 80071f8:	bf00      	nop
 80071fa:	370c      	adds	r7, #12
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr
 8007204:	20000d70 	.word	0x20000d70
 8007208:	20000d5c 	.word	0x20000d5c

0800720c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b088      	sub	sp, #32
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d10a      	bne.n	8007232 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800721c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007220:	f383 8811 	msr	BASEPRI, r3
 8007224:	f3bf 8f6f 	isb	sy
 8007228:	f3bf 8f4f 	dsb	sy
 800722c:	613b      	str	r3, [r7, #16]
}
 800722e:	bf00      	nop
 8007230:	e7fe      	b.n	8007230 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d10a      	bne.n	800724e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800723c:	f383 8811 	msr	BASEPRI, r3
 8007240:	f3bf 8f6f 	isb	sy
 8007244:	f3bf 8f4f 	dsb	sy
 8007248:	60fb      	str	r3, [r7, #12]
}
 800724a:	bf00      	nop
 800724c:	e7fe      	b.n	800724c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800724e:	f000 fe81 	bl	8007f54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007252:	4b1d      	ldr	r3, [pc, #116]	; (80072c8 <xTaskCheckForTimeOut+0xbc>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	69ba      	ldr	r2, [r7, #24]
 800725e:	1ad3      	subs	r3, r2, r3
 8007260:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800726a:	d102      	bne.n	8007272 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800726c:	2300      	movs	r3, #0
 800726e:	61fb      	str	r3, [r7, #28]
 8007270:	e023      	b.n	80072ba <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	4b15      	ldr	r3, [pc, #84]	; (80072cc <xTaskCheckForTimeOut+0xc0>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	429a      	cmp	r2, r3
 800727c:	d007      	beq.n	800728e <xTaskCheckForTimeOut+0x82>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	69ba      	ldr	r2, [r7, #24]
 8007284:	429a      	cmp	r2, r3
 8007286:	d302      	bcc.n	800728e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007288:	2301      	movs	r3, #1
 800728a:	61fb      	str	r3, [r7, #28]
 800728c:	e015      	b.n	80072ba <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	697a      	ldr	r2, [r7, #20]
 8007294:	429a      	cmp	r2, r3
 8007296:	d20b      	bcs.n	80072b0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	681a      	ldr	r2, [r3, #0]
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	1ad2      	subs	r2, r2, r3
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f7ff ff9b 	bl	80071e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80072aa:	2300      	movs	r3, #0
 80072ac:	61fb      	str	r3, [r7, #28]
 80072ae:	e004      	b.n	80072ba <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	2200      	movs	r2, #0
 80072b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80072b6:	2301      	movs	r3, #1
 80072b8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80072ba:	f000 fe7b 	bl	8007fb4 <vPortExitCritical>

	return xReturn;
 80072be:	69fb      	ldr	r3, [r7, #28]
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3720      	adds	r7, #32
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}
 80072c8:	20000d5c 	.word	0x20000d5c
 80072cc:	20000d70 	.word	0x20000d70

080072d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80072d0:	b480      	push	{r7}
 80072d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80072d4:	4b03      	ldr	r3, [pc, #12]	; (80072e4 <vTaskMissedYield+0x14>)
 80072d6:	2201      	movs	r2, #1
 80072d8:	601a      	str	r2, [r3, #0]
}
 80072da:	bf00      	nop
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr
 80072e4:	20000d6c 	.word	0x20000d6c

080072e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b082      	sub	sp, #8
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80072f0:	f000 f852 	bl	8007398 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80072f4:	4b06      	ldr	r3, [pc, #24]	; (8007310 <prvIdleTask+0x28>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d9f9      	bls.n	80072f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80072fc:	4b05      	ldr	r3, [pc, #20]	; (8007314 <prvIdleTask+0x2c>)
 80072fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007302:	601a      	str	r2, [r3, #0]
 8007304:	f3bf 8f4f 	dsb	sy
 8007308:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800730c:	e7f0      	b.n	80072f0 <prvIdleTask+0x8>
 800730e:	bf00      	nop
 8007310:	20000888 	.word	0x20000888
 8007314:	e000ed04 	.word	0xe000ed04

08007318 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800731e:	2300      	movs	r3, #0
 8007320:	607b      	str	r3, [r7, #4]
 8007322:	e00c      	b.n	800733e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	4613      	mov	r3, r2
 8007328:	009b      	lsls	r3, r3, #2
 800732a:	4413      	add	r3, r2
 800732c:	009b      	lsls	r3, r3, #2
 800732e:	4a12      	ldr	r2, [pc, #72]	; (8007378 <prvInitialiseTaskLists+0x60>)
 8007330:	4413      	add	r3, r2
 8007332:	4618      	mov	r0, r3
 8007334:	f7fe fcca 	bl	8005ccc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	3301      	adds	r3, #1
 800733c:	607b      	str	r3, [r7, #4]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2b37      	cmp	r3, #55	; 0x37
 8007342:	d9ef      	bls.n	8007324 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007344:	480d      	ldr	r0, [pc, #52]	; (800737c <prvInitialiseTaskLists+0x64>)
 8007346:	f7fe fcc1 	bl	8005ccc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800734a:	480d      	ldr	r0, [pc, #52]	; (8007380 <prvInitialiseTaskLists+0x68>)
 800734c:	f7fe fcbe 	bl	8005ccc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007350:	480c      	ldr	r0, [pc, #48]	; (8007384 <prvInitialiseTaskLists+0x6c>)
 8007352:	f7fe fcbb 	bl	8005ccc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007356:	480c      	ldr	r0, [pc, #48]	; (8007388 <prvInitialiseTaskLists+0x70>)
 8007358:	f7fe fcb8 	bl	8005ccc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800735c:	480b      	ldr	r0, [pc, #44]	; (800738c <prvInitialiseTaskLists+0x74>)
 800735e:	f7fe fcb5 	bl	8005ccc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007362:	4b0b      	ldr	r3, [pc, #44]	; (8007390 <prvInitialiseTaskLists+0x78>)
 8007364:	4a05      	ldr	r2, [pc, #20]	; (800737c <prvInitialiseTaskLists+0x64>)
 8007366:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007368:	4b0a      	ldr	r3, [pc, #40]	; (8007394 <prvInitialiseTaskLists+0x7c>)
 800736a:	4a05      	ldr	r2, [pc, #20]	; (8007380 <prvInitialiseTaskLists+0x68>)
 800736c:	601a      	str	r2, [r3, #0]
}
 800736e:	bf00      	nop
 8007370:	3708      	adds	r7, #8
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}
 8007376:	bf00      	nop
 8007378:	20000888 	.word	0x20000888
 800737c:	20000ce8 	.word	0x20000ce8
 8007380:	20000cfc 	.word	0x20000cfc
 8007384:	20000d18 	.word	0x20000d18
 8007388:	20000d2c 	.word	0x20000d2c
 800738c:	20000d44 	.word	0x20000d44
 8007390:	20000d10 	.word	0x20000d10
 8007394:	20000d14 	.word	0x20000d14

08007398 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b082      	sub	sp, #8
 800739c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800739e:	e019      	b.n	80073d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80073a0:	f000 fdd8 	bl	8007f54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073a4:	4b10      	ldr	r3, [pc, #64]	; (80073e8 <prvCheckTasksWaitingTermination+0x50>)
 80073a6:	68db      	ldr	r3, [r3, #12]
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	3304      	adds	r3, #4
 80073b0:	4618      	mov	r0, r3
 80073b2:	f7fe fd15 	bl	8005de0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80073b6:	4b0d      	ldr	r3, [pc, #52]	; (80073ec <prvCheckTasksWaitingTermination+0x54>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	3b01      	subs	r3, #1
 80073bc:	4a0b      	ldr	r2, [pc, #44]	; (80073ec <prvCheckTasksWaitingTermination+0x54>)
 80073be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80073c0:	4b0b      	ldr	r3, [pc, #44]	; (80073f0 <prvCheckTasksWaitingTermination+0x58>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	3b01      	subs	r3, #1
 80073c6:	4a0a      	ldr	r2, [pc, #40]	; (80073f0 <prvCheckTasksWaitingTermination+0x58>)
 80073c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80073ca:	f000 fdf3 	bl	8007fb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 f810 	bl	80073f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80073d4:	4b06      	ldr	r3, [pc, #24]	; (80073f0 <prvCheckTasksWaitingTermination+0x58>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d1e1      	bne.n	80073a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80073dc:	bf00      	nop
 80073de:	bf00      	nop
 80073e0:	3708      	adds	r7, #8
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}
 80073e6:	bf00      	nop
 80073e8:	20000d2c 	.word	0x20000d2c
 80073ec:	20000d58 	.word	0x20000d58
 80073f0:	20000d40 	.word	0x20000d40

080073f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b084      	sub	sp, #16
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	3354      	adds	r3, #84	; 0x54
 8007400:	4618      	mov	r0, r3
 8007402:	f001 facb 	bl	800899c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800740c:	2b00      	cmp	r3, #0
 800740e:	d108      	bne.n	8007422 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007414:	4618      	mov	r0, r3
 8007416:	f000 ff8b 	bl	8008330 <vPortFree>
				vPortFree( pxTCB );
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 ff88 	bl	8008330 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007420:	e018      	b.n	8007454 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007428:	2b01      	cmp	r3, #1
 800742a:	d103      	bne.n	8007434 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f000 ff7f 	bl	8008330 <vPortFree>
	}
 8007432:	e00f      	b.n	8007454 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800743a:	2b02      	cmp	r3, #2
 800743c:	d00a      	beq.n	8007454 <prvDeleteTCB+0x60>
	__asm volatile
 800743e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007442:	f383 8811 	msr	BASEPRI, r3
 8007446:	f3bf 8f6f 	isb	sy
 800744a:	f3bf 8f4f 	dsb	sy
 800744e:	60fb      	str	r3, [r7, #12]
}
 8007450:	bf00      	nop
 8007452:	e7fe      	b.n	8007452 <prvDeleteTCB+0x5e>
	}
 8007454:	bf00      	nop
 8007456:	3710      	adds	r7, #16
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800745c:	b480      	push	{r7}
 800745e:	b083      	sub	sp, #12
 8007460:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007462:	4b0c      	ldr	r3, [pc, #48]	; (8007494 <prvResetNextTaskUnblockTime+0x38>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d104      	bne.n	8007476 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800746c:	4b0a      	ldr	r3, [pc, #40]	; (8007498 <prvResetNextTaskUnblockTime+0x3c>)
 800746e:	f04f 32ff 	mov.w	r2, #4294967295
 8007472:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007474:	e008      	b.n	8007488 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007476:	4b07      	ldr	r3, [pc, #28]	; (8007494 <prvResetNextTaskUnblockTime+0x38>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	68db      	ldr	r3, [r3, #12]
 800747c:	68db      	ldr	r3, [r3, #12]
 800747e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	4a04      	ldr	r2, [pc, #16]	; (8007498 <prvResetNextTaskUnblockTime+0x3c>)
 8007486:	6013      	str	r3, [r2, #0]
}
 8007488:	bf00      	nop
 800748a:	370c      	adds	r7, #12
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr
 8007494:	20000d10 	.word	0x20000d10
 8007498:	20000d78 	.word	0x20000d78

0800749c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800749c:	b480      	push	{r7}
 800749e:	b083      	sub	sp, #12
 80074a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80074a2:	4b0b      	ldr	r3, [pc, #44]	; (80074d0 <xTaskGetSchedulerState+0x34>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d102      	bne.n	80074b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80074aa:	2301      	movs	r3, #1
 80074ac:	607b      	str	r3, [r7, #4]
 80074ae:	e008      	b.n	80074c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074b0:	4b08      	ldr	r3, [pc, #32]	; (80074d4 <xTaskGetSchedulerState+0x38>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d102      	bne.n	80074be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80074b8:	2302      	movs	r3, #2
 80074ba:	607b      	str	r3, [r7, #4]
 80074bc:	e001      	b.n	80074c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80074be:	2300      	movs	r3, #0
 80074c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80074c2:	687b      	ldr	r3, [r7, #4]
	}
 80074c4:	4618      	mov	r0, r3
 80074c6:	370c      	adds	r7, #12
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr
 80074d0:	20000d64 	.word	0x20000d64
 80074d4:	20000d80 	.word	0x20000d80

080074d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b086      	sub	sp, #24
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80074e4:	2300      	movs	r3, #0
 80074e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d056      	beq.n	800759c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80074ee:	4b2e      	ldr	r3, [pc, #184]	; (80075a8 <xTaskPriorityDisinherit+0xd0>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	693a      	ldr	r2, [r7, #16]
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d00a      	beq.n	800750e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80074f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074fc:	f383 8811 	msr	BASEPRI, r3
 8007500:	f3bf 8f6f 	isb	sy
 8007504:	f3bf 8f4f 	dsb	sy
 8007508:	60fb      	str	r3, [r7, #12]
}
 800750a:	bf00      	nop
 800750c:	e7fe      	b.n	800750c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007512:	2b00      	cmp	r3, #0
 8007514:	d10a      	bne.n	800752c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800751a:	f383 8811 	msr	BASEPRI, r3
 800751e:	f3bf 8f6f 	isb	sy
 8007522:	f3bf 8f4f 	dsb	sy
 8007526:	60bb      	str	r3, [r7, #8]
}
 8007528:	bf00      	nop
 800752a:	e7fe      	b.n	800752a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007530:	1e5a      	subs	r2, r3, #1
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800753e:	429a      	cmp	r2, r3
 8007540:	d02c      	beq.n	800759c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007546:	2b00      	cmp	r3, #0
 8007548:	d128      	bne.n	800759c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	3304      	adds	r3, #4
 800754e:	4618      	mov	r0, r3
 8007550:	f7fe fc46 	bl	8005de0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007560:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800756c:	4b0f      	ldr	r3, [pc, #60]	; (80075ac <xTaskPriorityDisinherit+0xd4>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	429a      	cmp	r2, r3
 8007572:	d903      	bls.n	800757c <xTaskPriorityDisinherit+0xa4>
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007578:	4a0c      	ldr	r2, [pc, #48]	; (80075ac <xTaskPriorityDisinherit+0xd4>)
 800757a:	6013      	str	r3, [r2, #0]
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007580:	4613      	mov	r3, r2
 8007582:	009b      	lsls	r3, r3, #2
 8007584:	4413      	add	r3, r2
 8007586:	009b      	lsls	r3, r3, #2
 8007588:	4a09      	ldr	r2, [pc, #36]	; (80075b0 <xTaskPriorityDisinherit+0xd8>)
 800758a:	441a      	add	r2, r3
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	3304      	adds	r3, #4
 8007590:	4619      	mov	r1, r3
 8007592:	4610      	mov	r0, r2
 8007594:	f7fe fbc7 	bl	8005d26 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007598:	2301      	movs	r3, #1
 800759a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800759c:	697b      	ldr	r3, [r7, #20]
	}
 800759e:	4618      	mov	r0, r3
 80075a0:	3718      	adds	r7, #24
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
 80075a6:	bf00      	nop
 80075a8:	20000884 	.word	0x20000884
 80075ac:	20000d60 	.word	0x20000d60
 80075b0:	20000888 	.word	0x20000888

080075b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b084      	sub	sp, #16
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80075be:	4b21      	ldr	r3, [pc, #132]	; (8007644 <prvAddCurrentTaskToDelayedList+0x90>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80075c4:	4b20      	ldr	r3, [pc, #128]	; (8007648 <prvAddCurrentTaskToDelayedList+0x94>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	3304      	adds	r3, #4
 80075ca:	4618      	mov	r0, r3
 80075cc:	f7fe fc08 	bl	8005de0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075d6:	d10a      	bne.n	80075ee <prvAddCurrentTaskToDelayedList+0x3a>
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d007      	beq.n	80075ee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80075de:	4b1a      	ldr	r3, [pc, #104]	; (8007648 <prvAddCurrentTaskToDelayedList+0x94>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	3304      	adds	r3, #4
 80075e4:	4619      	mov	r1, r3
 80075e6:	4819      	ldr	r0, [pc, #100]	; (800764c <prvAddCurrentTaskToDelayedList+0x98>)
 80075e8:	f7fe fb9d 	bl	8005d26 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80075ec:	e026      	b.n	800763c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80075ee:	68fa      	ldr	r2, [r7, #12]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	4413      	add	r3, r2
 80075f4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80075f6:	4b14      	ldr	r3, [pc, #80]	; (8007648 <prvAddCurrentTaskToDelayedList+0x94>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	68ba      	ldr	r2, [r7, #8]
 80075fc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80075fe:	68ba      	ldr	r2, [r7, #8]
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	429a      	cmp	r2, r3
 8007604:	d209      	bcs.n	800761a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007606:	4b12      	ldr	r3, [pc, #72]	; (8007650 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	4b0f      	ldr	r3, [pc, #60]	; (8007648 <prvAddCurrentTaskToDelayedList+0x94>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	3304      	adds	r3, #4
 8007610:	4619      	mov	r1, r3
 8007612:	4610      	mov	r0, r2
 8007614:	f7fe fbab 	bl	8005d6e <vListInsert>
}
 8007618:	e010      	b.n	800763c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800761a:	4b0e      	ldr	r3, [pc, #56]	; (8007654 <prvAddCurrentTaskToDelayedList+0xa0>)
 800761c:	681a      	ldr	r2, [r3, #0]
 800761e:	4b0a      	ldr	r3, [pc, #40]	; (8007648 <prvAddCurrentTaskToDelayedList+0x94>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	3304      	adds	r3, #4
 8007624:	4619      	mov	r1, r3
 8007626:	4610      	mov	r0, r2
 8007628:	f7fe fba1 	bl	8005d6e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800762c:	4b0a      	ldr	r3, [pc, #40]	; (8007658 <prvAddCurrentTaskToDelayedList+0xa4>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	68ba      	ldr	r2, [r7, #8]
 8007632:	429a      	cmp	r2, r3
 8007634:	d202      	bcs.n	800763c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007636:	4a08      	ldr	r2, [pc, #32]	; (8007658 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	6013      	str	r3, [r2, #0]
}
 800763c:	bf00      	nop
 800763e:	3710      	adds	r7, #16
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}
 8007644:	20000d5c 	.word	0x20000d5c
 8007648:	20000884 	.word	0x20000884
 800764c:	20000d44 	.word	0x20000d44
 8007650:	20000d14 	.word	0x20000d14
 8007654:	20000d10 	.word	0x20000d10
 8007658:	20000d78 	.word	0x20000d78

0800765c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b08a      	sub	sp, #40	; 0x28
 8007660:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007662:	2300      	movs	r3, #0
 8007664:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007666:	f000 fb07 	bl	8007c78 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800766a:	4b1c      	ldr	r3, [pc, #112]	; (80076dc <xTimerCreateTimerTask+0x80>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d021      	beq.n	80076b6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007672:	2300      	movs	r3, #0
 8007674:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007676:	2300      	movs	r3, #0
 8007678:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800767a:	1d3a      	adds	r2, r7, #4
 800767c:	f107 0108 	add.w	r1, r7, #8
 8007680:	f107 030c 	add.w	r3, r7, #12
 8007684:	4618      	mov	r0, r3
 8007686:	f7fe fb07 	bl	8005c98 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800768a:	6879      	ldr	r1, [r7, #4]
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	68fa      	ldr	r2, [r7, #12]
 8007690:	9202      	str	r2, [sp, #8]
 8007692:	9301      	str	r3, [sp, #4]
 8007694:	2302      	movs	r3, #2
 8007696:	9300      	str	r3, [sp, #0]
 8007698:	2300      	movs	r3, #0
 800769a:	460a      	mov	r2, r1
 800769c:	4910      	ldr	r1, [pc, #64]	; (80076e0 <xTimerCreateTimerTask+0x84>)
 800769e:	4811      	ldr	r0, [pc, #68]	; (80076e4 <xTimerCreateTimerTask+0x88>)
 80076a0:	f7ff f8b4 	bl	800680c <xTaskCreateStatic>
 80076a4:	4603      	mov	r3, r0
 80076a6:	4a10      	ldr	r2, [pc, #64]	; (80076e8 <xTimerCreateTimerTask+0x8c>)
 80076a8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80076aa:	4b0f      	ldr	r3, [pc, #60]	; (80076e8 <xTimerCreateTimerTask+0x8c>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d001      	beq.n	80076b6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80076b2:	2301      	movs	r3, #1
 80076b4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d10a      	bne.n	80076d2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80076bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c0:	f383 8811 	msr	BASEPRI, r3
 80076c4:	f3bf 8f6f 	isb	sy
 80076c8:	f3bf 8f4f 	dsb	sy
 80076cc:	613b      	str	r3, [r7, #16]
}
 80076ce:	bf00      	nop
 80076d0:	e7fe      	b.n	80076d0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80076d2:	697b      	ldr	r3, [r7, #20]
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3718      	adds	r7, #24
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}
 80076dc:	20000db4 	.word	0x20000db4
 80076e0:	080098c4 	.word	0x080098c4
 80076e4:	08007821 	.word	0x08007821
 80076e8:	20000db8 	.word	0x20000db8

080076ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b08a      	sub	sp, #40	; 0x28
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	60f8      	str	r0, [r7, #12]
 80076f4:	60b9      	str	r1, [r7, #8]
 80076f6:	607a      	str	r2, [r7, #4]
 80076f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80076fa:	2300      	movs	r3, #0
 80076fc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d10a      	bne.n	800771a <xTimerGenericCommand+0x2e>
	__asm volatile
 8007704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007708:	f383 8811 	msr	BASEPRI, r3
 800770c:	f3bf 8f6f 	isb	sy
 8007710:	f3bf 8f4f 	dsb	sy
 8007714:	623b      	str	r3, [r7, #32]
}
 8007716:	bf00      	nop
 8007718:	e7fe      	b.n	8007718 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800771a:	4b1a      	ldr	r3, [pc, #104]	; (8007784 <xTimerGenericCommand+0x98>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d02a      	beq.n	8007778 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	2b05      	cmp	r3, #5
 8007732:	dc18      	bgt.n	8007766 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007734:	f7ff feb2 	bl	800749c <xTaskGetSchedulerState>
 8007738:	4603      	mov	r3, r0
 800773a:	2b02      	cmp	r3, #2
 800773c:	d109      	bne.n	8007752 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800773e:	4b11      	ldr	r3, [pc, #68]	; (8007784 <xTimerGenericCommand+0x98>)
 8007740:	6818      	ldr	r0, [r3, #0]
 8007742:	f107 0110 	add.w	r1, r7, #16
 8007746:	2300      	movs	r3, #0
 8007748:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800774a:	f7fe fc77 	bl	800603c <xQueueGenericSend>
 800774e:	6278      	str	r0, [r7, #36]	; 0x24
 8007750:	e012      	b.n	8007778 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007752:	4b0c      	ldr	r3, [pc, #48]	; (8007784 <xTimerGenericCommand+0x98>)
 8007754:	6818      	ldr	r0, [r3, #0]
 8007756:	f107 0110 	add.w	r1, r7, #16
 800775a:	2300      	movs	r3, #0
 800775c:	2200      	movs	r2, #0
 800775e:	f7fe fc6d 	bl	800603c <xQueueGenericSend>
 8007762:	6278      	str	r0, [r7, #36]	; 0x24
 8007764:	e008      	b.n	8007778 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007766:	4b07      	ldr	r3, [pc, #28]	; (8007784 <xTimerGenericCommand+0x98>)
 8007768:	6818      	ldr	r0, [r3, #0]
 800776a:	f107 0110 	add.w	r1, r7, #16
 800776e:	2300      	movs	r3, #0
 8007770:	683a      	ldr	r2, [r7, #0]
 8007772:	f7fe fd61 	bl	8006238 <xQueueGenericSendFromISR>
 8007776:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800777a:	4618      	mov	r0, r3
 800777c:	3728      	adds	r7, #40	; 0x28
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
 8007782:	bf00      	nop
 8007784:	20000db4 	.word	0x20000db4

08007788 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b088      	sub	sp, #32
 800778c:	af02      	add	r7, sp, #8
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007792:	4b22      	ldr	r3, [pc, #136]	; (800781c <prvProcessExpiredTimer+0x94>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	68db      	ldr	r3, [r3, #12]
 8007798:	68db      	ldr	r3, [r3, #12]
 800779a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	3304      	adds	r3, #4
 80077a0:	4618      	mov	r0, r3
 80077a2:	f7fe fb1d 	bl	8005de0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80077ac:	f003 0304 	and.w	r3, r3, #4
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d022      	beq.n	80077fa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	699a      	ldr	r2, [r3, #24]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	18d1      	adds	r1, r2, r3
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	683a      	ldr	r2, [r7, #0]
 80077c0:	6978      	ldr	r0, [r7, #20]
 80077c2:	f000 f8d1 	bl	8007968 <prvInsertTimerInActiveList>
 80077c6:	4603      	mov	r3, r0
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d01f      	beq.n	800780c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80077cc:	2300      	movs	r3, #0
 80077ce:	9300      	str	r3, [sp, #0]
 80077d0:	2300      	movs	r3, #0
 80077d2:	687a      	ldr	r2, [r7, #4]
 80077d4:	2100      	movs	r1, #0
 80077d6:	6978      	ldr	r0, [r7, #20]
 80077d8:	f7ff ff88 	bl	80076ec <xTimerGenericCommand>
 80077dc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d113      	bne.n	800780c <prvProcessExpiredTimer+0x84>
	__asm volatile
 80077e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e8:	f383 8811 	msr	BASEPRI, r3
 80077ec:	f3bf 8f6f 	isb	sy
 80077f0:	f3bf 8f4f 	dsb	sy
 80077f4:	60fb      	str	r3, [r7, #12]
}
 80077f6:	bf00      	nop
 80077f8:	e7fe      	b.n	80077f8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007800:	f023 0301 	bic.w	r3, r3, #1
 8007804:	b2da      	uxtb	r2, r3
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	6a1b      	ldr	r3, [r3, #32]
 8007810:	6978      	ldr	r0, [r7, #20]
 8007812:	4798      	blx	r3
}
 8007814:	bf00      	nop
 8007816:	3718      	adds	r7, #24
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}
 800781c:	20000dac 	.word	0x20000dac

08007820 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b084      	sub	sp, #16
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007828:	f107 0308 	add.w	r3, r7, #8
 800782c:	4618      	mov	r0, r3
 800782e:	f000 f857 	bl	80078e0 <prvGetNextExpireTime>
 8007832:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	4619      	mov	r1, r3
 8007838:	68f8      	ldr	r0, [r7, #12]
 800783a:	f000 f803 	bl	8007844 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800783e:	f000 f8d5 	bl	80079ec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007842:	e7f1      	b.n	8007828 <prvTimerTask+0x8>

08007844 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b084      	sub	sp, #16
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800784e:	f7ff fa39 	bl	8006cc4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007852:	f107 0308 	add.w	r3, r7, #8
 8007856:	4618      	mov	r0, r3
 8007858:	f000 f866 	bl	8007928 <prvSampleTimeNow>
 800785c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d130      	bne.n	80078c6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d10a      	bne.n	8007880 <prvProcessTimerOrBlockTask+0x3c>
 800786a:	687a      	ldr	r2, [r7, #4]
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	429a      	cmp	r2, r3
 8007870:	d806      	bhi.n	8007880 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007872:	f7ff fa35 	bl	8006ce0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007876:	68f9      	ldr	r1, [r7, #12]
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f7ff ff85 	bl	8007788 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800787e:	e024      	b.n	80078ca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d008      	beq.n	8007898 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007886:	4b13      	ldr	r3, [pc, #76]	; (80078d4 <prvProcessTimerOrBlockTask+0x90>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d101      	bne.n	8007894 <prvProcessTimerOrBlockTask+0x50>
 8007890:	2301      	movs	r3, #1
 8007892:	e000      	b.n	8007896 <prvProcessTimerOrBlockTask+0x52>
 8007894:	2300      	movs	r3, #0
 8007896:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007898:	4b0f      	ldr	r3, [pc, #60]	; (80078d8 <prvProcessTimerOrBlockTask+0x94>)
 800789a:	6818      	ldr	r0, [r3, #0]
 800789c:	687a      	ldr	r2, [r7, #4]
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	1ad3      	subs	r3, r2, r3
 80078a2:	683a      	ldr	r2, [r7, #0]
 80078a4:	4619      	mov	r1, r3
 80078a6:	f7fe ff7d 	bl	80067a4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80078aa:	f7ff fa19 	bl	8006ce0 <xTaskResumeAll>
 80078ae:	4603      	mov	r3, r0
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d10a      	bne.n	80078ca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80078b4:	4b09      	ldr	r3, [pc, #36]	; (80078dc <prvProcessTimerOrBlockTask+0x98>)
 80078b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078ba:	601a      	str	r2, [r3, #0]
 80078bc:	f3bf 8f4f 	dsb	sy
 80078c0:	f3bf 8f6f 	isb	sy
}
 80078c4:	e001      	b.n	80078ca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80078c6:	f7ff fa0b 	bl	8006ce0 <xTaskResumeAll>
}
 80078ca:	bf00      	nop
 80078cc:	3710      	adds	r7, #16
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}
 80078d2:	bf00      	nop
 80078d4:	20000db0 	.word	0x20000db0
 80078d8:	20000db4 	.word	0x20000db4
 80078dc:	e000ed04 	.word	0xe000ed04

080078e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80078e0:	b480      	push	{r7}
 80078e2:	b085      	sub	sp, #20
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80078e8:	4b0e      	ldr	r3, [pc, #56]	; (8007924 <prvGetNextExpireTime+0x44>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d101      	bne.n	80078f6 <prvGetNextExpireTime+0x16>
 80078f2:	2201      	movs	r2, #1
 80078f4:	e000      	b.n	80078f8 <prvGetNextExpireTime+0x18>
 80078f6:	2200      	movs	r2, #0
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d105      	bne.n	8007910 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007904:	4b07      	ldr	r3, [pc, #28]	; (8007924 <prvGetNextExpireTime+0x44>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	68db      	ldr	r3, [r3, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	60fb      	str	r3, [r7, #12]
 800790e:	e001      	b.n	8007914 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007910:	2300      	movs	r3, #0
 8007912:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007914:	68fb      	ldr	r3, [r7, #12]
}
 8007916:	4618      	mov	r0, r3
 8007918:	3714      	adds	r7, #20
 800791a:	46bd      	mov	sp, r7
 800791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007920:	4770      	bx	lr
 8007922:	bf00      	nop
 8007924:	20000dac 	.word	0x20000dac

08007928 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b084      	sub	sp, #16
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007930:	f7ff fa74 	bl	8006e1c <xTaskGetTickCount>
 8007934:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007936:	4b0b      	ldr	r3, [pc, #44]	; (8007964 <prvSampleTimeNow+0x3c>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	68fa      	ldr	r2, [r7, #12]
 800793c:	429a      	cmp	r2, r3
 800793e:	d205      	bcs.n	800794c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007940:	f000 f936 	bl	8007bb0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2201      	movs	r2, #1
 8007948:	601a      	str	r2, [r3, #0]
 800794a:	e002      	b.n	8007952 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2200      	movs	r2, #0
 8007950:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007952:	4a04      	ldr	r2, [pc, #16]	; (8007964 <prvSampleTimeNow+0x3c>)
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007958:	68fb      	ldr	r3, [r7, #12]
}
 800795a:	4618      	mov	r0, r3
 800795c:	3710      	adds	r7, #16
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}
 8007962:	bf00      	nop
 8007964:	20000dbc 	.word	0x20000dbc

08007968 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b086      	sub	sp, #24
 800796c:	af00      	add	r7, sp, #0
 800796e:	60f8      	str	r0, [r7, #12]
 8007970:	60b9      	str	r1, [r7, #8]
 8007972:	607a      	str	r2, [r7, #4]
 8007974:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007976:	2300      	movs	r3, #0
 8007978:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	68ba      	ldr	r2, [r7, #8]
 800797e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	68fa      	ldr	r2, [r7, #12]
 8007984:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007986:	68ba      	ldr	r2, [r7, #8]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	429a      	cmp	r2, r3
 800798c:	d812      	bhi.n	80079b4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	1ad2      	subs	r2, r2, r3
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	699b      	ldr	r3, [r3, #24]
 8007998:	429a      	cmp	r2, r3
 800799a:	d302      	bcc.n	80079a2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800799c:	2301      	movs	r3, #1
 800799e:	617b      	str	r3, [r7, #20]
 80079a0:	e01b      	b.n	80079da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80079a2:	4b10      	ldr	r3, [pc, #64]	; (80079e4 <prvInsertTimerInActiveList+0x7c>)
 80079a4:	681a      	ldr	r2, [r3, #0]
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	3304      	adds	r3, #4
 80079aa:	4619      	mov	r1, r3
 80079ac:	4610      	mov	r0, r2
 80079ae:	f7fe f9de 	bl	8005d6e <vListInsert>
 80079b2:	e012      	b.n	80079da <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80079b4:	687a      	ldr	r2, [r7, #4]
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d206      	bcs.n	80079ca <prvInsertTimerInActiveList+0x62>
 80079bc:	68ba      	ldr	r2, [r7, #8]
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d302      	bcc.n	80079ca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80079c4:	2301      	movs	r3, #1
 80079c6:	617b      	str	r3, [r7, #20]
 80079c8:	e007      	b.n	80079da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80079ca:	4b07      	ldr	r3, [pc, #28]	; (80079e8 <prvInsertTimerInActiveList+0x80>)
 80079cc:	681a      	ldr	r2, [r3, #0]
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	3304      	adds	r3, #4
 80079d2:	4619      	mov	r1, r3
 80079d4:	4610      	mov	r0, r2
 80079d6:	f7fe f9ca 	bl	8005d6e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80079da:	697b      	ldr	r3, [r7, #20]
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3718      	adds	r7, #24
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}
 80079e4:	20000db0 	.word	0x20000db0
 80079e8:	20000dac 	.word	0x20000dac

080079ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b08e      	sub	sp, #56	; 0x38
 80079f0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80079f2:	e0ca      	b.n	8007b8a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	da18      	bge.n	8007a2c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80079fa:	1d3b      	adds	r3, r7, #4
 80079fc:	3304      	adds	r3, #4
 80079fe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d10a      	bne.n	8007a1c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a0a:	f383 8811 	msr	BASEPRI, r3
 8007a0e:	f3bf 8f6f 	isb	sy
 8007a12:	f3bf 8f4f 	dsb	sy
 8007a16:	61fb      	str	r3, [r7, #28]
}
 8007a18:	bf00      	nop
 8007a1a:	e7fe      	b.n	8007a1a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a22:	6850      	ldr	r0, [r2, #4]
 8007a24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a26:	6892      	ldr	r2, [r2, #8]
 8007a28:	4611      	mov	r1, r2
 8007a2a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	f2c0 80aa 	blt.w	8007b88 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a3a:	695b      	ldr	r3, [r3, #20]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d004      	beq.n	8007a4a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a42:	3304      	adds	r3, #4
 8007a44:	4618      	mov	r0, r3
 8007a46:	f7fe f9cb 	bl	8005de0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007a4a:	463b      	mov	r3, r7
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f7ff ff6b 	bl	8007928 <prvSampleTimeNow>
 8007a52:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2b09      	cmp	r3, #9
 8007a58:	f200 8097 	bhi.w	8007b8a <prvProcessReceivedCommands+0x19e>
 8007a5c:	a201      	add	r2, pc, #4	; (adr r2, 8007a64 <prvProcessReceivedCommands+0x78>)
 8007a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a62:	bf00      	nop
 8007a64:	08007a8d 	.word	0x08007a8d
 8007a68:	08007a8d 	.word	0x08007a8d
 8007a6c:	08007a8d 	.word	0x08007a8d
 8007a70:	08007b01 	.word	0x08007b01
 8007a74:	08007b15 	.word	0x08007b15
 8007a78:	08007b5f 	.word	0x08007b5f
 8007a7c:	08007a8d 	.word	0x08007a8d
 8007a80:	08007a8d 	.word	0x08007a8d
 8007a84:	08007b01 	.word	0x08007b01
 8007a88:	08007b15 	.word	0x08007b15
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a92:	f043 0301 	orr.w	r3, r3, #1
 8007a96:	b2da      	uxtb	r2, r3
 8007a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007a9e:	68ba      	ldr	r2, [r7, #8]
 8007aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa2:	699b      	ldr	r3, [r3, #24]
 8007aa4:	18d1      	adds	r1, r2, r3
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007aaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007aac:	f7ff ff5c 	bl	8007968 <prvInsertTimerInActiveList>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d069      	beq.n	8007b8a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ab8:	6a1b      	ldr	r3, [r3, #32]
 8007aba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007abc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ac0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ac4:	f003 0304 	and.w	r3, r3, #4
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d05e      	beq.n	8007b8a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007acc:	68ba      	ldr	r2, [r7, #8]
 8007ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ad0:	699b      	ldr	r3, [r3, #24]
 8007ad2:	441a      	add	r2, r3
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	9300      	str	r3, [sp, #0]
 8007ad8:	2300      	movs	r3, #0
 8007ada:	2100      	movs	r1, #0
 8007adc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ade:	f7ff fe05 	bl	80076ec <xTimerGenericCommand>
 8007ae2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007ae4:	6a3b      	ldr	r3, [r7, #32]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d14f      	bne.n	8007b8a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aee:	f383 8811 	msr	BASEPRI, r3
 8007af2:	f3bf 8f6f 	isb	sy
 8007af6:	f3bf 8f4f 	dsb	sy
 8007afa:	61bb      	str	r3, [r7, #24]
}
 8007afc:	bf00      	nop
 8007afe:	e7fe      	b.n	8007afe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b06:	f023 0301 	bic.w	r3, r3, #1
 8007b0a:	b2da      	uxtb	r2, r3
 8007b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007b12:	e03a      	b.n	8007b8a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b1a:	f043 0301 	orr.w	r3, r3, #1
 8007b1e:	b2da      	uxtb	r2, r3
 8007b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007b26:	68ba      	ldr	r2, [r7, #8]
 8007b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b2a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b2e:	699b      	ldr	r3, [r3, #24]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d10a      	bne.n	8007b4a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b38:	f383 8811 	msr	BASEPRI, r3
 8007b3c:	f3bf 8f6f 	isb	sy
 8007b40:	f3bf 8f4f 	dsb	sy
 8007b44:	617b      	str	r3, [r7, #20]
}
 8007b46:	bf00      	nop
 8007b48:	e7fe      	b.n	8007b48 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b4c:	699a      	ldr	r2, [r3, #24]
 8007b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b50:	18d1      	adds	r1, r2, r3
 8007b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b58:	f7ff ff06 	bl	8007968 <prvInsertTimerInActiveList>
					break;
 8007b5c:	e015      	b.n	8007b8a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b64:	f003 0302 	and.w	r3, r3, #2
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d103      	bne.n	8007b74 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007b6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b6e:	f000 fbdf 	bl	8008330 <vPortFree>
 8007b72:	e00a      	b.n	8007b8a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b7a:	f023 0301 	bic.w	r3, r3, #1
 8007b7e:	b2da      	uxtb	r2, r3
 8007b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007b86:	e000      	b.n	8007b8a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007b88:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007b8a:	4b08      	ldr	r3, [pc, #32]	; (8007bac <prvProcessReceivedCommands+0x1c0>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	1d39      	adds	r1, r7, #4
 8007b90:	2200      	movs	r2, #0
 8007b92:	4618      	mov	r0, r3
 8007b94:	f7fe fbec 	bl	8006370 <xQueueReceive>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	f47f af2a 	bne.w	80079f4 <prvProcessReceivedCommands+0x8>
	}
}
 8007ba0:	bf00      	nop
 8007ba2:	bf00      	nop
 8007ba4:	3730      	adds	r7, #48	; 0x30
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}
 8007baa:	bf00      	nop
 8007bac:	20000db4 	.word	0x20000db4

08007bb0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b088      	sub	sp, #32
 8007bb4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007bb6:	e048      	b.n	8007c4a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007bb8:	4b2d      	ldr	r3, [pc, #180]	; (8007c70 <prvSwitchTimerLists+0xc0>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	68db      	ldr	r3, [r3, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bc2:	4b2b      	ldr	r3, [pc, #172]	; (8007c70 <prvSwitchTimerLists+0xc0>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	68db      	ldr	r3, [r3, #12]
 8007bc8:	68db      	ldr	r3, [r3, #12]
 8007bca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	3304      	adds	r3, #4
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f7fe f905 	bl	8005de0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	6a1b      	ldr	r3, [r3, #32]
 8007bda:	68f8      	ldr	r0, [r7, #12]
 8007bdc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007be4:	f003 0304 	and.w	r3, r3, #4
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d02e      	beq.n	8007c4a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	699b      	ldr	r3, [r3, #24]
 8007bf0:	693a      	ldr	r2, [r7, #16]
 8007bf2:	4413      	add	r3, r2
 8007bf4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007bf6:	68ba      	ldr	r2, [r7, #8]
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	d90e      	bls.n	8007c1c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	68ba      	ldr	r2, [r7, #8]
 8007c02:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	68fa      	ldr	r2, [r7, #12]
 8007c08:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007c0a:	4b19      	ldr	r3, [pc, #100]	; (8007c70 <prvSwitchTimerLists+0xc0>)
 8007c0c:	681a      	ldr	r2, [r3, #0]
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	3304      	adds	r3, #4
 8007c12:	4619      	mov	r1, r3
 8007c14:	4610      	mov	r0, r2
 8007c16:	f7fe f8aa 	bl	8005d6e <vListInsert>
 8007c1a:	e016      	b.n	8007c4a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	9300      	str	r3, [sp, #0]
 8007c20:	2300      	movs	r3, #0
 8007c22:	693a      	ldr	r2, [r7, #16]
 8007c24:	2100      	movs	r1, #0
 8007c26:	68f8      	ldr	r0, [r7, #12]
 8007c28:	f7ff fd60 	bl	80076ec <xTimerGenericCommand>
 8007c2c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d10a      	bne.n	8007c4a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c38:	f383 8811 	msr	BASEPRI, r3
 8007c3c:	f3bf 8f6f 	isb	sy
 8007c40:	f3bf 8f4f 	dsb	sy
 8007c44:	603b      	str	r3, [r7, #0]
}
 8007c46:	bf00      	nop
 8007c48:	e7fe      	b.n	8007c48 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007c4a:	4b09      	ldr	r3, [pc, #36]	; (8007c70 <prvSwitchTimerLists+0xc0>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d1b1      	bne.n	8007bb8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007c54:	4b06      	ldr	r3, [pc, #24]	; (8007c70 <prvSwitchTimerLists+0xc0>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007c5a:	4b06      	ldr	r3, [pc, #24]	; (8007c74 <prvSwitchTimerLists+0xc4>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a04      	ldr	r2, [pc, #16]	; (8007c70 <prvSwitchTimerLists+0xc0>)
 8007c60:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007c62:	4a04      	ldr	r2, [pc, #16]	; (8007c74 <prvSwitchTimerLists+0xc4>)
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	6013      	str	r3, [r2, #0]
}
 8007c68:	bf00      	nop
 8007c6a:	3718      	adds	r7, #24
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}
 8007c70:	20000dac 	.word	0x20000dac
 8007c74:	20000db0 	.word	0x20000db0

08007c78 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b082      	sub	sp, #8
 8007c7c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007c7e:	f000 f969 	bl	8007f54 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007c82:	4b15      	ldr	r3, [pc, #84]	; (8007cd8 <prvCheckForValidListAndQueue+0x60>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d120      	bne.n	8007ccc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007c8a:	4814      	ldr	r0, [pc, #80]	; (8007cdc <prvCheckForValidListAndQueue+0x64>)
 8007c8c:	f7fe f81e 	bl	8005ccc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007c90:	4813      	ldr	r0, [pc, #76]	; (8007ce0 <prvCheckForValidListAndQueue+0x68>)
 8007c92:	f7fe f81b 	bl	8005ccc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007c96:	4b13      	ldr	r3, [pc, #76]	; (8007ce4 <prvCheckForValidListAndQueue+0x6c>)
 8007c98:	4a10      	ldr	r2, [pc, #64]	; (8007cdc <prvCheckForValidListAndQueue+0x64>)
 8007c9a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007c9c:	4b12      	ldr	r3, [pc, #72]	; (8007ce8 <prvCheckForValidListAndQueue+0x70>)
 8007c9e:	4a10      	ldr	r2, [pc, #64]	; (8007ce0 <prvCheckForValidListAndQueue+0x68>)
 8007ca0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	9300      	str	r3, [sp, #0]
 8007ca6:	4b11      	ldr	r3, [pc, #68]	; (8007cec <prvCheckForValidListAndQueue+0x74>)
 8007ca8:	4a11      	ldr	r2, [pc, #68]	; (8007cf0 <prvCheckForValidListAndQueue+0x78>)
 8007caa:	2110      	movs	r1, #16
 8007cac:	200a      	movs	r0, #10
 8007cae:	f7fe f929 	bl	8005f04 <xQueueGenericCreateStatic>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	4a08      	ldr	r2, [pc, #32]	; (8007cd8 <prvCheckForValidListAndQueue+0x60>)
 8007cb6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007cb8:	4b07      	ldr	r3, [pc, #28]	; (8007cd8 <prvCheckForValidListAndQueue+0x60>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d005      	beq.n	8007ccc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007cc0:	4b05      	ldr	r3, [pc, #20]	; (8007cd8 <prvCheckForValidListAndQueue+0x60>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	490b      	ldr	r1, [pc, #44]	; (8007cf4 <prvCheckForValidListAndQueue+0x7c>)
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f7fe fd42 	bl	8006750 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007ccc:	f000 f972 	bl	8007fb4 <vPortExitCritical>
}
 8007cd0:	bf00      	nop
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
 8007cd6:	bf00      	nop
 8007cd8:	20000db4 	.word	0x20000db4
 8007cdc:	20000d84 	.word	0x20000d84
 8007ce0:	20000d98 	.word	0x20000d98
 8007ce4:	20000dac 	.word	0x20000dac
 8007ce8:	20000db0 	.word	0x20000db0
 8007cec:	20000e60 	.word	0x20000e60
 8007cf0:	20000dc0 	.word	0x20000dc0
 8007cf4:	080098cc 	.word	0x080098cc

08007cf8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b085      	sub	sp, #20
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	60f8      	str	r0, [r7, #12]
 8007d00:	60b9      	str	r1, [r7, #8]
 8007d02:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	3b04      	subs	r3, #4
 8007d08:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007d10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	3b04      	subs	r3, #4
 8007d16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	f023 0201 	bic.w	r2, r3, #1
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	3b04      	subs	r3, #4
 8007d26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007d28:	4a0c      	ldr	r2, [pc, #48]	; (8007d5c <pxPortInitialiseStack+0x64>)
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	3b14      	subs	r3, #20
 8007d32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007d34:	687a      	ldr	r2, [r7, #4]
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	3b04      	subs	r3, #4
 8007d3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f06f 0202 	mvn.w	r2, #2
 8007d46:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	3b20      	subs	r3, #32
 8007d4c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3714      	adds	r7, #20
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr
 8007d5c:	08007d61 	.word	0x08007d61

08007d60 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007d60:	b480      	push	{r7}
 8007d62:	b085      	sub	sp, #20
 8007d64:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007d66:	2300      	movs	r3, #0
 8007d68:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007d6a:	4b12      	ldr	r3, [pc, #72]	; (8007db4 <prvTaskExitError+0x54>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d72:	d00a      	beq.n	8007d8a <prvTaskExitError+0x2a>
	__asm volatile
 8007d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d78:	f383 8811 	msr	BASEPRI, r3
 8007d7c:	f3bf 8f6f 	isb	sy
 8007d80:	f3bf 8f4f 	dsb	sy
 8007d84:	60fb      	str	r3, [r7, #12]
}
 8007d86:	bf00      	nop
 8007d88:	e7fe      	b.n	8007d88 <prvTaskExitError+0x28>
	__asm volatile
 8007d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d8e:	f383 8811 	msr	BASEPRI, r3
 8007d92:	f3bf 8f6f 	isb	sy
 8007d96:	f3bf 8f4f 	dsb	sy
 8007d9a:	60bb      	str	r3, [r7, #8]
}
 8007d9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007d9e:	bf00      	nop
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d0fc      	beq.n	8007da0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007da6:	bf00      	nop
 8007da8:	bf00      	nop
 8007daa:	3714      	adds	r7, #20
 8007dac:	46bd      	mov	sp, r7
 8007dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db2:	4770      	bx	lr
 8007db4:	2000007c 	.word	0x2000007c
	...

08007dc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007dc0:	4b07      	ldr	r3, [pc, #28]	; (8007de0 <pxCurrentTCBConst2>)
 8007dc2:	6819      	ldr	r1, [r3, #0]
 8007dc4:	6808      	ldr	r0, [r1, #0]
 8007dc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dca:	f380 8809 	msr	PSP, r0
 8007dce:	f3bf 8f6f 	isb	sy
 8007dd2:	f04f 0000 	mov.w	r0, #0
 8007dd6:	f380 8811 	msr	BASEPRI, r0
 8007dda:	4770      	bx	lr
 8007ddc:	f3af 8000 	nop.w

08007de0 <pxCurrentTCBConst2>:
 8007de0:	20000884 	.word	0x20000884
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007de4:	bf00      	nop
 8007de6:	bf00      	nop

08007de8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007de8:	4808      	ldr	r0, [pc, #32]	; (8007e0c <prvPortStartFirstTask+0x24>)
 8007dea:	6800      	ldr	r0, [r0, #0]
 8007dec:	6800      	ldr	r0, [r0, #0]
 8007dee:	f380 8808 	msr	MSP, r0
 8007df2:	f04f 0000 	mov.w	r0, #0
 8007df6:	f380 8814 	msr	CONTROL, r0
 8007dfa:	b662      	cpsie	i
 8007dfc:	b661      	cpsie	f
 8007dfe:	f3bf 8f4f 	dsb	sy
 8007e02:	f3bf 8f6f 	isb	sy
 8007e06:	df00      	svc	0
 8007e08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007e0a:	bf00      	nop
 8007e0c:	e000ed08 	.word	0xe000ed08

08007e10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b086      	sub	sp, #24
 8007e14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007e16:	4b46      	ldr	r3, [pc, #280]	; (8007f30 <xPortStartScheduler+0x120>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a46      	ldr	r2, [pc, #280]	; (8007f34 <xPortStartScheduler+0x124>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d10a      	bne.n	8007e36 <xPortStartScheduler+0x26>
	__asm volatile
 8007e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e24:	f383 8811 	msr	BASEPRI, r3
 8007e28:	f3bf 8f6f 	isb	sy
 8007e2c:	f3bf 8f4f 	dsb	sy
 8007e30:	613b      	str	r3, [r7, #16]
}
 8007e32:	bf00      	nop
 8007e34:	e7fe      	b.n	8007e34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007e36:	4b3e      	ldr	r3, [pc, #248]	; (8007f30 <xPortStartScheduler+0x120>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4a3f      	ldr	r2, [pc, #252]	; (8007f38 <xPortStartScheduler+0x128>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d10a      	bne.n	8007e56 <xPortStartScheduler+0x46>
	__asm volatile
 8007e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e44:	f383 8811 	msr	BASEPRI, r3
 8007e48:	f3bf 8f6f 	isb	sy
 8007e4c:	f3bf 8f4f 	dsb	sy
 8007e50:	60fb      	str	r3, [r7, #12]
}
 8007e52:	bf00      	nop
 8007e54:	e7fe      	b.n	8007e54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007e56:	4b39      	ldr	r3, [pc, #228]	; (8007f3c <xPortStartScheduler+0x12c>)
 8007e58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	781b      	ldrb	r3, [r3, #0]
 8007e5e:	b2db      	uxtb	r3, r3
 8007e60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	22ff      	movs	r2, #255	; 0xff
 8007e66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	781b      	ldrb	r3, [r3, #0]
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007e70:	78fb      	ldrb	r3, [r7, #3]
 8007e72:	b2db      	uxtb	r3, r3
 8007e74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007e78:	b2da      	uxtb	r2, r3
 8007e7a:	4b31      	ldr	r3, [pc, #196]	; (8007f40 <xPortStartScheduler+0x130>)
 8007e7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007e7e:	4b31      	ldr	r3, [pc, #196]	; (8007f44 <xPortStartScheduler+0x134>)
 8007e80:	2207      	movs	r2, #7
 8007e82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e84:	e009      	b.n	8007e9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007e86:	4b2f      	ldr	r3, [pc, #188]	; (8007f44 <xPortStartScheduler+0x134>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	3b01      	subs	r3, #1
 8007e8c:	4a2d      	ldr	r2, [pc, #180]	; (8007f44 <xPortStartScheduler+0x134>)
 8007e8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007e90:	78fb      	ldrb	r3, [r7, #3]
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	005b      	lsls	r3, r3, #1
 8007e96:	b2db      	uxtb	r3, r3
 8007e98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e9a:	78fb      	ldrb	r3, [r7, #3]
 8007e9c:	b2db      	uxtb	r3, r3
 8007e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ea2:	2b80      	cmp	r3, #128	; 0x80
 8007ea4:	d0ef      	beq.n	8007e86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007ea6:	4b27      	ldr	r3, [pc, #156]	; (8007f44 <xPortStartScheduler+0x134>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f1c3 0307 	rsb	r3, r3, #7
 8007eae:	2b04      	cmp	r3, #4
 8007eb0:	d00a      	beq.n	8007ec8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb6:	f383 8811 	msr	BASEPRI, r3
 8007eba:	f3bf 8f6f 	isb	sy
 8007ebe:	f3bf 8f4f 	dsb	sy
 8007ec2:	60bb      	str	r3, [r7, #8]
}
 8007ec4:	bf00      	nop
 8007ec6:	e7fe      	b.n	8007ec6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007ec8:	4b1e      	ldr	r3, [pc, #120]	; (8007f44 <xPortStartScheduler+0x134>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	021b      	lsls	r3, r3, #8
 8007ece:	4a1d      	ldr	r2, [pc, #116]	; (8007f44 <xPortStartScheduler+0x134>)
 8007ed0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007ed2:	4b1c      	ldr	r3, [pc, #112]	; (8007f44 <xPortStartScheduler+0x134>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007eda:	4a1a      	ldr	r2, [pc, #104]	; (8007f44 <xPortStartScheduler+0x134>)
 8007edc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	b2da      	uxtb	r2, r3
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007ee6:	4b18      	ldr	r3, [pc, #96]	; (8007f48 <xPortStartScheduler+0x138>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a17      	ldr	r2, [pc, #92]	; (8007f48 <xPortStartScheduler+0x138>)
 8007eec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007ef0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007ef2:	4b15      	ldr	r3, [pc, #84]	; (8007f48 <xPortStartScheduler+0x138>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a14      	ldr	r2, [pc, #80]	; (8007f48 <xPortStartScheduler+0x138>)
 8007ef8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007efc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007efe:	f000 f8dd 	bl	80080bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007f02:	4b12      	ldr	r3, [pc, #72]	; (8007f4c <xPortStartScheduler+0x13c>)
 8007f04:	2200      	movs	r2, #0
 8007f06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007f08:	f000 f8fc 	bl	8008104 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007f0c:	4b10      	ldr	r3, [pc, #64]	; (8007f50 <xPortStartScheduler+0x140>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a0f      	ldr	r2, [pc, #60]	; (8007f50 <xPortStartScheduler+0x140>)
 8007f12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007f16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007f18:	f7ff ff66 	bl	8007de8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007f1c:	f7ff f848 	bl	8006fb0 <vTaskSwitchContext>
	prvTaskExitError();
 8007f20:	f7ff ff1e 	bl	8007d60 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007f24:	2300      	movs	r3, #0
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3718      	adds	r7, #24
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}
 8007f2e:	bf00      	nop
 8007f30:	e000ed00 	.word	0xe000ed00
 8007f34:	410fc271 	.word	0x410fc271
 8007f38:	410fc270 	.word	0x410fc270
 8007f3c:	e000e400 	.word	0xe000e400
 8007f40:	20000eb0 	.word	0x20000eb0
 8007f44:	20000eb4 	.word	0x20000eb4
 8007f48:	e000ed20 	.word	0xe000ed20
 8007f4c:	2000007c 	.word	0x2000007c
 8007f50:	e000ef34 	.word	0xe000ef34

08007f54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007f54:	b480      	push	{r7}
 8007f56:	b083      	sub	sp, #12
 8007f58:	af00      	add	r7, sp, #0
	__asm volatile
 8007f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f5e:	f383 8811 	msr	BASEPRI, r3
 8007f62:	f3bf 8f6f 	isb	sy
 8007f66:	f3bf 8f4f 	dsb	sy
 8007f6a:	607b      	str	r3, [r7, #4]
}
 8007f6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007f6e:	4b0f      	ldr	r3, [pc, #60]	; (8007fac <vPortEnterCritical+0x58>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	3301      	adds	r3, #1
 8007f74:	4a0d      	ldr	r2, [pc, #52]	; (8007fac <vPortEnterCritical+0x58>)
 8007f76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007f78:	4b0c      	ldr	r3, [pc, #48]	; (8007fac <vPortEnterCritical+0x58>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d10f      	bne.n	8007fa0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007f80:	4b0b      	ldr	r3, [pc, #44]	; (8007fb0 <vPortEnterCritical+0x5c>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d00a      	beq.n	8007fa0 <vPortEnterCritical+0x4c>
	__asm volatile
 8007f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f8e:	f383 8811 	msr	BASEPRI, r3
 8007f92:	f3bf 8f6f 	isb	sy
 8007f96:	f3bf 8f4f 	dsb	sy
 8007f9a:	603b      	str	r3, [r7, #0]
}
 8007f9c:	bf00      	nop
 8007f9e:	e7fe      	b.n	8007f9e <vPortEnterCritical+0x4a>
	}
}
 8007fa0:	bf00      	nop
 8007fa2:	370c      	adds	r7, #12
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr
 8007fac:	2000007c 	.word	0x2000007c
 8007fb0:	e000ed04 	.word	0xe000ed04

08007fb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b083      	sub	sp, #12
 8007fb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007fba:	4b12      	ldr	r3, [pc, #72]	; (8008004 <vPortExitCritical+0x50>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d10a      	bne.n	8007fd8 <vPortExitCritical+0x24>
	__asm volatile
 8007fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc6:	f383 8811 	msr	BASEPRI, r3
 8007fca:	f3bf 8f6f 	isb	sy
 8007fce:	f3bf 8f4f 	dsb	sy
 8007fd2:	607b      	str	r3, [r7, #4]
}
 8007fd4:	bf00      	nop
 8007fd6:	e7fe      	b.n	8007fd6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007fd8:	4b0a      	ldr	r3, [pc, #40]	; (8008004 <vPortExitCritical+0x50>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	3b01      	subs	r3, #1
 8007fde:	4a09      	ldr	r2, [pc, #36]	; (8008004 <vPortExitCritical+0x50>)
 8007fe0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007fe2:	4b08      	ldr	r3, [pc, #32]	; (8008004 <vPortExitCritical+0x50>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d105      	bne.n	8007ff6 <vPortExitCritical+0x42>
 8007fea:	2300      	movs	r3, #0
 8007fec:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	f383 8811 	msr	BASEPRI, r3
}
 8007ff4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007ff6:	bf00      	nop
 8007ff8:	370c      	adds	r7, #12
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008000:	4770      	bx	lr
 8008002:	bf00      	nop
 8008004:	2000007c 	.word	0x2000007c
	...

08008010 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008010:	f3ef 8009 	mrs	r0, PSP
 8008014:	f3bf 8f6f 	isb	sy
 8008018:	4b15      	ldr	r3, [pc, #84]	; (8008070 <pxCurrentTCBConst>)
 800801a:	681a      	ldr	r2, [r3, #0]
 800801c:	f01e 0f10 	tst.w	lr, #16
 8008020:	bf08      	it	eq
 8008022:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008026:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800802a:	6010      	str	r0, [r2, #0]
 800802c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008030:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008034:	f380 8811 	msr	BASEPRI, r0
 8008038:	f3bf 8f4f 	dsb	sy
 800803c:	f3bf 8f6f 	isb	sy
 8008040:	f7fe ffb6 	bl	8006fb0 <vTaskSwitchContext>
 8008044:	f04f 0000 	mov.w	r0, #0
 8008048:	f380 8811 	msr	BASEPRI, r0
 800804c:	bc09      	pop	{r0, r3}
 800804e:	6819      	ldr	r1, [r3, #0]
 8008050:	6808      	ldr	r0, [r1, #0]
 8008052:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008056:	f01e 0f10 	tst.w	lr, #16
 800805a:	bf08      	it	eq
 800805c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008060:	f380 8809 	msr	PSP, r0
 8008064:	f3bf 8f6f 	isb	sy
 8008068:	4770      	bx	lr
 800806a:	bf00      	nop
 800806c:	f3af 8000 	nop.w

08008070 <pxCurrentTCBConst>:
 8008070:	20000884 	.word	0x20000884
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008074:	bf00      	nop
 8008076:	bf00      	nop

08008078 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b082      	sub	sp, #8
 800807c:	af00      	add	r7, sp, #0
	__asm volatile
 800807e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008082:	f383 8811 	msr	BASEPRI, r3
 8008086:	f3bf 8f6f 	isb	sy
 800808a:	f3bf 8f4f 	dsb	sy
 800808e:	607b      	str	r3, [r7, #4]
}
 8008090:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008092:	f7fe fed3 	bl	8006e3c <xTaskIncrementTick>
 8008096:	4603      	mov	r3, r0
 8008098:	2b00      	cmp	r3, #0
 800809a:	d003      	beq.n	80080a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800809c:	4b06      	ldr	r3, [pc, #24]	; (80080b8 <xPortSysTickHandler+0x40>)
 800809e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080a2:	601a      	str	r2, [r3, #0]
 80080a4:	2300      	movs	r3, #0
 80080a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	f383 8811 	msr	BASEPRI, r3
}
 80080ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80080b0:	bf00      	nop
 80080b2:	3708      	adds	r7, #8
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}
 80080b8:	e000ed04 	.word	0xe000ed04

080080bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80080bc:	b480      	push	{r7}
 80080be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80080c0:	4b0b      	ldr	r3, [pc, #44]	; (80080f0 <vPortSetupTimerInterrupt+0x34>)
 80080c2:	2200      	movs	r2, #0
 80080c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80080c6:	4b0b      	ldr	r3, [pc, #44]	; (80080f4 <vPortSetupTimerInterrupt+0x38>)
 80080c8:	2200      	movs	r2, #0
 80080ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80080cc:	4b0a      	ldr	r3, [pc, #40]	; (80080f8 <vPortSetupTimerInterrupt+0x3c>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a0a      	ldr	r2, [pc, #40]	; (80080fc <vPortSetupTimerInterrupt+0x40>)
 80080d2:	fba2 2303 	umull	r2, r3, r2, r3
 80080d6:	099b      	lsrs	r3, r3, #6
 80080d8:	4a09      	ldr	r2, [pc, #36]	; (8008100 <vPortSetupTimerInterrupt+0x44>)
 80080da:	3b01      	subs	r3, #1
 80080dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80080de:	4b04      	ldr	r3, [pc, #16]	; (80080f0 <vPortSetupTimerInterrupt+0x34>)
 80080e0:	2207      	movs	r2, #7
 80080e2:	601a      	str	r2, [r3, #0]
}
 80080e4:	bf00      	nop
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop
 80080f0:	e000e010 	.word	0xe000e010
 80080f4:	e000e018 	.word	0xe000e018
 80080f8:	20000070 	.word	0x20000070
 80080fc:	10624dd3 	.word	0x10624dd3
 8008100:	e000e014 	.word	0xe000e014

08008104 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008104:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008114 <vPortEnableVFP+0x10>
 8008108:	6801      	ldr	r1, [r0, #0]
 800810a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800810e:	6001      	str	r1, [r0, #0]
 8008110:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008112:	bf00      	nop
 8008114:	e000ed88 	.word	0xe000ed88

08008118 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008118:	b480      	push	{r7}
 800811a:	b085      	sub	sp, #20
 800811c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800811e:	f3ef 8305 	mrs	r3, IPSR
 8008122:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2b0f      	cmp	r3, #15
 8008128:	d914      	bls.n	8008154 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800812a:	4a17      	ldr	r2, [pc, #92]	; (8008188 <vPortValidateInterruptPriority+0x70>)
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	4413      	add	r3, r2
 8008130:	781b      	ldrb	r3, [r3, #0]
 8008132:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008134:	4b15      	ldr	r3, [pc, #84]	; (800818c <vPortValidateInterruptPriority+0x74>)
 8008136:	781b      	ldrb	r3, [r3, #0]
 8008138:	7afa      	ldrb	r2, [r7, #11]
 800813a:	429a      	cmp	r2, r3
 800813c:	d20a      	bcs.n	8008154 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800813e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008142:	f383 8811 	msr	BASEPRI, r3
 8008146:	f3bf 8f6f 	isb	sy
 800814a:	f3bf 8f4f 	dsb	sy
 800814e:	607b      	str	r3, [r7, #4]
}
 8008150:	bf00      	nop
 8008152:	e7fe      	b.n	8008152 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008154:	4b0e      	ldr	r3, [pc, #56]	; (8008190 <vPortValidateInterruptPriority+0x78>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800815c:	4b0d      	ldr	r3, [pc, #52]	; (8008194 <vPortValidateInterruptPriority+0x7c>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	429a      	cmp	r2, r3
 8008162:	d90a      	bls.n	800817a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008168:	f383 8811 	msr	BASEPRI, r3
 800816c:	f3bf 8f6f 	isb	sy
 8008170:	f3bf 8f4f 	dsb	sy
 8008174:	603b      	str	r3, [r7, #0]
}
 8008176:	bf00      	nop
 8008178:	e7fe      	b.n	8008178 <vPortValidateInterruptPriority+0x60>
	}
 800817a:	bf00      	nop
 800817c:	3714      	adds	r7, #20
 800817e:	46bd      	mov	sp, r7
 8008180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008184:	4770      	bx	lr
 8008186:	bf00      	nop
 8008188:	e000e3f0 	.word	0xe000e3f0
 800818c:	20000eb0 	.word	0x20000eb0
 8008190:	e000ed0c 	.word	0xe000ed0c
 8008194:	20000eb4 	.word	0x20000eb4

08008198 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b08a      	sub	sp, #40	; 0x28
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80081a0:	2300      	movs	r3, #0
 80081a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80081a4:	f7fe fd8e 	bl	8006cc4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80081a8:	4b5b      	ldr	r3, [pc, #364]	; (8008318 <pvPortMalloc+0x180>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d101      	bne.n	80081b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80081b0:	f000 f920 	bl	80083f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80081b4:	4b59      	ldr	r3, [pc, #356]	; (800831c <pvPortMalloc+0x184>)
 80081b6:	681a      	ldr	r2, [r3, #0]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	4013      	ands	r3, r2
 80081bc:	2b00      	cmp	r3, #0
 80081be:	f040 8093 	bne.w	80082e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d01d      	beq.n	8008204 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80081c8:	2208      	movs	r2, #8
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	4413      	add	r3, r2
 80081ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f003 0307 	and.w	r3, r3, #7
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d014      	beq.n	8008204 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f023 0307 	bic.w	r3, r3, #7
 80081e0:	3308      	adds	r3, #8
 80081e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f003 0307 	and.w	r3, r3, #7
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d00a      	beq.n	8008204 <pvPortMalloc+0x6c>
	__asm volatile
 80081ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f2:	f383 8811 	msr	BASEPRI, r3
 80081f6:	f3bf 8f6f 	isb	sy
 80081fa:	f3bf 8f4f 	dsb	sy
 80081fe:	617b      	str	r3, [r7, #20]
}
 8008200:	bf00      	nop
 8008202:	e7fe      	b.n	8008202 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d06e      	beq.n	80082e8 <pvPortMalloc+0x150>
 800820a:	4b45      	ldr	r3, [pc, #276]	; (8008320 <pvPortMalloc+0x188>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	687a      	ldr	r2, [r7, #4]
 8008210:	429a      	cmp	r2, r3
 8008212:	d869      	bhi.n	80082e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008214:	4b43      	ldr	r3, [pc, #268]	; (8008324 <pvPortMalloc+0x18c>)
 8008216:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008218:	4b42      	ldr	r3, [pc, #264]	; (8008324 <pvPortMalloc+0x18c>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800821e:	e004      	b.n	800822a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008222:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800822a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	687a      	ldr	r2, [r7, #4]
 8008230:	429a      	cmp	r2, r3
 8008232:	d903      	bls.n	800823c <pvPortMalloc+0xa4>
 8008234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d1f1      	bne.n	8008220 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800823c:	4b36      	ldr	r3, [pc, #216]	; (8008318 <pvPortMalloc+0x180>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008242:	429a      	cmp	r2, r3
 8008244:	d050      	beq.n	80082e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008246:	6a3b      	ldr	r3, [r7, #32]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	2208      	movs	r2, #8
 800824c:	4413      	add	r3, r2
 800824e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008252:	681a      	ldr	r2, [r3, #0]
 8008254:	6a3b      	ldr	r3, [r7, #32]
 8008256:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800825a:	685a      	ldr	r2, [r3, #4]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	1ad2      	subs	r2, r2, r3
 8008260:	2308      	movs	r3, #8
 8008262:	005b      	lsls	r3, r3, #1
 8008264:	429a      	cmp	r2, r3
 8008266:	d91f      	bls.n	80082a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008268:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	4413      	add	r3, r2
 800826e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008270:	69bb      	ldr	r3, [r7, #24]
 8008272:	f003 0307 	and.w	r3, r3, #7
 8008276:	2b00      	cmp	r3, #0
 8008278:	d00a      	beq.n	8008290 <pvPortMalloc+0xf8>
	__asm volatile
 800827a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800827e:	f383 8811 	msr	BASEPRI, r3
 8008282:	f3bf 8f6f 	isb	sy
 8008286:	f3bf 8f4f 	dsb	sy
 800828a:	613b      	str	r3, [r7, #16]
}
 800828c:	bf00      	nop
 800828e:	e7fe      	b.n	800828e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008292:	685a      	ldr	r2, [r3, #4]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	1ad2      	subs	r2, r2, r3
 8008298:	69bb      	ldr	r3, [r7, #24]
 800829a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800829c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800829e:	687a      	ldr	r2, [r7, #4]
 80082a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80082a2:	69b8      	ldr	r0, [r7, #24]
 80082a4:	f000 f908 	bl	80084b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80082a8:	4b1d      	ldr	r3, [pc, #116]	; (8008320 <pvPortMalloc+0x188>)
 80082aa:	681a      	ldr	r2, [r3, #0]
 80082ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ae:	685b      	ldr	r3, [r3, #4]
 80082b0:	1ad3      	subs	r3, r2, r3
 80082b2:	4a1b      	ldr	r2, [pc, #108]	; (8008320 <pvPortMalloc+0x188>)
 80082b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80082b6:	4b1a      	ldr	r3, [pc, #104]	; (8008320 <pvPortMalloc+0x188>)
 80082b8:	681a      	ldr	r2, [r3, #0]
 80082ba:	4b1b      	ldr	r3, [pc, #108]	; (8008328 <pvPortMalloc+0x190>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	429a      	cmp	r2, r3
 80082c0:	d203      	bcs.n	80082ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80082c2:	4b17      	ldr	r3, [pc, #92]	; (8008320 <pvPortMalloc+0x188>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4a18      	ldr	r2, [pc, #96]	; (8008328 <pvPortMalloc+0x190>)
 80082c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80082ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082cc:	685a      	ldr	r2, [r3, #4]
 80082ce:	4b13      	ldr	r3, [pc, #76]	; (800831c <pvPortMalloc+0x184>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	431a      	orrs	r2, r3
 80082d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80082d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082da:	2200      	movs	r2, #0
 80082dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80082de:	4b13      	ldr	r3, [pc, #76]	; (800832c <pvPortMalloc+0x194>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	3301      	adds	r3, #1
 80082e4:	4a11      	ldr	r2, [pc, #68]	; (800832c <pvPortMalloc+0x194>)
 80082e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80082e8:	f7fe fcfa 	bl	8006ce0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80082ec:	69fb      	ldr	r3, [r7, #28]
 80082ee:	f003 0307 	and.w	r3, r3, #7
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d00a      	beq.n	800830c <pvPortMalloc+0x174>
	__asm volatile
 80082f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082fa:	f383 8811 	msr	BASEPRI, r3
 80082fe:	f3bf 8f6f 	isb	sy
 8008302:	f3bf 8f4f 	dsb	sy
 8008306:	60fb      	str	r3, [r7, #12]
}
 8008308:	bf00      	nop
 800830a:	e7fe      	b.n	800830a <pvPortMalloc+0x172>
	return pvReturn;
 800830c:	69fb      	ldr	r3, [r7, #28]
}
 800830e:	4618      	mov	r0, r3
 8008310:	3728      	adds	r7, #40	; 0x28
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}
 8008316:	bf00      	nop
 8008318:	20001a78 	.word	0x20001a78
 800831c:	20001a8c 	.word	0x20001a8c
 8008320:	20001a7c 	.word	0x20001a7c
 8008324:	20001a70 	.word	0x20001a70
 8008328:	20001a80 	.word	0x20001a80
 800832c:	20001a84 	.word	0x20001a84

08008330 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b086      	sub	sp, #24
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d04d      	beq.n	80083de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008342:	2308      	movs	r3, #8
 8008344:	425b      	negs	r3, r3
 8008346:	697a      	ldr	r2, [r7, #20]
 8008348:	4413      	add	r3, r2
 800834a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	685a      	ldr	r2, [r3, #4]
 8008354:	4b24      	ldr	r3, [pc, #144]	; (80083e8 <vPortFree+0xb8>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4013      	ands	r3, r2
 800835a:	2b00      	cmp	r3, #0
 800835c:	d10a      	bne.n	8008374 <vPortFree+0x44>
	__asm volatile
 800835e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008362:	f383 8811 	msr	BASEPRI, r3
 8008366:	f3bf 8f6f 	isb	sy
 800836a:	f3bf 8f4f 	dsb	sy
 800836e:	60fb      	str	r3, [r7, #12]
}
 8008370:	bf00      	nop
 8008372:	e7fe      	b.n	8008372 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008374:	693b      	ldr	r3, [r7, #16]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d00a      	beq.n	8008392 <vPortFree+0x62>
	__asm volatile
 800837c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008380:	f383 8811 	msr	BASEPRI, r3
 8008384:	f3bf 8f6f 	isb	sy
 8008388:	f3bf 8f4f 	dsb	sy
 800838c:	60bb      	str	r3, [r7, #8]
}
 800838e:	bf00      	nop
 8008390:	e7fe      	b.n	8008390 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	685a      	ldr	r2, [r3, #4]
 8008396:	4b14      	ldr	r3, [pc, #80]	; (80083e8 <vPortFree+0xb8>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4013      	ands	r3, r2
 800839c:	2b00      	cmp	r3, #0
 800839e:	d01e      	beq.n	80083de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80083a0:	693b      	ldr	r3, [r7, #16]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d11a      	bne.n	80083de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	685a      	ldr	r2, [r3, #4]
 80083ac:	4b0e      	ldr	r3, [pc, #56]	; (80083e8 <vPortFree+0xb8>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	43db      	mvns	r3, r3
 80083b2:	401a      	ands	r2, r3
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80083b8:	f7fe fc84 	bl	8006cc4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	685a      	ldr	r2, [r3, #4]
 80083c0:	4b0a      	ldr	r3, [pc, #40]	; (80083ec <vPortFree+0xbc>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4413      	add	r3, r2
 80083c6:	4a09      	ldr	r2, [pc, #36]	; (80083ec <vPortFree+0xbc>)
 80083c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80083ca:	6938      	ldr	r0, [r7, #16]
 80083cc:	f000 f874 	bl	80084b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80083d0:	4b07      	ldr	r3, [pc, #28]	; (80083f0 <vPortFree+0xc0>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	3301      	adds	r3, #1
 80083d6:	4a06      	ldr	r2, [pc, #24]	; (80083f0 <vPortFree+0xc0>)
 80083d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80083da:	f7fe fc81 	bl	8006ce0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80083de:	bf00      	nop
 80083e0:	3718      	adds	r7, #24
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
 80083e6:	bf00      	nop
 80083e8:	20001a8c 	.word	0x20001a8c
 80083ec:	20001a7c 	.word	0x20001a7c
 80083f0:	20001a88 	.word	0x20001a88

080083f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80083f4:	b480      	push	{r7}
 80083f6:	b085      	sub	sp, #20
 80083f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80083fa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80083fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008400:	4b27      	ldr	r3, [pc, #156]	; (80084a0 <prvHeapInit+0xac>)
 8008402:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	f003 0307 	and.w	r3, r3, #7
 800840a:	2b00      	cmp	r3, #0
 800840c:	d00c      	beq.n	8008428 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	3307      	adds	r3, #7
 8008412:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f023 0307 	bic.w	r3, r3, #7
 800841a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800841c:	68ba      	ldr	r2, [r7, #8]
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	1ad3      	subs	r3, r2, r3
 8008422:	4a1f      	ldr	r2, [pc, #124]	; (80084a0 <prvHeapInit+0xac>)
 8008424:	4413      	add	r3, r2
 8008426:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800842c:	4a1d      	ldr	r2, [pc, #116]	; (80084a4 <prvHeapInit+0xb0>)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008432:	4b1c      	ldr	r3, [pc, #112]	; (80084a4 <prvHeapInit+0xb0>)
 8008434:	2200      	movs	r2, #0
 8008436:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	68ba      	ldr	r2, [r7, #8]
 800843c:	4413      	add	r3, r2
 800843e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008440:	2208      	movs	r2, #8
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	1a9b      	subs	r3, r3, r2
 8008446:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	f023 0307 	bic.w	r3, r3, #7
 800844e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	4a15      	ldr	r2, [pc, #84]	; (80084a8 <prvHeapInit+0xb4>)
 8008454:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008456:	4b14      	ldr	r3, [pc, #80]	; (80084a8 <prvHeapInit+0xb4>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	2200      	movs	r2, #0
 800845c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800845e:	4b12      	ldr	r3, [pc, #72]	; (80084a8 <prvHeapInit+0xb4>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	2200      	movs	r2, #0
 8008464:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	68fa      	ldr	r2, [r7, #12]
 800846e:	1ad2      	subs	r2, r2, r3
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008474:	4b0c      	ldr	r3, [pc, #48]	; (80084a8 <prvHeapInit+0xb4>)
 8008476:	681a      	ldr	r2, [r3, #0]
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	4a0a      	ldr	r2, [pc, #40]	; (80084ac <prvHeapInit+0xb8>)
 8008482:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	4a09      	ldr	r2, [pc, #36]	; (80084b0 <prvHeapInit+0xbc>)
 800848a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800848c:	4b09      	ldr	r3, [pc, #36]	; (80084b4 <prvHeapInit+0xc0>)
 800848e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008492:	601a      	str	r2, [r3, #0]
}
 8008494:	bf00      	nop
 8008496:	3714      	adds	r7, #20
 8008498:	46bd      	mov	sp, r7
 800849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849e:	4770      	bx	lr
 80084a0:	20000eb8 	.word	0x20000eb8
 80084a4:	20001a70 	.word	0x20001a70
 80084a8:	20001a78 	.word	0x20001a78
 80084ac:	20001a80 	.word	0x20001a80
 80084b0:	20001a7c 	.word	0x20001a7c
 80084b4:	20001a8c 	.word	0x20001a8c

080084b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80084b8:	b480      	push	{r7}
 80084ba:	b085      	sub	sp, #20
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80084c0:	4b28      	ldr	r3, [pc, #160]	; (8008564 <prvInsertBlockIntoFreeList+0xac>)
 80084c2:	60fb      	str	r3, [r7, #12]
 80084c4:	e002      	b.n	80084cc <prvInsertBlockIntoFreeList+0x14>
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	60fb      	str	r3, [r7, #12]
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	429a      	cmp	r2, r3
 80084d4:	d8f7      	bhi.n	80084c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	68ba      	ldr	r2, [r7, #8]
 80084e0:	4413      	add	r3, r2
 80084e2:	687a      	ldr	r2, [r7, #4]
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d108      	bne.n	80084fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	685a      	ldr	r2, [r3, #4]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	441a      	add	r2, r3
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	68ba      	ldr	r2, [r7, #8]
 8008504:	441a      	add	r2, r3
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	429a      	cmp	r2, r3
 800850c:	d118      	bne.n	8008540 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681a      	ldr	r2, [r3, #0]
 8008512:	4b15      	ldr	r3, [pc, #84]	; (8008568 <prvInsertBlockIntoFreeList+0xb0>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	429a      	cmp	r2, r3
 8008518:	d00d      	beq.n	8008536 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	685a      	ldr	r2, [r3, #4]
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	441a      	add	r2, r3
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	681a      	ldr	r2, [r3, #0]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	601a      	str	r2, [r3, #0]
 8008534:	e008      	b.n	8008548 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008536:	4b0c      	ldr	r3, [pc, #48]	; (8008568 <prvInsertBlockIntoFreeList+0xb0>)
 8008538:	681a      	ldr	r2, [r3, #0]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	601a      	str	r2, [r3, #0]
 800853e:	e003      	b.n	8008548 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681a      	ldr	r2, [r3, #0]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008548:	68fa      	ldr	r2, [r7, #12]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	429a      	cmp	r2, r3
 800854e:	d002      	beq.n	8008556 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	687a      	ldr	r2, [r7, #4]
 8008554:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008556:	bf00      	nop
 8008558:	3714      	adds	r7, #20
 800855a:	46bd      	mov	sp, r7
 800855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008560:	4770      	bx	lr
 8008562:	bf00      	nop
 8008564:	20001a70 	.word	0x20001a70
 8008568:	20001a78 	.word	0x20001a78

0800856c <__errno>:
 800856c:	4b01      	ldr	r3, [pc, #4]	; (8008574 <__errno+0x8>)
 800856e:	6818      	ldr	r0, [r3, #0]
 8008570:	4770      	bx	lr
 8008572:	bf00      	nop
 8008574:	20000080 	.word	0x20000080

08008578 <std>:
 8008578:	2300      	movs	r3, #0
 800857a:	b510      	push	{r4, lr}
 800857c:	4604      	mov	r4, r0
 800857e:	e9c0 3300 	strd	r3, r3, [r0]
 8008582:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008586:	6083      	str	r3, [r0, #8]
 8008588:	8181      	strh	r1, [r0, #12]
 800858a:	6643      	str	r3, [r0, #100]	; 0x64
 800858c:	81c2      	strh	r2, [r0, #14]
 800858e:	6183      	str	r3, [r0, #24]
 8008590:	4619      	mov	r1, r3
 8008592:	2208      	movs	r2, #8
 8008594:	305c      	adds	r0, #92	; 0x5c
 8008596:	f000 f91a 	bl	80087ce <memset>
 800859a:	4b05      	ldr	r3, [pc, #20]	; (80085b0 <std+0x38>)
 800859c:	6263      	str	r3, [r4, #36]	; 0x24
 800859e:	4b05      	ldr	r3, [pc, #20]	; (80085b4 <std+0x3c>)
 80085a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80085a2:	4b05      	ldr	r3, [pc, #20]	; (80085b8 <std+0x40>)
 80085a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80085a6:	4b05      	ldr	r3, [pc, #20]	; (80085bc <std+0x44>)
 80085a8:	6224      	str	r4, [r4, #32]
 80085aa:	6323      	str	r3, [r4, #48]	; 0x30
 80085ac:	bd10      	pop	{r4, pc}
 80085ae:	bf00      	nop
 80085b0:	08008ab5 	.word	0x08008ab5
 80085b4:	08008ad7 	.word	0x08008ad7
 80085b8:	08008b0f 	.word	0x08008b0f
 80085bc:	08008b33 	.word	0x08008b33

080085c0 <_cleanup_r>:
 80085c0:	4901      	ldr	r1, [pc, #4]	; (80085c8 <_cleanup_r+0x8>)
 80085c2:	f000 b8af 	b.w	8008724 <_fwalk_reent>
 80085c6:	bf00      	nop
 80085c8:	08008e0d 	.word	0x08008e0d

080085cc <__sfmoreglue>:
 80085cc:	b570      	push	{r4, r5, r6, lr}
 80085ce:	1e4a      	subs	r2, r1, #1
 80085d0:	2568      	movs	r5, #104	; 0x68
 80085d2:	4355      	muls	r5, r2
 80085d4:	460e      	mov	r6, r1
 80085d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80085da:	f000 f901 	bl	80087e0 <_malloc_r>
 80085de:	4604      	mov	r4, r0
 80085e0:	b140      	cbz	r0, 80085f4 <__sfmoreglue+0x28>
 80085e2:	2100      	movs	r1, #0
 80085e4:	e9c0 1600 	strd	r1, r6, [r0]
 80085e8:	300c      	adds	r0, #12
 80085ea:	60a0      	str	r0, [r4, #8]
 80085ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80085f0:	f000 f8ed 	bl	80087ce <memset>
 80085f4:	4620      	mov	r0, r4
 80085f6:	bd70      	pop	{r4, r5, r6, pc}

080085f8 <__sfp_lock_acquire>:
 80085f8:	4801      	ldr	r0, [pc, #4]	; (8008600 <__sfp_lock_acquire+0x8>)
 80085fa:	f000 b8d8 	b.w	80087ae <__retarget_lock_acquire_recursive>
 80085fe:	bf00      	nop
 8008600:	20002a0c 	.word	0x20002a0c

08008604 <__sfp_lock_release>:
 8008604:	4801      	ldr	r0, [pc, #4]	; (800860c <__sfp_lock_release+0x8>)
 8008606:	f000 b8d3 	b.w	80087b0 <__retarget_lock_release_recursive>
 800860a:	bf00      	nop
 800860c:	20002a0c 	.word	0x20002a0c

08008610 <__sinit_lock_acquire>:
 8008610:	4801      	ldr	r0, [pc, #4]	; (8008618 <__sinit_lock_acquire+0x8>)
 8008612:	f000 b8cc 	b.w	80087ae <__retarget_lock_acquire_recursive>
 8008616:	bf00      	nop
 8008618:	20002a07 	.word	0x20002a07

0800861c <__sinit_lock_release>:
 800861c:	4801      	ldr	r0, [pc, #4]	; (8008624 <__sinit_lock_release+0x8>)
 800861e:	f000 b8c7 	b.w	80087b0 <__retarget_lock_release_recursive>
 8008622:	bf00      	nop
 8008624:	20002a07 	.word	0x20002a07

08008628 <__sinit>:
 8008628:	b510      	push	{r4, lr}
 800862a:	4604      	mov	r4, r0
 800862c:	f7ff fff0 	bl	8008610 <__sinit_lock_acquire>
 8008630:	69a3      	ldr	r3, [r4, #24]
 8008632:	b11b      	cbz	r3, 800863c <__sinit+0x14>
 8008634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008638:	f7ff bff0 	b.w	800861c <__sinit_lock_release>
 800863c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008640:	6523      	str	r3, [r4, #80]	; 0x50
 8008642:	4b13      	ldr	r3, [pc, #76]	; (8008690 <__sinit+0x68>)
 8008644:	4a13      	ldr	r2, [pc, #76]	; (8008694 <__sinit+0x6c>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	62a2      	str	r2, [r4, #40]	; 0x28
 800864a:	42a3      	cmp	r3, r4
 800864c:	bf04      	itt	eq
 800864e:	2301      	moveq	r3, #1
 8008650:	61a3      	streq	r3, [r4, #24]
 8008652:	4620      	mov	r0, r4
 8008654:	f000 f820 	bl	8008698 <__sfp>
 8008658:	6060      	str	r0, [r4, #4]
 800865a:	4620      	mov	r0, r4
 800865c:	f000 f81c 	bl	8008698 <__sfp>
 8008660:	60a0      	str	r0, [r4, #8]
 8008662:	4620      	mov	r0, r4
 8008664:	f000 f818 	bl	8008698 <__sfp>
 8008668:	2200      	movs	r2, #0
 800866a:	60e0      	str	r0, [r4, #12]
 800866c:	2104      	movs	r1, #4
 800866e:	6860      	ldr	r0, [r4, #4]
 8008670:	f7ff ff82 	bl	8008578 <std>
 8008674:	68a0      	ldr	r0, [r4, #8]
 8008676:	2201      	movs	r2, #1
 8008678:	2109      	movs	r1, #9
 800867a:	f7ff ff7d 	bl	8008578 <std>
 800867e:	68e0      	ldr	r0, [r4, #12]
 8008680:	2202      	movs	r2, #2
 8008682:	2112      	movs	r1, #18
 8008684:	f7ff ff78 	bl	8008578 <std>
 8008688:	2301      	movs	r3, #1
 800868a:	61a3      	str	r3, [r4, #24]
 800868c:	e7d2      	b.n	8008634 <__sinit+0xc>
 800868e:	bf00      	nop
 8008690:	080099c4 	.word	0x080099c4
 8008694:	080085c1 	.word	0x080085c1

08008698 <__sfp>:
 8008698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800869a:	4607      	mov	r7, r0
 800869c:	f7ff ffac 	bl	80085f8 <__sfp_lock_acquire>
 80086a0:	4b1e      	ldr	r3, [pc, #120]	; (800871c <__sfp+0x84>)
 80086a2:	681e      	ldr	r6, [r3, #0]
 80086a4:	69b3      	ldr	r3, [r6, #24]
 80086a6:	b913      	cbnz	r3, 80086ae <__sfp+0x16>
 80086a8:	4630      	mov	r0, r6
 80086aa:	f7ff ffbd 	bl	8008628 <__sinit>
 80086ae:	3648      	adds	r6, #72	; 0x48
 80086b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80086b4:	3b01      	subs	r3, #1
 80086b6:	d503      	bpl.n	80086c0 <__sfp+0x28>
 80086b8:	6833      	ldr	r3, [r6, #0]
 80086ba:	b30b      	cbz	r3, 8008700 <__sfp+0x68>
 80086bc:	6836      	ldr	r6, [r6, #0]
 80086be:	e7f7      	b.n	80086b0 <__sfp+0x18>
 80086c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80086c4:	b9d5      	cbnz	r5, 80086fc <__sfp+0x64>
 80086c6:	4b16      	ldr	r3, [pc, #88]	; (8008720 <__sfp+0x88>)
 80086c8:	60e3      	str	r3, [r4, #12]
 80086ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80086ce:	6665      	str	r5, [r4, #100]	; 0x64
 80086d0:	f000 f86c 	bl	80087ac <__retarget_lock_init_recursive>
 80086d4:	f7ff ff96 	bl	8008604 <__sfp_lock_release>
 80086d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80086dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80086e0:	6025      	str	r5, [r4, #0]
 80086e2:	61a5      	str	r5, [r4, #24]
 80086e4:	2208      	movs	r2, #8
 80086e6:	4629      	mov	r1, r5
 80086e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80086ec:	f000 f86f 	bl	80087ce <memset>
 80086f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80086f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80086f8:	4620      	mov	r0, r4
 80086fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086fc:	3468      	adds	r4, #104	; 0x68
 80086fe:	e7d9      	b.n	80086b4 <__sfp+0x1c>
 8008700:	2104      	movs	r1, #4
 8008702:	4638      	mov	r0, r7
 8008704:	f7ff ff62 	bl	80085cc <__sfmoreglue>
 8008708:	4604      	mov	r4, r0
 800870a:	6030      	str	r0, [r6, #0]
 800870c:	2800      	cmp	r0, #0
 800870e:	d1d5      	bne.n	80086bc <__sfp+0x24>
 8008710:	f7ff ff78 	bl	8008604 <__sfp_lock_release>
 8008714:	230c      	movs	r3, #12
 8008716:	603b      	str	r3, [r7, #0]
 8008718:	e7ee      	b.n	80086f8 <__sfp+0x60>
 800871a:	bf00      	nop
 800871c:	080099c4 	.word	0x080099c4
 8008720:	ffff0001 	.word	0xffff0001

08008724 <_fwalk_reent>:
 8008724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008728:	4606      	mov	r6, r0
 800872a:	4688      	mov	r8, r1
 800872c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008730:	2700      	movs	r7, #0
 8008732:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008736:	f1b9 0901 	subs.w	r9, r9, #1
 800873a:	d505      	bpl.n	8008748 <_fwalk_reent+0x24>
 800873c:	6824      	ldr	r4, [r4, #0]
 800873e:	2c00      	cmp	r4, #0
 8008740:	d1f7      	bne.n	8008732 <_fwalk_reent+0xe>
 8008742:	4638      	mov	r0, r7
 8008744:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008748:	89ab      	ldrh	r3, [r5, #12]
 800874a:	2b01      	cmp	r3, #1
 800874c:	d907      	bls.n	800875e <_fwalk_reent+0x3a>
 800874e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008752:	3301      	adds	r3, #1
 8008754:	d003      	beq.n	800875e <_fwalk_reent+0x3a>
 8008756:	4629      	mov	r1, r5
 8008758:	4630      	mov	r0, r6
 800875a:	47c0      	blx	r8
 800875c:	4307      	orrs	r7, r0
 800875e:	3568      	adds	r5, #104	; 0x68
 8008760:	e7e9      	b.n	8008736 <_fwalk_reent+0x12>
	...

08008764 <__libc_init_array>:
 8008764:	b570      	push	{r4, r5, r6, lr}
 8008766:	4d0d      	ldr	r5, [pc, #52]	; (800879c <__libc_init_array+0x38>)
 8008768:	4c0d      	ldr	r4, [pc, #52]	; (80087a0 <__libc_init_array+0x3c>)
 800876a:	1b64      	subs	r4, r4, r5
 800876c:	10a4      	asrs	r4, r4, #2
 800876e:	2600      	movs	r6, #0
 8008770:	42a6      	cmp	r6, r4
 8008772:	d109      	bne.n	8008788 <__libc_init_array+0x24>
 8008774:	4d0b      	ldr	r5, [pc, #44]	; (80087a4 <__libc_init_array+0x40>)
 8008776:	4c0c      	ldr	r4, [pc, #48]	; (80087a8 <__libc_init_array+0x44>)
 8008778:	f000 ffc2 	bl	8009700 <_init>
 800877c:	1b64      	subs	r4, r4, r5
 800877e:	10a4      	asrs	r4, r4, #2
 8008780:	2600      	movs	r6, #0
 8008782:	42a6      	cmp	r6, r4
 8008784:	d105      	bne.n	8008792 <__libc_init_array+0x2e>
 8008786:	bd70      	pop	{r4, r5, r6, pc}
 8008788:	f855 3b04 	ldr.w	r3, [r5], #4
 800878c:	4798      	blx	r3
 800878e:	3601      	adds	r6, #1
 8008790:	e7ee      	b.n	8008770 <__libc_init_array+0xc>
 8008792:	f855 3b04 	ldr.w	r3, [r5], #4
 8008796:	4798      	blx	r3
 8008798:	3601      	adds	r6, #1
 800879a:	e7f2      	b.n	8008782 <__libc_init_array+0x1e>
 800879c:	08009a04 	.word	0x08009a04
 80087a0:	08009a04 	.word	0x08009a04
 80087a4:	08009a04 	.word	0x08009a04
 80087a8:	08009a08 	.word	0x08009a08

080087ac <__retarget_lock_init_recursive>:
 80087ac:	4770      	bx	lr

080087ae <__retarget_lock_acquire_recursive>:
 80087ae:	4770      	bx	lr

080087b0 <__retarget_lock_release_recursive>:
 80087b0:	4770      	bx	lr

080087b2 <memcpy>:
 80087b2:	440a      	add	r2, r1
 80087b4:	4291      	cmp	r1, r2
 80087b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80087ba:	d100      	bne.n	80087be <memcpy+0xc>
 80087bc:	4770      	bx	lr
 80087be:	b510      	push	{r4, lr}
 80087c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80087c8:	4291      	cmp	r1, r2
 80087ca:	d1f9      	bne.n	80087c0 <memcpy+0xe>
 80087cc:	bd10      	pop	{r4, pc}

080087ce <memset>:
 80087ce:	4402      	add	r2, r0
 80087d0:	4603      	mov	r3, r0
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d100      	bne.n	80087d8 <memset+0xa>
 80087d6:	4770      	bx	lr
 80087d8:	f803 1b01 	strb.w	r1, [r3], #1
 80087dc:	e7f9      	b.n	80087d2 <memset+0x4>
	...

080087e0 <_malloc_r>:
 80087e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087e2:	1ccd      	adds	r5, r1, #3
 80087e4:	f025 0503 	bic.w	r5, r5, #3
 80087e8:	3508      	adds	r5, #8
 80087ea:	2d0c      	cmp	r5, #12
 80087ec:	bf38      	it	cc
 80087ee:	250c      	movcc	r5, #12
 80087f0:	2d00      	cmp	r5, #0
 80087f2:	4606      	mov	r6, r0
 80087f4:	db01      	blt.n	80087fa <_malloc_r+0x1a>
 80087f6:	42a9      	cmp	r1, r5
 80087f8:	d903      	bls.n	8008802 <_malloc_r+0x22>
 80087fa:	230c      	movs	r3, #12
 80087fc:	6033      	str	r3, [r6, #0]
 80087fe:	2000      	movs	r0, #0
 8008800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008802:	f000 fbb5 	bl	8008f70 <__malloc_lock>
 8008806:	4921      	ldr	r1, [pc, #132]	; (800888c <_malloc_r+0xac>)
 8008808:	680a      	ldr	r2, [r1, #0]
 800880a:	4614      	mov	r4, r2
 800880c:	b99c      	cbnz	r4, 8008836 <_malloc_r+0x56>
 800880e:	4f20      	ldr	r7, [pc, #128]	; (8008890 <_malloc_r+0xb0>)
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	b923      	cbnz	r3, 800881e <_malloc_r+0x3e>
 8008814:	4621      	mov	r1, r4
 8008816:	4630      	mov	r0, r6
 8008818:	f000 f91c 	bl	8008a54 <_sbrk_r>
 800881c:	6038      	str	r0, [r7, #0]
 800881e:	4629      	mov	r1, r5
 8008820:	4630      	mov	r0, r6
 8008822:	f000 f917 	bl	8008a54 <_sbrk_r>
 8008826:	1c43      	adds	r3, r0, #1
 8008828:	d123      	bne.n	8008872 <_malloc_r+0x92>
 800882a:	230c      	movs	r3, #12
 800882c:	6033      	str	r3, [r6, #0]
 800882e:	4630      	mov	r0, r6
 8008830:	f000 fba4 	bl	8008f7c <__malloc_unlock>
 8008834:	e7e3      	b.n	80087fe <_malloc_r+0x1e>
 8008836:	6823      	ldr	r3, [r4, #0]
 8008838:	1b5b      	subs	r3, r3, r5
 800883a:	d417      	bmi.n	800886c <_malloc_r+0x8c>
 800883c:	2b0b      	cmp	r3, #11
 800883e:	d903      	bls.n	8008848 <_malloc_r+0x68>
 8008840:	6023      	str	r3, [r4, #0]
 8008842:	441c      	add	r4, r3
 8008844:	6025      	str	r5, [r4, #0]
 8008846:	e004      	b.n	8008852 <_malloc_r+0x72>
 8008848:	6863      	ldr	r3, [r4, #4]
 800884a:	42a2      	cmp	r2, r4
 800884c:	bf0c      	ite	eq
 800884e:	600b      	streq	r3, [r1, #0]
 8008850:	6053      	strne	r3, [r2, #4]
 8008852:	4630      	mov	r0, r6
 8008854:	f000 fb92 	bl	8008f7c <__malloc_unlock>
 8008858:	f104 000b 	add.w	r0, r4, #11
 800885c:	1d23      	adds	r3, r4, #4
 800885e:	f020 0007 	bic.w	r0, r0, #7
 8008862:	1ac2      	subs	r2, r0, r3
 8008864:	d0cc      	beq.n	8008800 <_malloc_r+0x20>
 8008866:	1a1b      	subs	r3, r3, r0
 8008868:	50a3      	str	r3, [r4, r2]
 800886a:	e7c9      	b.n	8008800 <_malloc_r+0x20>
 800886c:	4622      	mov	r2, r4
 800886e:	6864      	ldr	r4, [r4, #4]
 8008870:	e7cc      	b.n	800880c <_malloc_r+0x2c>
 8008872:	1cc4      	adds	r4, r0, #3
 8008874:	f024 0403 	bic.w	r4, r4, #3
 8008878:	42a0      	cmp	r0, r4
 800887a:	d0e3      	beq.n	8008844 <_malloc_r+0x64>
 800887c:	1a21      	subs	r1, r4, r0
 800887e:	4630      	mov	r0, r6
 8008880:	f000 f8e8 	bl	8008a54 <_sbrk_r>
 8008884:	3001      	adds	r0, #1
 8008886:	d1dd      	bne.n	8008844 <_malloc_r+0x64>
 8008888:	e7cf      	b.n	800882a <_malloc_r+0x4a>
 800888a:	bf00      	nop
 800888c:	20001a90 	.word	0x20001a90
 8008890:	20001a94 	.word	0x20001a94

08008894 <_puts_r>:
 8008894:	b570      	push	{r4, r5, r6, lr}
 8008896:	460e      	mov	r6, r1
 8008898:	4605      	mov	r5, r0
 800889a:	b118      	cbz	r0, 80088a4 <_puts_r+0x10>
 800889c:	6983      	ldr	r3, [r0, #24]
 800889e:	b90b      	cbnz	r3, 80088a4 <_puts_r+0x10>
 80088a0:	f7ff fec2 	bl	8008628 <__sinit>
 80088a4:	69ab      	ldr	r3, [r5, #24]
 80088a6:	68ac      	ldr	r4, [r5, #8]
 80088a8:	b913      	cbnz	r3, 80088b0 <_puts_r+0x1c>
 80088aa:	4628      	mov	r0, r5
 80088ac:	f7ff febc 	bl	8008628 <__sinit>
 80088b0:	4b2c      	ldr	r3, [pc, #176]	; (8008964 <_puts_r+0xd0>)
 80088b2:	429c      	cmp	r4, r3
 80088b4:	d120      	bne.n	80088f8 <_puts_r+0x64>
 80088b6:	686c      	ldr	r4, [r5, #4]
 80088b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80088ba:	07db      	lsls	r3, r3, #31
 80088bc:	d405      	bmi.n	80088ca <_puts_r+0x36>
 80088be:	89a3      	ldrh	r3, [r4, #12]
 80088c0:	0598      	lsls	r0, r3, #22
 80088c2:	d402      	bmi.n	80088ca <_puts_r+0x36>
 80088c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088c6:	f7ff ff72 	bl	80087ae <__retarget_lock_acquire_recursive>
 80088ca:	89a3      	ldrh	r3, [r4, #12]
 80088cc:	0719      	lsls	r1, r3, #28
 80088ce:	d51d      	bpl.n	800890c <_puts_r+0x78>
 80088d0:	6923      	ldr	r3, [r4, #16]
 80088d2:	b1db      	cbz	r3, 800890c <_puts_r+0x78>
 80088d4:	3e01      	subs	r6, #1
 80088d6:	68a3      	ldr	r3, [r4, #8]
 80088d8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80088dc:	3b01      	subs	r3, #1
 80088de:	60a3      	str	r3, [r4, #8]
 80088e0:	bb39      	cbnz	r1, 8008932 <_puts_r+0x9e>
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	da38      	bge.n	8008958 <_puts_r+0xc4>
 80088e6:	4622      	mov	r2, r4
 80088e8:	210a      	movs	r1, #10
 80088ea:	4628      	mov	r0, r5
 80088ec:	f000 f926 	bl	8008b3c <__swbuf_r>
 80088f0:	3001      	adds	r0, #1
 80088f2:	d011      	beq.n	8008918 <_puts_r+0x84>
 80088f4:	250a      	movs	r5, #10
 80088f6:	e011      	b.n	800891c <_puts_r+0x88>
 80088f8:	4b1b      	ldr	r3, [pc, #108]	; (8008968 <_puts_r+0xd4>)
 80088fa:	429c      	cmp	r4, r3
 80088fc:	d101      	bne.n	8008902 <_puts_r+0x6e>
 80088fe:	68ac      	ldr	r4, [r5, #8]
 8008900:	e7da      	b.n	80088b8 <_puts_r+0x24>
 8008902:	4b1a      	ldr	r3, [pc, #104]	; (800896c <_puts_r+0xd8>)
 8008904:	429c      	cmp	r4, r3
 8008906:	bf08      	it	eq
 8008908:	68ec      	ldreq	r4, [r5, #12]
 800890a:	e7d5      	b.n	80088b8 <_puts_r+0x24>
 800890c:	4621      	mov	r1, r4
 800890e:	4628      	mov	r0, r5
 8008910:	f000 f978 	bl	8008c04 <__swsetup_r>
 8008914:	2800      	cmp	r0, #0
 8008916:	d0dd      	beq.n	80088d4 <_puts_r+0x40>
 8008918:	f04f 35ff 	mov.w	r5, #4294967295
 800891c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800891e:	07da      	lsls	r2, r3, #31
 8008920:	d405      	bmi.n	800892e <_puts_r+0x9a>
 8008922:	89a3      	ldrh	r3, [r4, #12]
 8008924:	059b      	lsls	r3, r3, #22
 8008926:	d402      	bmi.n	800892e <_puts_r+0x9a>
 8008928:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800892a:	f7ff ff41 	bl	80087b0 <__retarget_lock_release_recursive>
 800892e:	4628      	mov	r0, r5
 8008930:	bd70      	pop	{r4, r5, r6, pc}
 8008932:	2b00      	cmp	r3, #0
 8008934:	da04      	bge.n	8008940 <_puts_r+0xac>
 8008936:	69a2      	ldr	r2, [r4, #24]
 8008938:	429a      	cmp	r2, r3
 800893a:	dc06      	bgt.n	800894a <_puts_r+0xb6>
 800893c:	290a      	cmp	r1, #10
 800893e:	d004      	beq.n	800894a <_puts_r+0xb6>
 8008940:	6823      	ldr	r3, [r4, #0]
 8008942:	1c5a      	adds	r2, r3, #1
 8008944:	6022      	str	r2, [r4, #0]
 8008946:	7019      	strb	r1, [r3, #0]
 8008948:	e7c5      	b.n	80088d6 <_puts_r+0x42>
 800894a:	4622      	mov	r2, r4
 800894c:	4628      	mov	r0, r5
 800894e:	f000 f8f5 	bl	8008b3c <__swbuf_r>
 8008952:	3001      	adds	r0, #1
 8008954:	d1bf      	bne.n	80088d6 <_puts_r+0x42>
 8008956:	e7df      	b.n	8008918 <_puts_r+0x84>
 8008958:	6823      	ldr	r3, [r4, #0]
 800895a:	250a      	movs	r5, #10
 800895c:	1c5a      	adds	r2, r3, #1
 800895e:	6022      	str	r2, [r4, #0]
 8008960:	701d      	strb	r5, [r3, #0]
 8008962:	e7db      	b.n	800891c <_puts_r+0x88>
 8008964:	08009984 	.word	0x08009984
 8008968:	080099a4 	.word	0x080099a4
 800896c:	08009964 	.word	0x08009964

08008970 <puts>:
 8008970:	4b02      	ldr	r3, [pc, #8]	; (800897c <puts+0xc>)
 8008972:	4601      	mov	r1, r0
 8008974:	6818      	ldr	r0, [r3, #0]
 8008976:	f7ff bf8d 	b.w	8008894 <_puts_r>
 800897a:	bf00      	nop
 800897c:	20000080 	.word	0x20000080

08008980 <cleanup_glue>:
 8008980:	b538      	push	{r3, r4, r5, lr}
 8008982:	460c      	mov	r4, r1
 8008984:	6809      	ldr	r1, [r1, #0]
 8008986:	4605      	mov	r5, r0
 8008988:	b109      	cbz	r1, 800898e <cleanup_glue+0xe>
 800898a:	f7ff fff9 	bl	8008980 <cleanup_glue>
 800898e:	4621      	mov	r1, r4
 8008990:	4628      	mov	r0, r5
 8008992:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008996:	f000 baf7 	b.w	8008f88 <_free_r>
	...

0800899c <_reclaim_reent>:
 800899c:	4b2c      	ldr	r3, [pc, #176]	; (8008a50 <_reclaim_reent+0xb4>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4283      	cmp	r3, r0
 80089a2:	b570      	push	{r4, r5, r6, lr}
 80089a4:	4604      	mov	r4, r0
 80089a6:	d051      	beq.n	8008a4c <_reclaim_reent+0xb0>
 80089a8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80089aa:	b143      	cbz	r3, 80089be <_reclaim_reent+0x22>
 80089ac:	68db      	ldr	r3, [r3, #12]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d14a      	bne.n	8008a48 <_reclaim_reent+0xac>
 80089b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089b4:	6819      	ldr	r1, [r3, #0]
 80089b6:	b111      	cbz	r1, 80089be <_reclaim_reent+0x22>
 80089b8:	4620      	mov	r0, r4
 80089ba:	f000 fae5 	bl	8008f88 <_free_r>
 80089be:	6961      	ldr	r1, [r4, #20]
 80089c0:	b111      	cbz	r1, 80089c8 <_reclaim_reent+0x2c>
 80089c2:	4620      	mov	r0, r4
 80089c4:	f000 fae0 	bl	8008f88 <_free_r>
 80089c8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80089ca:	b111      	cbz	r1, 80089d2 <_reclaim_reent+0x36>
 80089cc:	4620      	mov	r0, r4
 80089ce:	f000 fadb 	bl	8008f88 <_free_r>
 80089d2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80089d4:	b111      	cbz	r1, 80089dc <_reclaim_reent+0x40>
 80089d6:	4620      	mov	r0, r4
 80089d8:	f000 fad6 	bl	8008f88 <_free_r>
 80089dc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80089de:	b111      	cbz	r1, 80089e6 <_reclaim_reent+0x4a>
 80089e0:	4620      	mov	r0, r4
 80089e2:	f000 fad1 	bl	8008f88 <_free_r>
 80089e6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80089e8:	b111      	cbz	r1, 80089f0 <_reclaim_reent+0x54>
 80089ea:	4620      	mov	r0, r4
 80089ec:	f000 facc 	bl	8008f88 <_free_r>
 80089f0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80089f2:	b111      	cbz	r1, 80089fa <_reclaim_reent+0x5e>
 80089f4:	4620      	mov	r0, r4
 80089f6:	f000 fac7 	bl	8008f88 <_free_r>
 80089fa:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80089fc:	b111      	cbz	r1, 8008a04 <_reclaim_reent+0x68>
 80089fe:	4620      	mov	r0, r4
 8008a00:	f000 fac2 	bl	8008f88 <_free_r>
 8008a04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a06:	b111      	cbz	r1, 8008a0e <_reclaim_reent+0x72>
 8008a08:	4620      	mov	r0, r4
 8008a0a:	f000 fabd 	bl	8008f88 <_free_r>
 8008a0e:	69a3      	ldr	r3, [r4, #24]
 8008a10:	b1e3      	cbz	r3, 8008a4c <_reclaim_reent+0xb0>
 8008a12:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008a14:	4620      	mov	r0, r4
 8008a16:	4798      	blx	r3
 8008a18:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008a1a:	b1b9      	cbz	r1, 8008a4c <_reclaim_reent+0xb0>
 8008a1c:	4620      	mov	r0, r4
 8008a1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008a22:	f7ff bfad 	b.w	8008980 <cleanup_glue>
 8008a26:	5949      	ldr	r1, [r1, r5]
 8008a28:	b941      	cbnz	r1, 8008a3c <_reclaim_reent+0xa0>
 8008a2a:	3504      	adds	r5, #4
 8008a2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a2e:	2d80      	cmp	r5, #128	; 0x80
 8008a30:	68d9      	ldr	r1, [r3, #12]
 8008a32:	d1f8      	bne.n	8008a26 <_reclaim_reent+0x8a>
 8008a34:	4620      	mov	r0, r4
 8008a36:	f000 faa7 	bl	8008f88 <_free_r>
 8008a3a:	e7ba      	b.n	80089b2 <_reclaim_reent+0x16>
 8008a3c:	680e      	ldr	r6, [r1, #0]
 8008a3e:	4620      	mov	r0, r4
 8008a40:	f000 faa2 	bl	8008f88 <_free_r>
 8008a44:	4631      	mov	r1, r6
 8008a46:	e7ef      	b.n	8008a28 <_reclaim_reent+0x8c>
 8008a48:	2500      	movs	r5, #0
 8008a4a:	e7ef      	b.n	8008a2c <_reclaim_reent+0x90>
 8008a4c:	bd70      	pop	{r4, r5, r6, pc}
 8008a4e:	bf00      	nop
 8008a50:	20000080 	.word	0x20000080

08008a54 <_sbrk_r>:
 8008a54:	b538      	push	{r3, r4, r5, lr}
 8008a56:	4d06      	ldr	r5, [pc, #24]	; (8008a70 <_sbrk_r+0x1c>)
 8008a58:	2300      	movs	r3, #0
 8008a5a:	4604      	mov	r4, r0
 8008a5c:	4608      	mov	r0, r1
 8008a5e:	602b      	str	r3, [r5, #0]
 8008a60:	f7f8 ffdc 	bl	8001a1c <_sbrk>
 8008a64:	1c43      	adds	r3, r0, #1
 8008a66:	d102      	bne.n	8008a6e <_sbrk_r+0x1a>
 8008a68:	682b      	ldr	r3, [r5, #0]
 8008a6a:	b103      	cbz	r3, 8008a6e <_sbrk_r+0x1a>
 8008a6c:	6023      	str	r3, [r4, #0]
 8008a6e:	bd38      	pop	{r3, r4, r5, pc}
 8008a70:	20002a10 	.word	0x20002a10

08008a74 <siprintf>:
 8008a74:	b40e      	push	{r1, r2, r3}
 8008a76:	b500      	push	{lr}
 8008a78:	b09c      	sub	sp, #112	; 0x70
 8008a7a:	ab1d      	add	r3, sp, #116	; 0x74
 8008a7c:	9002      	str	r0, [sp, #8]
 8008a7e:	9006      	str	r0, [sp, #24]
 8008a80:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008a84:	4809      	ldr	r0, [pc, #36]	; (8008aac <siprintf+0x38>)
 8008a86:	9107      	str	r1, [sp, #28]
 8008a88:	9104      	str	r1, [sp, #16]
 8008a8a:	4909      	ldr	r1, [pc, #36]	; (8008ab0 <siprintf+0x3c>)
 8008a8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a90:	9105      	str	r1, [sp, #20]
 8008a92:	6800      	ldr	r0, [r0, #0]
 8008a94:	9301      	str	r3, [sp, #4]
 8008a96:	a902      	add	r1, sp, #8
 8008a98:	f000 fb22 	bl	80090e0 <_svfiprintf_r>
 8008a9c:	9b02      	ldr	r3, [sp, #8]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	701a      	strb	r2, [r3, #0]
 8008aa2:	b01c      	add	sp, #112	; 0x70
 8008aa4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008aa8:	b003      	add	sp, #12
 8008aaa:	4770      	bx	lr
 8008aac:	20000080 	.word	0x20000080
 8008ab0:	ffff0208 	.word	0xffff0208

08008ab4 <__sread>:
 8008ab4:	b510      	push	{r4, lr}
 8008ab6:	460c      	mov	r4, r1
 8008ab8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008abc:	f000 fda4 	bl	8009608 <_read_r>
 8008ac0:	2800      	cmp	r0, #0
 8008ac2:	bfab      	itete	ge
 8008ac4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008ac6:	89a3      	ldrhlt	r3, [r4, #12]
 8008ac8:	181b      	addge	r3, r3, r0
 8008aca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008ace:	bfac      	ite	ge
 8008ad0:	6563      	strge	r3, [r4, #84]	; 0x54
 8008ad2:	81a3      	strhlt	r3, [r4, #12]
 8008ad4:	bd10      	pop	{r4, pc}

08008ad6 <__swrite>:
 8008ad6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ada:	461f      	mov	r7, r3
 8008adc:	898b      	ldrh	r3, [r1, #12]
 8008ade:	05db      	lsls	r3, r3, #23
 8008ae0:	4605      	mov	r5, r0
 8008ae2:	460c      	mov	r4, r1
 8008ae4:	4616      	mov	r6, r2
 8008ae6:	d505      	bpl.n	8008af4 <__swrite+0x1e>
 8008ae8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008aec:	2302      	movs	r3, #2
 8008aee:	2200      	movs	r2, #0
 8008af0:	f000 f9c8 	bl	8008e84 <_lseek_r>
 8008af4:	89a3      	ldrh	r3, [r4, #12]
 8008af6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008afa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008afe:	81a3      	strh	r3, [r4, #12]
 8008b00:	4632      	mov	r2, r6
 8008b02:	463b      	mov	r3, r7
 8008b04:	4628      	mov	r0, r5
 8008b06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b0a:	f000 b869 	b.w	8008be0 <_write_r>

08008b0e <__sseek>:
 8008b0e:	b510      	push	{r4, lr}
 8008b10:	460c      	mov	r4, r1
 8008b12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b16:	f000 f9b5 	bl	8008e84 <_lseek_r>
 8008b1a:	1c43      	adds	r3, r0, #1
 8008b1c:	89a3      	ldrh	r3, [r4, #12]
 8008b1e:	bf15      	itete	ne
 8008b20:	6560      	strne	r0, [r4, #84]	; 0x54
 8008b22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008b26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008b2a:	81a3      	strheq	r3, [r4, #12]
 8008b2c:	bf18      	it	ne
 8008b2e:	81a3      	strhne	r3, [r4, #12]
 8008b30:	bd10      	pop	{r4, pc}

08008b32 <__sclose>:
 8008b32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b36:	f000 b8d3 	b.w	8008ce0 <_close_r>
	...

08008b3c <__swbuf_r>:
 8008b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b3e:	460e      	mov	r6, r1
 8008b40:	4614      	mov	r4, r2
 8008b42:	4605      	mov	r5, r0
 8008b44:	b118      	cbz	r0, 8008b4e <__swbuf_r+0x12>
 8008b46:	6983      	ldr	r3, [r0, #24]
 8008b48:	b90b      	cbnz	r3, 8008b4e <__swbuf_r+0x12>
 8008b4a:	f7ff fd6d 	bl	8008628 <__sinit>
 8008b4e:	4b21      	ldr	r3, [pc, #132]	; (8008bd4 <__swbuf_r+0x98>)
 8008b50:	429c      	cmp	r4, r3
 8008b52:	d12b      	bne.n	8008bac <__swbuf_r+0x70>
 8008b54:	686c      	ldr	r4, [r5, #4]
 8008b56:	69a3      	ldr	r3, [r4, #24]
 8008b58:	60a3      	str	r3, [r4, #8]
 8008b5a:	89a3      	ldrh	r3, [r4, #12]
 8008b5c:	071a      	lsls	r2, r3, #28
 8008b5e:	d52f      	bpl.n	8008bc0 <__swbuf_r+0x84>
 8008b60:	6923      	ldr	r3, [r4, #16]
 8008b62:	b36b      	cbz	r3, 8008bc0 <__swbuf_r+0x84>
 8008b64:	6923      	ldr	r3, [r4, #16]
 8008b66:	6820      	ldr	r0, [r4, #0]
 8008b68:	1ac0      	subs	r0, r0, r3
 8008b6a:	6963      	ldr	r3, [r4, #20]
 8008b6c:	b2f6      	uxtb	r6, r6
 8008b6e:	4283      	cmp	r3, r0
 8008b70:	4637      	mov	r7, r6
 8008b72:	dc04      	bgt.n	8008b7e <__swbuf_r+0x42>
 8008b74:	4621      	mov	r1, r4
 8008b76:	4628      	mov	r0, r5
 8008b78:	f000 f948 	bl	8008e0c <_fflush_r>
 8008b7c:	bb30      	cbnz	r0, 8008bcc <__swbuf_r+0x90>
 8008b7e:	68a3      	ldr	r3, [r4, #8]
 8008b80:	3b01      	subs	r3, #1
 8008b82:	60a3      	str	r3, [r4, #8]
 8008b84:	6823      	ldr	r3, [r4, #0]
 8008b86:	1c5a      	adds	r2, r3, #1
 8008b88:	6022      	str	r2, [r4, #0]
 8008b8a:	701e      	strb	r6, [r3, #0]
 8008b8c:	6963      	ldr	r3, [r4, #20]
 8008b8e:	3001      	adds	r0, #1
 8008b90:	4283      	cmp	r3, r0
 8008b92:	d004      	beq.n	8008b9e <__swbuf_r+0x62>
 8008b94:	89a3      	ldrh	r3, [r4, #12]
 8008b96:	07db      	lsls	r3, r3, #31
 8008b98:	d506      	bpl.n	8008ba8 <__swbuf_r+0x6c>
 8008b9a:	2e0a      	cmp	r6, #10
 8008b9c:	d104      	bne.n	8008ba8 <__swbuf_r+0x6c>
 8008b9e:	4621      	mov	r1, r4
 8008ba0:	4628      	mov	r0, r5
 8008ba2:	f000 f933 	bl	8008e0c <_fflush_r>
 8008ba6:	b988      	cbnz	r0, 8008bcc <__swbuf_r+0x90>
 8008ba8:	4638      	mov	r0, r7
 8008baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bac:	4b0a      	ldr	r3, [pc, #40]	; (8008bd8 <__swbuf_r+0x9c>)
 8008bae:	429c      	cmp	r4, r3
 8008bb0:	d101      	bne.n	8008bb6 <__swbuf_r+0x7a>
 8008bb2:	68ac      	ldr	r4, [r5, #8]
 8008bb4:	e7cf      	b.n	8008b56 <__swbuf_r+0x1a>
 8008bb6:	4b09      	ldr	r3, [pc, #36]	; (8008bdc <__swbuf_r+0xa0>)
 8008bb8:	429c      	cmp	r4, r3
 8008bba:	bf08      	it	eq
 8008bbc:	68ec      	ldreq	r4, [r5, #12]
 8008bbe:	e7ca      	b.n	8008b56 <__swbuf_r+0x1a>
 8008bc0:	4621      	mov	r1, r4
 8008bc2:	4628      	mov	r0, r5
 8008bc4:	f000 f81e 	bl	8008c04 <__swsetup_r>
 8008bc8:	2800      	cmp	r0, #0
 8008bca:	d0cb      	beq.n	8008b64 <__swbuf_r+0x28>
 8008bcc:	f04f 37ff 	mov.w	r7, #4294967295
 8008bd0:	e7ea      	b.n	8008ba8 <__swbuf_r+0x6c>
 8008bd2:	bf00      	nop
 8008bd4:	08009984 	.word	0x08009984
 8008bd8:	080099a4 	.word	0x080099a4
 8008bdc:	08009964 	.word	0x08009964

08008be0 <_write_r>:
 8008be0:	b538      	push	{r3, r4, r5, lr}
 8008be2:	4d07      	ldr	r5, [pc, #28]	; (8008c00 <_write_r+0x20>)
 8008be4:	4604      	mov	r4, r0
 8008be6:	4608      	mov	r0, r1
 8008be8:	4611      	mov	r1, r2
 8008bea:	2200      	movs	r2, #0
 8008bec:	602a      	str	r2, [r5, #0]
 8008bee:	461a      	mov	r2, r3
 8008bf0:	f7f8 fafa 	bl	80011e8 <_write>
 8008bf4:	1c43      	adds	r3, r0, #1
 8008bf6:	d102      	bne.n	8008bfe <_write_r+0x1e>
 8008bf8:	682b      	ldr	r3, [r5, #0]
 8008bfa:	b103      	cbz	r3, 8008bfe <_write_r+0x1e>
 8008bfc:	6023      	str	r3, [r4, #0]
 8008bfe:	bd38      	pop	{r3, r4, r5, pc}
 8008c00:	20002a10 	.word	0x20002a10

08008c04 <__swsetup_r>:
 8008c04:	4b32      	ldr	r3, [pc, #200]	; (8008cd0 <__swsetup_r+0xcc>)
 8008c06:	b570      	push	{r4, r5, r6, lr}
 8008c08:	681d      	ldr	r5, [r3, #0]
 8008c0a:	4606      	mov	r6, r0
 8008c0c:	460c      	mov	r4, r1
 8008c0e:	b125      	cbz	r5, 8008c1a <__swsetup_r+0x16>
 8008c10:	69ab      	ldr	r3, [r5, #24]
 8008c12:	b913      	cbnz	r3, 8008c1a <__swsetup_r+0x16>
 8008c14:	4628      	mov	r0, r5
 8008c16:	f7ff fd07 	bl	8008628 <__sinit>
 8008c1a:	4b2e      	ldr	r3, [pc, #184]	; (8008cd4 <__swsetup_r+0xd0>)
 8008c1c:	429c      	cmp	r4, r3
 8008c1e:	d10f      	bne.n	8008c40 <__swsetup_r+0x3c>
 8008c20:	686c      	ldr	r4, [r5, #4]
 8008c22:	89a3      	ldrh	r3, [r4, #12]
 8008c24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008c28:	0719      	lsls	r1, r3, #28
 8008c2a:	d42c      	bmi.n	8008c86 <__swsetup_r+0x82>
 8008c2c:	06dd      	lsls	r5, r3, #27
 8008c2e:	d411      	bmi.n	8008c54 <__swsetup_r+0x50>
 8008c30:	2309      	movs	r3, #9
 8008c32:	6033      	str	r3, [r6, #0]
 8008c34:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008c38:	81a3      	strh	r3, [r4, #12]
 8008c3a:	f04f 30ff 	mov.w	r0, #4294967295
 8008c3e:	e03e      	b.n	8008cbe <__swsetup_r+0xba>
 8008c40:	4b25      	ldr	r3, [pc, #148]	; (8008cd8 <__swsetup_r+0xd4>)
 8008c42:	429c      	cmp	r4, r3
 8008c44:	d101      	bne.n	8008c4a <__swsetup_r+0x46>
 8008c46:	68ac      	ldr	r4, [r5, #8]
 8008c48:	e7eb      	b.n	8008c22 <__swsetup_r+0x1e>
 8008c4a:	4b24      	ldr	r3, [pc, #144]	; (8008cdc <__swsetup_r+0xd8>)
 8008c4c:	429c      	cmp	r4, r3
 8008c4e:	bf08      	it	eq
 8008c50:	68ec      	ldreq	r4, [r5, #12]
 8008c52:	e7e6      	b.n	8008c22 <__swsetup_r+0x1e>
 8008c54:	0758      	lsls	r0, r3, #29
 8008c56:	d512      	bpl.n	8008c7e <__swsetup_r+0x7a>
 8008c58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c5a:	b141      	cbz	r1, 8008c6e <__swsetup_r+0x6a>
 8008c5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c60:	4299      	cmp	r1, r3
 8008c62:	d002      	beq.n	8008c6a <__swsetup_r+0x66>
 8008c64:	4630      	mov	r0, r6
 8008c66:	f000 f98f 	bl	8008f88 <_free_r>
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	6363      	str	r3, [r4, #52]	; 0x34
 8008c6e:	89a3      	ldrh	r3, [r4, #12]
 8008c70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008c74:	81a3      	strh	r3, [r4, #12]
 8008c76:	2300      	movs	r3, #0
 8008c78:	6063      	str	r3, [r4, #4]
 8008c7a:	6923      	ldr	r3, [r4, #16]
 8008c7c:	6023      	str	r3, [r4, #0]
 8008c7e:	89a3      	ldrh	r3, [r4, #12]
 8008c80:	f043 0308 	orr.w	r3, r3, #8
 8008c84:	81a3      	strh	r3, [r4, #12]
 8008c86:	6923      	ldr	r3, [r4, #16]
 8008c88:	b94b      	cbnz	r3, 8008c9e <__swsetup_r+0x9a>
 8008c8a:	89a3      	ldrh	r3, [r4, #12]
 8008c8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008c90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c94:	d003      	beq.n	8008c9e <__swsetup_r+0x9a>
 8008c96:	4621      	mov	r1, r4
 8008c98:	4630      	mov	r0, r6
 8008c9a:	f000 f929 	bl	8008ef0 <__smakebuf_r>
 8008c9e:	89a0      	ldrh	r0, [r4, #12]
 8008ca0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ca4:	f010 0301 	ands.w	r3, r0, #1
 8008ca8:	d00a      	beq.n	8008cc0 <__swsetup_r+0xbc>
 8008caa:	2300      	movs	r3, #0
 8008cac:	60a3      	str	r3, [r4, #8]
 8008cae:	6963      	ldr	r3, [r4, #20]
 8008cb0:	425b      	negs	r3, r3
 8008cb2:	61a3      	str	r3, [r4, #24]
 8008cb4:	6923      	ldr	r3, [r4, #16]
 8008cb6:	b943      	cbnz	r3, 8008cca <__swsetup_r+0xc6>
 8008cb8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008cbc:	d1ba      	bne.n	8008c34 <__swsetup_r+0x30>
 8008cbe:	bd70      	pop	{r4, r5, r6, pc}
 8008cc0:	0781      	lsls	r1, r0, #30
 8008cc2:	bf58      	it	pl
 8008cc4:	6963      	ldrpl	r3, [r4, #20]
 8008cc6:	60a3      	str	r3, [r4, #8]
 8008cc8:	e7f4      	b.n	8008cb4 <__swsetup_r+0xb0>
 8008cca:	2000      	movs	r0, #0
 8008ccc:	e7f7      	b.n	8008cbe <__swsetup_r+0xba>
 8008cce:	bf00      	nop
 8008cd0:	20000080 	.word	0x20000080
 8008cd4:	08009984 	.word	0x08009984
 8008cd8:	080099a4 	.word	0x080099a4
 8008cdc:	08009964 	.word	0x08009964

08008ce0 <_close_r>:
 8008ce0:	b538      	push	{r3, r4, r5, lr}
 8008ce2:	4d06      	ldr	r5, [pc, #24]	; (8008cfc <_close_r+0x1c>)
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	4604      	mov	r4, r0
 8008ce8:	4608      	mov	r0, r1
 8008cea:	602b      	str	r3, [r5, #0]
 8008cec:	f7f8 fe61 	bl	80019b2 <_close>
 8008cf0:	1c43      	adds	r3, r0, #1
 8008cf2:	d102      	bne.n	8008cfa <_close_r+0x1a>
 8008cf4:	682b      	ldr	r3, [r5, #0]
 8008cf6:	b103      	cbz	r3, 8008cfa <_close_r+0x1a>
 8008cf8:	6023      	str	r3, [r4, #0]
 8008cfa:	bd38      	pop	{r3, r4, r5, pc}
 8008cfc:	20002a10 	.word	0x20002a10

08008d00 <__sflush_r>:
 8008d00:	898a      	ldrh	r2, [r1, #12]
 8008d02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d06:	4605      	mov	r5, r0
 8008d08:	0710      	lsls	r0, r2, #28
 8008d0a:	460c      	mov	r4, r1
 8008d0c:	d458      	bmi.n	8008dc0 <__sflush_r+0xc0>
 8008d0e:	684b      	ldr	r3, [r1, #4]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	dc05      	bgt.n	8008d20 <__sflush_r+0x20>
 8008d14:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	dc02      	bgt.n	8008d20 <__sflush_r+0x20>
 8008d1a:	2000      	movs	r0, #0
 8008d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d22:	2e00      	cmp	r6, #0
 8008d24:	d0f9      	beq.n	8008d1a <__sflush_r+0x1a>
 8008d26:	2300      	movs	r3, #0
 8008d28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008d2c:	682f      	ldr	r7, [r5, #0]
 8008d2e:	602b      	str	r3, [r5, #0]
 8008d30:	d032      	beq.n	8008d98 <__sflush_r+0x98>
 8008d32:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008d34:	89a3      	ldrh	r3, [r4, #12]
 8008d36:	075a      	lsls	r2, r3, #29
 8008d38:	d505      	bpl.n	8008d46 <__sflush_r+0x46>
 8008d3a:	6863      	ldr	r3, [r4, #4]
 8008d3c:	1ac0      	subs	r0, r0, r3
 8008d3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008d40:	b10b      	cbz	r3, 8008d46 <__sflush_r+0x46>
 8008d42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008d44:	1ac0      	subs	r0, r0, r3
 8008d46:	2300      	movs	r3, #0
 8008d48:	4602      	mov	r2, r0
 8008d4a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d4c:	6a21      	ldr	r1, [r4, #32]
 8008d4e:	4628      	mov	r0, r5
 8008d50:	47b0      	blx	r6
 8008d52:	1c43      	adds	r3, r0, #1
 8008d54:	89a3      	ldrh	r3, [r4, #12]
 8008d56:	d106      	bne.n	8008d66 <__sflush_r+0x66>
 8008d58:	6829      	ldr	r1, [r5, #0]
 8008d5a:	291d      	cmp	r1, #29
 8008d5c:	d82c      	bhi.n	8008db8 <__sflush_r+0xb8>
 8008d5e:	4a2a      	ldr	r2, [pc, #168]	; (8008e08 <__sflush_r+0x108>)
 8008d60:	40ca      	lsrs	r2, r1
 8008d62:	07d6      	lsls	r6, r2, #31
 8008d64:	d528      	bpl.n	8008db8 <__sflush_r+0xb8>
 8008d66:	2200      	movs	r2, #0
 8008d68:	6062      	str	r2, [r4, #4]
 8008d6a:	04d9      	lsls	r1, r3, #19
 8008d6c:	6922      	ldr	r2, [r4, #16]
 8008d6e:	6022      	str	r2, [r4, #0]
 8008d70:	d504      	bpl.n	8008d7c <__sflush_r+0x7c>
 8008d72:	1c42      	adds	r2, r0, #1
 8008d74:	d101      	bne.n	8008d7a <__sflush_r+0x7a>
 8008d76:	682b      	ldr	r3, [r5, #0]
 8008d78:	b903      	cbnz	r3, 8008d7c <__sflush_r+0x7c>
 8008d7a:	6560      	str	r0, [r4, #84]	; 0x54
 8008d7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d7e:	602f      	str	r7, [r5, #0]
 8008d80:	2900      	cmp	r1, #0
 8008d82:	d0ca      	beq.n	8008d1a <__sflush_r+0x1a>
 8008d84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d88:	4299      	cmp	r1, r3
 8008d8a:	d002      	beq.n	8008d92 <__sflush_r+0x92>
 8008d8c:	4628      	mov	r0, r5
 8008d8e:	f000 f8fb 	bl	8008f88 <_free_r>
 8008d92:	2000      	movs	r0, #0
 8008d94:	6360      	str	r0, [r4, #52]	; 0x34
 8008d96:	e7c1      	b.n	8008d1c <__sflush_r+0x1c>
 8008d98:	6a21      	ldr	r1, [r4, #32]
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	4628      	mov	r0, r5
 8008d9e:	47b0      	blx	r6
 8008da0:	1c41      	adds	r1, r0, #1
 8008da2:	d1c7      	bne.n	8008d34 <__sflush_r+0x34>
 8008da4:	682b      	ldr	r3, [r5, #0]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d0c4      	beq.n	8008d34 <__sflush_r+0x34>
 8008daa:	2b1d      	cmp	r3, #29
 8008dac:	d001      	beq.n	8008db2 <__sflush_r+0xb2>
 8008dae:	2b16      	cmp	r3, #22
 8008db0:	d101      	bne.n	8008db6 <__sflush_r+0xb6>
 8008db2:	602f      	str	r7, [r5, #0]
 8008db4:	e7b1      	b.n	8008d1a <__sflush_r+0x1a>
 8008db6:	89a3      	ldrh	r3, [r4, #12]
 8008db8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008dbc:	81a3      	strh	r3, [r4, #12]
 8008dbe:	e7ad      	b.n	8008d1c <__sflush_r+0x1c>
 8008dc0:	690f      	ldr	r7, [r1, #16]
 8008dc2:	2f00      	cmp	r7, #0
 8008dc4:	d0a9      	beq.n	8008d1a <__sflush_r+0x1a>
 8008dc6:	0793      	lsls	r3, r2, #30
 8008dc8:	680e      	ldr	r6, [r1, #0]
 8008dca:	bf08      	it	eq
 8008dcc:	694b      	ldreq	r3, [r1, #20]
 8008dce:	600f      	str	r7, [r1, #0]
 8008dd0:	bf18      	it	ne
 8008dd2:	2300      	movne	r3, #0
 8008dd4:	eba6 0807 	sub.w	r8, r6, r7
 8008dd8:	608b      	str	r3, [r1, #8]
 8008dda:	f1b8 0f00 	cmp.w	r8, #0
 8008dde:	dd9c      	ble.n	8008d1a <__sflush_r+0x1a>
 8008de0:	6a21      	ldr	r1, [r4, #32]
 8008de2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008de4:	4643      	mov	r3, r8
 8008de6:	463a      	mov	r2, r7
 8008de8:	4628      	mov	r0, r5
 8008dea:	47b0      	blx	r6
 8008dec:	2800      	cmp	r0, #0
 8008dee:	dc06      	bgt.n	8008dfe <__sflush_r+0xfe>
 8008df0:	89a3      	ldrh	r3, [r4, #12]
 8008df2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008df6:	81a3      	strh	r3, [r4, #12]
 8008df8:	f04f 30ff 	mov.w	r0, #4294967295
 8008dfc:	e78e      	b.n	8008d1c <__sflush_r+0x1c>
 8008dfe:	4407      	add	r7, r0
 8008e00:	eba8 0800 	sub.w	r8, r8, r0
 8008e04:	e7e9      	b.n	8008dda <__sflush_r+0xda>
 8008e06:	bf00      	nop
 8008e08:	20400001 	.word	0x20400001

08008e0c <_fflush_r>:
 8008e0c:	b538      	push	{r3, r4, r5, lr}
 8008e0e:	690b      	ldr	r3, [r1, #16]
 8008e10:	4605      	mov	r5, r0
 8008e12:	460c      	mov	r4, r1
 8008e14:	b913      	cbnz	r3, 8008e1c <_fflush_r+0x10>
 8008e16:	2500      	movs	r5, #0
 8008e18:	4628      	mov	r0, r5
 8008e1a:	bd38      	pop	{r3, r4, r5, pc}
 8008e1c:	b118      	cbz	r0, 8008e26 <_fflush_r+0x1a>
 8008e1e:	6983      	ldr	r3, [r0, #24]
 8008e20:	b90b      	cbnz	r3, 8008e26 <_fflush_r+0x1a>
 8008e22:	f7ff fc01 	bl	8008628 <__sinit>
 8008e26:	4b14      	ldr	r3, [pc, #80]	; (8008e78 <_fflush_r+0x6c>)
 8008e28:	429c      	cmp	r4, r3
 8008e2a:	d11b      	bne.n	8008e64 <_fflush_r+0x58>
 8008e2c:	686c      	ldr	r4, [r5, #4]
 8008e2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d0ef      	beq.n	8008e16 <_fflush_r+0xa>
 8008e36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008e38:	07d0      	lsls	r0, r2, #31
 8008e3a:	d404      	bmi.n	8008e46 <_fflush_r+0x3a>
 8008e3c:	0599      	lsls	r1, r3, #22
 8008e3e:	d402      	bmi.n	8008e46 <_fflush_r+0x3a>
 8008e40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e42:	f7ff fcb4 	bl	80087ae <__retarget_lock_acquire_recursive>
 8008e46:	4628      	mov	r0, r5
 8008e48:	4621      	mov	r1, r4
 8008e4a:	f7ff ff59 	bl	8008d00 <__sflush_r>
 8008e4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e50:	07da      	lsls	r2, r3, #31
 8008e52:	4605      	mov	r5, r0
 8008e54:	d4e0      	bmi.n	8008e18 <_fflush_r+0xc>
 8008e56:	89a3      	ldrh	r3, [r4, #12]
 8008e58:	059b      	lsls	r3, r3, #22
 8008e5a:	d4dd      	bmi.n	8008e18 <_fflush_r+0xc>
 8008e5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e5e:	f7ff fca7 	bl	80087b0 <__retarget_lock_release_recursive>
 8008e62:	e7d9      	b.n	8008e18 <_fflush_r+0xc>
 8008e64:	4b05      	ldr	r3, [pc, #20]	; (8008e7c <_fflush_r+0x70>)
 8008e66:	429c      	cmp	r4, r3
 8008e68:	d101      	bne.n	8008e6e <_fflush_r+0x62>
 8008e6a:	68ac      	ldr	r4, [r5, #8]
 8008e6c:	e7df      	b.n	8008e2e <_fflush_r+0x22>
 8008e6e:	4b04      	ldr	r3, [pc, #16]	; (8008e80 <_fflush_r+0x74>)
 8008e70:	429c      	cmp	r4, r3
 8008e72:	bf08      	it	eq
 8008e74:	68ec      	ldreq	r4, [r5, #12]
 8008e76:	e7da      	b.n	8008e2e <_fflush_r+0x22>
 8008e78:	08009984 	.word	0x08009984
 8008e7c:	080099a4 	.word	0x080099a4
 8008e80:	08009964 	.word	0x08009964

08008e84 <_lseek_r>:
 8008e84:	b538      	push	{r3, r4, r5, lr}
 8008e86:	4d07      	ldr	r5, [pc, #28]	; (8008ea4 <_lseek_r+0x20>)
 8008e88:	4604      	mov	r4, r0
 8008e8a:	4608      	mov	r0, r1
 8008e8c:	4611      	mov	r1, r2
 8008e8e:	2200      	movs	r2, #0
 8008e90:	602a      	str	r2, [r5, #0]
 8008e92:	461a      	mov	r2, r3
 8008e94:	f7f8 fdb4 	bl	8001a00 <_lseek>
 8008e98:	1c43      	adds	r3, r0, #1
 8008e9a:	d102      	bne.n	8008ea2 <_lseek_r+0x1e>
 8008e9c:	682b      	ldr	r3, [r5, #0]
 8008e9e:	b103      	cbz	r3, 8008ea2 <_lseek_r+0x1e>
 8008ea0:	6023      	str	r3, [r4, #0]
 8008ea2:	bd38      	pop	{r3, r4, r5, pc}
 8008ea4:	20002a10 	.word	0x20002a10

08008ea8 <__swhatbuf_r>:
 8008ea8:	b570      	push	{r4, r5, r6, lr}
 8008eaa:	460e      	mov	r6, r1
 8008eac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008eb0:	2900      	cmp	r1, #0
 8008eb2:	b096      	sub	sp, #88	; 0x58
 8008eb4:	4614      	mov	r4, r2
 8008eb6:	461d      	mov	r5, r3
 8008eb8:	da07      	bge.n	8008eca <__swhatbuf_r+0x22>
 8008eba:	2300      	movs	r3, #0
 8008ebc:	602b      	str	r3, [r5, #0]
 8008ebe:	89b3      	ldrh	r3, [r6, #12]
 8008ec0:	061a      	lsls	r2, r3, #24
 8008ec2:	d410      	bmi.n	8008ee6 <__swhatbuf_r+0x3e>
 8008ec4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ec8:	e00e      	b.n	8008ee8 <__swhatbuf_r+0x40>
 8008eca:	466a      	mov	r2, sp
 8008ecc:	f000 fbae 	bl	800962c <_fstat_r>
 8008ed0:	2800      	cmp	r0, #0
 8008ed2:	dbf2      	blt.n	8008eba <__swhatbuf_r+0x12>
 8008ed4:	9a01      	ldr	r2, [sp, #4]
 8008ed6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008eda:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008ede:	425a      	negs	r2, r3
 8008ee0:	415a      	adcs	r2, r3
 8008ee2:	602a      	str	r2, [r5, #0]
 8008ee4:	e7ee      	b.n	8008ec4 <__swhatbuf_r+0x1c>
 8008ee6:	2340      	movs	r3, #64	; 0x40
 8008ee8:	2000      	movs	r0, #0
 8008eea:	6023      	str	r3, [r4, #0]
 8008eec:	b016      	add	sp, #88	; 0x58
 8008eee:	bd70      	pop	{r4, r5, r6, pc}

08008ef0 <__smakebuf_r>:
 8008ef0:	898b      	ldrh	r3, [r1, #12]
 8008ef2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008ef4:	079d      	lsls	r5, r3, #30
 8008ef6:	4606      	mov	r6, r0
 8008ef8:	460c      	mov	r4, r1
 8008efa:	d507      	bpl.n	8008f0c <__smakebuf_r+0x1c>
 8008efc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008f00:	6023      	str	r3, [r4, #0]
 8008f02:	6123      	str	r3, [r4, #16]
 8008f04:	2301      	movs	r3, #1
 8008f06:	6163      	str	r3, [r4, #20]
 8008f08:	b002      	add	sp, #8
 8008f0a:	bd70      	pop	{r4, r5, r6, pc}
 8008f0c:	ab01      	add	r3, sp, #4
 8008f0e:	466a      	mov	r2, sp
 8008f10:	f7ff ffca 	bl	8008ea8 <__swhatbuf_r>
 8008f14:	9900      	ldr	r1, [sp, #0]
 8008f16:	4605      	mov	r5, r0
 8008f18:	4630      	mov	r0, r6
 8008f1a:	f7ff fc61 	bl	80087e0 <_malloc_r>
 8008f1e:	b948      	cbnz	r0, 8008f34 <__smakebuf_r+0x44>
 8008f20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f24:	059a      	lsls	r2, r3, #22
 8008f26:	d4ef      	bmi.n	8008f08 <__smakebuf_r+0x18>
 8008f28:	f023 0303 	bic.w	r3, r3, #3
 8008f2c:	f043 0302 	orr.w	r3, r3, #2
 8008f30:	81a3      	strh	r3, [r4, #12]
 8008f32:	e7e3      	b.n	8008efc <__smakebuf_r+0xc>
 8008f34:	4b0d      	ldr	r3, [pc, #52]	; (8008f6c <__smakebuf_r+0x7c>)
 8008f36:	62b3      	str	r3, [r6, #40]	; 0x28
 8008f38:	89a3      	ldrh	r3, [r4, #12]
 8008f3a:	6020      	str	r0, [r4, #0]
 8008f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f40:	81a3      	strh	r3, [r4, #12]
 8008f42:	9b00      	ldr	r3, [sp, #0]
 8008f44:	6163      	str	r3, [r4, #20]
 8008f46:	9b01      	ldr	r3, [sp, #4]
 8008f48:	6120      	str	r0, [r4, #16]
 8008f4a:	b15b      	cbz	r3, 8008f64 <__smakebuf_r+0x74>
 8008f4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f50:	4630      	mov	r0, r6
 8008f52:	f000 fb7d 	bl	8009650 <_isatty_r>
 8008f56:	b128      	cbz	r0, 8008f64 <__smakebuf_r+0x74>
 8008f58:	89a3      	ldrh	r3, [r4, #12]
 8008f5a:	f023 0303 	bic.w	r3, r3, #3
 8008f5e:	f043 0301 	orr.w	r3, r3, #1
 8008f62:	81a3      	strh	r3, [r4, #12]
 8008f64:	89a0      	ldrh	r0, [r4, #12]
 8008f66:	4305      	orrs	r5, r0
 8008f68:	81a5      	strh	r5, [r4, #12]
 8008f6a:	e7cd      	b.n	8008f08 <__smakebuf_r+0x18>
 8008f6c:	080085c1 	.word	0x080085c1

08008f70 <__malloc_lock>:
 8008f70:	4801      	ldr	r0, [pc, #4]	; (8008f78 <__malloc_lock+0x8>)
 8008f72:	f7ff bc1c 	b.w	80087ae <__retarget_lock_acquire_recursive>
 8008f76:	bf00      	nop
 8008f78:	20002a08 	.word	0x20002a08

08008f7c <__malloc_unlock>:
 8008f7c:	4801      	ldr	r0, [pc, #4]	; (8008f84 <__malloc_unlock+0x8>)
 8008f7e:	f7ff bc17 	b.w	80087b0 <__retarget_lock_release_recursive>
 8008f82:	bf00      	nop
 8008f84:	20002a08 	.word	0x20002a08

08008f88 <_free_r>:
 8008f88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f8a:	2900      	cmp	r1, #0
 8008f8c:	d048      	beq.n	8009020 <_free_r+0x98>
 8008f8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f92:	9001      	str	r0, [sp, #4]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	f1a1 0404 	sub.w	r4, r1, #4
 8008f9a:	bfb8      	it	lt
 8008f9c:	18e4      	addlt	r4, r4, r3
 8008f9e:	f7ff ffe7 	bl	8008f70 <__malloc_lock>
 8008fa2:	4a20      	ldr	r2, [pc, #128]	; (8009024 <_free_r+0x9c>)
 8008fa4:	9801      	ldr	r0, [sp, #4]
 8008fa6:	6813      	ldr	r3, [r2, #0]
 8008fa8:	4615      	mov	r5, r2
 8008faa:	b933      	cbnz	r3, 8008fba <_free_r+0x32>
 8008fac:	6063      	str	r3, [r4, #4]
 8008fae:	6014      	str	r4, [r2, #0]
 8008fb0:	b003      	add	sp, #12
 8008fb2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008fb6:	f7ff bfe1 	b.w	8008f7c <__malloc_unlock>
 8008fba:	42a3      	cmp	r3, r4
 8008fbc:	d90b      	bls.n	8008fd6 <_free_r+0x4e>
 8008fbe:	6821      	ldr	r1, [r4, #0]
 8008fc0:	1862      	adds	r2, r4, r1
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	bf04      	itt	eq
 8008fc6:	681a      	ldreq	r2, [r3, #0]
 8008fc8:	685b      	ldreq	r3, [r3, #4]
 8008fca:	6063      	str	r3, [r4, #4]
 8008fcc:	bf04      	itt	eq
 8008fce:	1852      	addeq	r2, r2, r1
 8008fd0:	6022      	streq	r2, [r4, #0]
 8008fd2:	602c      	str	r4, [r5, #0]
 8008fd4:	e7ec      	b.n	8008fb0 <_free_r+0x28>
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	685b      	ldr	r3, [r3, #4]
 8008fda:	b10b      	cbz	r3, 8008fe0 <_free_r+0x58>
 8008fdc:	42a3      	cmp	r3, r4
 8008fde:	d9fa      	bls.n	8008fd6 <_free_r+0x4e>
 8008fe0:	6811      	ldr	r1, [r2, #0]
 8008fe2:	1855      	adds	r5, r2, r1
 8008fe4:	42a5      	cmp	r5, r4
 8008fe6:	d10b      	bne.n	8009000 <_free_r+0x78>
 8008fe8:	6824      	ldr	r4, [r4, #0]
 8008fea:	4421      	add	r1, r4
 8008fec:	1854      	adds	r4, r2, r1
 8008fee:	42a3      	cmp	r3, r4
 8008ff0:	6011      	str	r1, [r2, #0]
 8008ff2:	d1dd      	bne.n	8008fb0 <_free_r+0x28>
 8008ff4:	681c      	ldr	r4, [r3, #0]
 8008ff6:	685b      	ldr	r3, [r3, #4]
 8008ff8:	6053      	str	r3, [r2, #4]
 8008ffa:	4421      	add	r1, r4
 8008ffc:	6011      	str	r1, [r2, #0]
 8008ffe:	e7d7      	b.n	8008fb0 <_free_r+0x28>
 8009000:	d902      	bls.n	8009008 <_free_r+0x80>
 8009002:	230c      	movs	r3, #12
 8009004:	6003      	str	r3, [r0, #0]
 8009006:	e7d3      	b.n	8008fb0 <_free_r+0x28>
 8009008:	6825      	ldr	r5, [r4, #0]
 800900a:	1961      	adds	r1, r4, r5
 800900c:	428b      	cmp	r3, r1
 800900e:	bf04      	itt	eq
 8009010:	6819      	ldreq	r1, [r3, #0]
 8009012:	685b      	ldreq	r3, [r3, #4]
 8009014:	6063      	str	r3, [r4, #4]
 8009016:	bf04      	itt	eq
 8009018:	1949      	addeq	r1, r1, r5
 800901a:	6021      	streq	r1, [r4, #0]
 800901c:	6054      	str	r4, [r2, #4]
 800901e:	e7c7      	b.n	8008fb0 <_free_r+0x28>
 8009020:	b003      	add	sp, #12
 8009022:	bd30      	pop	{r4, r5, pc}
 8009024:	20001a90 	.word	0x20001a90

08009028 <__ssputs_r>:
 8009028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800902c:	688e      	ldr	r6, [r1, #8]
 800902e:	429e      	cmp	r6, r3
 8009030:	4682      	mov	sl, r0
 8009032:	460c      	mov	r4, r1
 8009034:	4690      	mov	r8, r2
 8009036:	461f      	mov	r7, r3
 8009038:	d838      	bhi.n	80090ac <__ssputs_r+0x84>
 800903a:	898a      	ldrh	r2, [r1, #12]
 800903c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009040:	d032      	beq.n	80090a8 <__ssputs_r+0x80>
 8009042:	6825      	ldr	r5, [r4, #0]
 8009044:	6909      	ldr	r1, [r1, #16]
 8009046:	eba5 0901 	sub.w	r9, r5, r1
 800904a:	6965      	ldr	r5, [r4, #20]
 800904c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009050:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009054:	3301      	adds	r3, #1
 8009056:	444b      	add	r3, r9
 8009058:	106d      	asrs	r5, r5, #1
 800905a:	429d      	cmp	r5, r3
 800905c:	bf38      	it	cc
 800905e:	461d      	movcc	r5, r3
 8009060:	0553      	lsls	r3, r2, #21
 8009062:	d531      	bpl.n	80090c8 <__ssputs_r+0xa0>
 8009064:	4629      	mov	r1, r5
 8009066:	f7ff fbbb 	bl	80087e0 <_malloc_r>
 800906a:	4606      	mov	r6, r0
 800906c:	b950      	cbnz	r0, 8009084 <__ssputs_r+0x5c>
 800906e:	230c      	movs	r3, #12
 8009070:	f8ca 3000 	str.w	r3, [sl]
 8009074:	89a3      	ldrh	r3, [r4, #12]
 8009076:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800907a:	81a3      	strh	r3, [r4, #12]
 800907c:	f04f 30ff 	mov.w	r0, #4294967295
 8009080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009084:	6921      	ldr	r1, [r4, #16]
 8009086:	464a      	mov	r2, r9
 8009088:	f7ff fb93 	bl	80087b2 <memcpy>
 800908c:	89a3      	ldrh	r3, [r4, #12]
 800908e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009092:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009096:	81a3      	strh	r3, [r4, #12]
 8009098:	6126      	str	r6, [r4, #16]
 800909a:	6165      	str	r5, [r4, #20]
 800909c:	444e      	add	r6, r9
 800909e:	eba5 0509 	sub.w	r5, r5, r9
 80090a2:	6026      	str	r6, [r4, #0]
 80090a4:	60a5      	str	r5, [r4, #8]
 80090a6:	463e      	mov	r6, r7
 80090a8:	42be      	cmp	r6, r7
 80090aa:	d900      	bls.n	80090ae <__ssputs_r+0x86>
 80090ac:	463e      	mov	r6, r7
 80090ae:	4632      	mov	r2, r6
 80090b0:	6820      	ldr	r0, [r4, #0]
 80090b2:	4641      	mov	r1, r8
 80090b4:	f000 fadc 	bl	8009670 <memmove>
 80090b8:	68a3      	ldr	r3, [r4, #8]
 80090ba:	6822      	ldr	r2, [r4, #0]
 80090bc:	1b9b      	subs	r3, r3, r6
 80090be:	4432      	add	r2, r6
 80090c0:	60a3      	str	r3, [r4, #8]
 80090c2:	6022      	str	r2, [r4, #0]
 80090c4:	2000      	movs	r0, #0
 80090c6:	e7db      	b.n	8009080 <__ssputs_r+0x58>
 80090c8:	462a      	mov	r2, r5
 80090ca:	f000 faeb 	bl	80096a4 <_realloc_r>
 80090ce:	4606      	mov	r6, r0
 80090d0:	2800      	cmp	r0, #0
 80090d2:	d1e1      	bne.n	8009098 <__ssputs_r+0x70>
 80090d4:	6921      	ldr	r1, [r4, #16]
 80090d6:	4650      	mov	r0, sl
 80090d8:	f7ff ff56 	bl	8008f88 <_free_r>
 80090dc:	e7c7      	b.n	800906e <__ssputs_r+0x46>
	...

080090e0 <_svfiprintf_r>:
 80090e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090e4:	4698      	mov	r8, r3
 80090e6:	898b      	ldrh	r3, [r1, #12]
 80090e8:	061b      	lsls	r3, r3, #24
 80090ea:	b09d      	sub	sp, #116	; 0x74
 80090ec:	4607      	mov	r7, r0
 80090ee:	460d      	mov	r5, r1
 80090f0:	4614      	mov	r4, r2
 80090f2:	d50e      	bpl.n	8009112 <_svfiprintf_r+0x32>
 80090f4:	690b      	ldr	r3, [r1, #16]
 80090f6:	b963      	cbnz	r3, 8009112 <_svfiprintf_r+0x32>
 80090f8:	2140      	movs	r1, #64	; 0x40
 80090fa:	f7ff fb71 	bl	80087e0 <_malloc_r>
 80090fe:	6028      	str	r0, [r5, #0]
 8009100:	6128      	str	r0, [r5, #16]
 8009102:	b920      	cbnz	r0, 800910e <_svfiprintf_r+0x2e>
 8009104:	230c      	movs	r3, #12
 8009106:	603b      	str	r3, [r7, #0]
 8009108:	f04f 30ff 	mov.w	r0, #4294967295
 800910c:	e0d1      	b.n	80092b2 <_svfiprintf_r+0x1d2>
 800910e:	2340      	movs	r3, #64	; 0x40
 8009110:	616b      	str	r3, [r5, #20]
 8009112:	2300      	movs	r3, #0
 8009114:	9309      	str	r3, [sp, #36]	; 0x24
 8009116:	2320      	movs	r3, #32
 8009118:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800911c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009120:	2330      	movs	r3, #48	; 0x30
 8009122:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80092cc <_svfiprintf_r+0x1ec>
 8009126:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800912a:	f04f 0901 	mov.w	r9, #1
 800912e:	4623      	mov	r3, r4
 8009130:	469a      	mov	sl, r3
 8009132:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009136:	b10a      	cbz	r2, 800913c <_svfiprintf_r+0x5c>
 8009138:	2a25      	cmp	r2, #37	; 0x25
 800913a:	d1f9      	bne.n	8009130 <_svfiprintf_r+0x50>
 800913c:	ebba 0b04 	subs.w	fp, sl, r4
 8009140:	d00b      	beq.n	800915a <_svfiprintf_r+0x7a>
 8009142:	465b      	mov	r3, fp
 8009144:	4622      	mov	r2, r4
 8009146:	4629      	mov	r1, r5
 8009148:	4638      	mov	r0, r7
 800914a:	f7ff ff6d 	bl	8009028 <__ssputs_r>
 800914e:	3001      	adds	r0, #1
 8009150:	f000 80aa 	beq.w	80092a8 <_svfiprintf_r+0x1c8>
 8009154:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009156:	445a      	add	r2, fp
 8009158:	9209      	str	r2, [sp, #36]	; 0x24
 800915a:	f89a 3000 	ldrb.w	r3, [sl]
 800915e:	2b00      	cmp	r3, #0
 8009160:	f000 80a2 	beq.w	80092a8 <_svfiprintf_r+0x1c8>
 8009164:	2300      	movs	r3, #0
 8009166:	f04f 32ff 	mov.w	r2, #4294967295
 800916a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800916e:	f10a 0a01 	add.w	sl, sl, #1
 8009172:	9304      	str	r3, [sp, #16]
 8009174:	9307      	str	r3, [sp, #28]
 8009176:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800917a:	931a      	str	r3, [sp, #104]	; 0x68
 800917c:	4654      	mov	r4, sl
 800917e:	2205      	movs	r2, #5
 8009180:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009184:	4851      	ldr	r0, [pc, #324]	; (80092cc <_svfiprintf_r+0x1ec>)
 8009186:	f7f7 f83b 	bl	8000200 <memchr>
 800918a:	9a04      	ldr	r2, [sp, #16]
 800918c:	b9d8      	cbnz	r0, 80091c6 <_svfiprintf_r+0xe6>
 800918e:	06d0      	lsls	r0, r2, #27
 8009190:	bf44      	itt	mi
 8009192:	2320      	movmi	r3, #32
 8009194:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009198:	0711      	lsls	r1, r2, #28
 800919a:	bf44      	itt	mi
 800919c:	232b      	movmi	r3, #43	; 0x2b
 800919e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091a2:	f89a 3000 	ldrb.w	r3, [sl]
 80091a6:	2b2a      	cmp	r3, #42	; 0x2a
 80091a8:	d015      	beq.n	80091d6 <_svfiprintf_r+0xf6>
 80091aa:	9a07      	ldr	r2, [sp, #28]
 80091ac:	4654      	mov	r4, sl
 80091ae:	2000      	movs	r0, #0
 80091b0:	f04f 0c0a 	mov.w	ip, #10
 80091b4:	4621      	mov	r1, r4
 80091b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091ba:	3b30      	subs	r3, #48	; 0x30
 80091bc:	2b09      	cmp	r3, #9
 80091be:	d94e      	bls.n	800925e <_svfiprintf_r+0x17e>
 80091c0:	b1b0      	cbz	r0, 80091f0 <_svfiprintf_r+0x110>
 80091c2:	9207      	str	r2, [sp, #28]
 80091c4:	e014      	b.n	80091f0 <_svfiprintf_r+0x110>
 80091c6:	eba0 0308 	sub.w	r3, r0, r8
 80091ca:	fa09 f303 	lsl.w	r3, r9, r3
 80091ce:	4313      	orrs	r3, r2
 80091d0:	9304      	str	r3, [sp, #16]
 80091d2:	46a2      	mov	sl, r4
 80091d4:	e7d2      	b.n	800917c <_svfiprintf_r+0x9c>
 80091d6:	9b03      	ldr	r3, [sp, #12]
 80091d8:	1d19      	adds	r1, r3, #4
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	9103      	str	r1, [sp, #12]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	bfbb      	ittet	lt
 80091e2:	425b      	neglt	r3, r3
 80091e4:	f042 0202 	orrlt.w	r2, r2, #2
 80091e8:	9307      	strge	r3, [sp, #28]
 80091ea:	9307      	strlt	r3, [sp, #28]
 80091ec:	bfb8      	it	lt
 80091ee:	9204      	strlt	r2, [sp, #16]
 80091f0:	7823      	ldrb	r3, [r4, #0]
 80091f2:	2b2e      	cmp	r3, #46	; 0x2e
 80091f4:	d10c      	bne.n	8009210 <_svfiprintf_r+0x130>
 80091f6:	7863      	ldrb	r3, [r4, #1]
 80091f8:	2b2a      	cmp	r3, #42	; 0x2a
 80091fa:	d135      	bne.n	8009268 <_svfiprintf_r+0x188>
 80091fc:	9b03      	ldr	r3, [sp, #12]
 80091fe:	1d1a      	adds	r2, r3, #4
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	9203      	str	r2, [sp, #12]
 8009204:	2b00      	cmp	r3, #0
 8009206:	bfb8      	it	lt
 8009208:	f04f 33ff 	movlt.w	r3, #4294967295
 800920c:	3402      	adds	r4, #2
 800920e:	9305      	str	r3, [sp, #20]
 8009210:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80092dc <_svfiprintf_r+0x1fc>
 8009214:	7821      	ldrb	r1, [r4, #0]
 8009216:	2203      	movs	r2, #3
 8009218:	4650      	mov	r0, sl
 800921a:	f7f6 fff1 	bl	8000200 <memchr>
 800921e:	b140      	cbz	r0, 8009232 <_svfiprintf_r+0x152>
 8009220:	2340      	movs	r3, #64	; 0x40
 8009222:	eba0 000a 	sub.w	r0, r0, sl
 8009226:	fa03 f000 	lsl.w	r0, r3, r0
 800922a:	9b04      	ldr	r3, [sp, #16]
 800922c:	4303      	orrs	r3, r0
 800922e:	3401      	adds	r4, #1
 8009230:	9304      	str	r3, [sp, #16]
 8009232:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009236:	4826      	ldr	r0, [pc, #152]	; (80092d0 <_svfiprintf_r+0x1f0>)
 8009238:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800923c:	2206      	movs	r2, #6
 800923e:	f7f6 ffdf 	bl	8000200 <memchr>
 8009242:	2800      	cmp	r0, #0
 8009244:	d038      	beq.n	80092b8 <_svfiprintf_r+0x1d8>
 8009246:	4b23      	ldr	r3, [pc, #140]	; (80092d4 <_svfiprintf_r+0x1f4>)
 8009248:	bb1b      	cbnz	r3, 8009292 <_svfiprintf_r+0x1b2>
 800924a:	9b03      	ldr	r3, [sp, #12]
 800924c:	3307      	adds	r3, #7
 800924e:	f023 0307 	bic.w	r3, r3, #7
 8009252:	3308      	adds	r3, #8
 8009254:	9303      	str	r3, [sp, #12]
 8009256:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009258:	4433      	add	r3, r6
 800925a:	9309      	str	r3, [sp, #36]	; 0x24
 800925c:	e767      	b.n	800912e <_svfiprintf_r+0x4e>
 800925e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009262:	460c      	mov	r4, r1
 8009264:	2001      	movs	r0, #1
 8009266:	e7a5      	b.n	80091b4 <_svfiprintf_r+0xd4>
 8009268:	2300      	movs	r3, #0
 800926a:	3401      	adds	r4, #1
 800926c:	9305      	str	r3, [sp, #20]
 800926e:	4619      	mov	r1, r3
 8009270:	f04f 0c0a 	mov.w	ip, #10
 8009274:	4620      	mov	r0, r4
 8009276:	f810 2b01 	ldrb.w	r2, [r0], #1
 800927a:	3a30      	subs	r2, #48	; 0x30
 800927c:	2a09      	cmp	r2, #9
 800927e:	d903      	bls.n	8009288 <_svfiprintf_r+0x1a8>
 8009280:	2b00      	cmp	r3, #0
 8009282:	d0c5      	beq.n	8009210 <_svfiprintf_r+0x130>
 8009284:	9105      	str	r1, [sp, #20]
 8009286:	e7c3      	b.n	8009210 <_svfiprintf_r+0x130>
 8009288:	fb0c 2101 	mla	r1, ip, r1, r2
 800928c:	4604      	mov	r4, r0
 800928e:	2301      	movs	r3, #1
 8009290:	e7f0      	b.n	8009274 <_svfiprintf_r+0x194>
 8009292:	ab03      	add	r3, sp, #12
 8009294:	9300      	str	r3, [sp, #0]
 8009296:	462a      	mov	r2, r5
 8009298:	4b0f      	ldr	r3, [pc, #60]	; (80092d8 <_svfiprintf_r+0x1f8>)
 800929a:	a904      	add	r1, sp, #16
 800929c:	4638      	mov	r0, r7
 800929e:	f3af 8000 	nop.w
 80092a2:	1c42      	adds	r2, r0, #1
 80092a4:	4606      	mov	r6, r0
 80092a6:	d1d6      	bne.n	8009256 <_svfiprintf_r+0x176>
 80092a8:	89ab      	ldrh	r3, [r5, #12]
 80092aa:	065b      	lsls	r3, r3, #25
 80092ac:	f53f af2c 	bmi.w	8009108 <_svfiprintf_r+0x28>
 80092b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80092b2:	b01d      	add	sp, #116	; 0x74
 80092b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092b8:	ab03      	add	r3, sp, #12
 80092ba:	9300      	str	r3, [sp, #0]
 80092bc:	462a      	mov	r2, r5
 80092be:	4b06      	ldr	r3, [pc, #24]	; (80092d8 <_svfiprintf_r+0x1f8>)
 80092c0:	a904      	add	r1, sp, #16
 80092c2:	4638      	mov	r0, r7
 80092c4:	f000 f87a 	bl	80093bc <_printf_i>
 80092c8:	e7eb      	b.n	80092a2 <_svfiprintf_r+0x1c2>
 80092ca:	bf00      	nop
 80092cc:	080099c8 	.word	0x080099c8
 80092d0:	080099d2 	.word	0x080099d2
 80092d4:	00000000 	.word	0x00000000
 80092d8:	08009029 	.word	0x08009029
 80092dc:	080099ce 	.word	0x080099ce

080092e0 <_printf_common>:
 80092e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092e4:	4616      	mov	r6, r2
 80092e6:	4699      	mov	r9, r3
 80092e8:	688a      	ldr	r2, [r1, #8]
 80092ea:	690b      	ldr	r3, [r1, #16]
 80092ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80092f0:	4293      	cmp	r3, r2
 80092f2:	bfb8      	it	lt
 80092f4:	4613      	movlt	r3, r2
 80092f6:	6033      	str	r3, [r6, #0]
 80092f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80092fc:	4607      	mov	r7, r0
 80092fe:	460c      	mov	r4, r1
 8009300:	b10a      	cbz	r2, 8009306 <_printf_common+0x26>
 8009302:	3301      	adds	r3, #1
 8009304:	6033      	str	r3, [r6, #0]
 8009306:	6823      	ldr	r3, [r4, #0]
 8009308:	0699      	lsls	r1, r3, #26
 800930a:	bf42      	ittt	mi
 800930c:	6833      	ldrmi	r3, [r6, #0]
 800930e:	3302      	addmi	r3, #2
 8009310:	6033      	strmi	r3, [r6, #0]
 8009312:	6825      	ldr	r5, [r4, #0]
 8009314:	f015 0506 	ands.w	r5, r5, #6
 8009318:	d106      	bne.n	8009328 <_printf_common+0x48>
 800931a:	f104 0a19 	add.w	sl, r4, #25
 800931e:	68e3      	ldr	r3, [r4, #12]
 8009320:	6832      	ldr	r2, [r6, #0]
 8009322:	1a9b      	subs	r3, r3, r2
 8009324:	42ab      	cmp	r3, r5
 8009326:	dc26      	bgt.n	8009376 <_printf_common+0x96>
 8009328:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800932c:	1e13      	subs	r3, r2, #0
 800932e:	6822      	ldr	r2, [r4, #0]
 8009330:	bf18      	it	ne
 8009332:	2301      	movne	r3, #1
 8009334:	0692      	lsls	r2, r2, #26
 8009336:	d42b      	bmi.n	8009390 <_printf_common+0xb0>
 8009338:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800933c:	4649      	mov	r1, r9
 800933e:	4638      	mov	r0, r7
 8009340:	47c0      	blx	r8
 8009342:	3001      	adds	r0, #1
 8009344:	d01e      	beq.n	8009384 <_printf_common+0xa4>
 8009346:	6823      	ldr	r3, [r4, #0]
 8009348:	68e5      	ldr	r5, [r4, #12]
 800934a:	6832      	ldr	r2, [r6, #0]
 800934c:	f003 0306 	and.w	r3, r3, #6
 8009350:	2b04      	cmp	r3, #4
 8009352:	bf08      	it	eq
 8009354:	1aad      	subeq	r5, r5, r2
 8009356:	68a3      	ldr	r3, [r4, #8]
 8009358:	6922      	ldr	r2, [r4, #16]
 800935a:	bf0c      	ite	eq
 800935c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009360:	2500      	movne	r5, #0
 8009362:	4293      	cmp	r3, r2
 8009364:	bfc4      	itt	gt
 8009366:	1a9b      	subgt	r3, r3, r2
 8009368:	18ed      	addgt	r5, r5, r3
 800936a:	2600      	movs	r6, #0
 800936c:	341a      	adds	r4, #26
 800936e:	42b5      	cmp	r5, r6
 8009370:	d11a      	bne.n	80093a8 <_printf_common+0xc8>
 8009372:	2000      	movs	r0, #0
 8009374:	e008      	b.n	8009388 <_printf_common+0xa8>
 8009376:	2301      	movs	r3, #1
 8009378:	4652      	mov	r2, sl
 800937a:	4649      	mov	r1, r9
 800937c:	4638      	mov	r0, r7
 800937e:	47c0      	blx	r8
 8009380:	3001      	adds	r0, #1
 8009382:	d103      	bne.n	800938c <_printf_common+0xac>
 8009384:	f04f 30ff 	mov.w	r0, #4294967295
 8009388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800938c:	3501      	adds	r5, #1
 800938e:	e7c6      	b.n	800931e <_printf_common+0x3e>
 8009390:	18e1      	adds	r1, r4, r3
 8009392:	1c5a      	adds	r2, r3, #1
 8009394:	2030      	movs	r0, #48	; 0x30
 8009396:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800939a:	4422      	add	r2, r4
 800939c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80093a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80093a4:	3302      	adds	r3, #2
 80093a6:	e7c7      	b.n	8009338 <_printf_common+0x58>
 80093a8:	2301      	movs	r3, #1
 80093aa:	4622      	mov	r2, r4
 80093ac:	4649      	mov	r1, r9
 80093ae:	4638      	mov	r0, r7
 80093b0:	47c0      	blx	r8
 80093b2:	3001      	adds	r0, #1
 80093b4:	d0e6      	beq.n	8009384 <_printf_common+0xa4>
 80093b6:	3601      	adds	r6, #1
 80093b8:	e7d9      	b.n	800936e <_printf_common+0x8e>
	...

080093bc <_printf_i>:
 80093bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80093c0:	460c      	mov	r4, r1
 80093c2:	4691      	mov	r9, r2
 80093c4:	7e27      	ldrb	r7, [r4, #24]
 80093c6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80093c8:	2f78      	cmp	r7, #120	; 0x78
 80093ca:	4680      	mov	r8, r0
 80093cc:	469a      	mov	sl, r3
 80093ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80093d2:	d807      	bhi.n	80093e4 <_printf_i+0x28>
 80093d4:	2f62      	cmp	r7, #98	; 0x62
 80093d6:	d80a      	bhi.n	80093ee <_printf_i+0x32>
 80093d8:	2f00      	cmp	r7, #0
 80093da:	f000 80d8 	beq.w	800958e <_printf_i+0x1d2>
 80093de:	2f58      	cmp	r7, #88	; 0x58
 80093e0:	f000 80a3 	beq.w	800952a <_printf_i+0x16e>
 80093e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80093e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80093ec:	e03a      	b.n	8009464 <_printf_i+0xa8>
 80093ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80093f2:	2b15      	cmp	r3, #21
 80093f4:	d8f6      	bhi.n	80093e4 <_printf_i+0x28>
 80093f6:	a001      	add	r0, pc, #4	; (adr r0, 80093fc <_printf_i+0x40>)
 80093f8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80093fc:	08009455 	.word	0x08009455
 8009400:	08009469 	.word	0x08009469
 8009404:	080093e5 	.word	0x080093e5
 8009408:	080093e5 	.word	0x080093e5
 800940c:	080093e5 	.word	0x080093e5
 8009410:	080093e5 	.word	0x080093e5
 8009414:	08009469 	.word	0x08009469
 8009418:	080093e5 	.word	0x080093e5
 800941c:	080093e5 	.word	0x080093e5
 8009420:	080093e5 	.word	0x080093e5
 8009424:	080093e5 	.word	0x080093e5
 8009428:	08009575 	.word	0x08009575
 800942c:	08009499 	.word	0x08009499
 8009430:	08009557 	.word	0x08009557
 8009434:	080093e5 	.word	0x080093e5
 8009438:	080093e5 	.word	0x080093e5
 800943c:	08009597 	.word	0x08009597
 8009440:	080093e5 	.word	0x080093e5
 8009444:	08009499 	.word	0x08009499
 8009448:	080093e5 	.word	0x080093e5
 800944c:	080093e5 	.word	0x080093e5
 8009450:	0800955f 	.word	0x0800955f
 8009454:	680b      	ldr	r3, [r1, #0]
 8009456:	1d1a      	adds	r2, r3, #4
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	600a      	str	r2, [r1, #0]
 800945c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009460:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009464:	2301      	movs	r3, #1
 8009466:	e0a3      	b.n	80095b0 <_printf_i+0x1f4>
 8009468:	6825      	ldr	r5, [r4, #0]
 800946a:	6808      	ldr	r0, [r1, #0]
 800946c:	062e      	lsls	r6, r5, #24
 800946e:	f100 0304 	add.w	r3, r0, #4
 8009472:	d50a      	bpl.n	800948a <_printf_i+0xce>
 8009474:	6805      	ldr	r5, [r0, #0]
 8009476:	600b      	str	r3, [r1, #0]
 8009478:	2d00      	cmp	r5, #0
 800947a:	da03      	bge.n	8009484 <_printf_i+0xc8>
 800947c:	232d      	movs	r3, #45	; 0x2d
 800947e:	426d      	negs	r5, r5
 8009480:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009484:	485e      	ldr	r0, [pc, #376]	; (8009600 <_printf_i+0x244>)
 8009486:	230a      	movs	r3, #10
 8009488:	e019      	b.n	80094be <_printf_i+0x102>
 800948a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800948e:	6805      	ldr	r5, [r0, #0]
 8009490:	600b      	str	r3, [r1, #0]
 8009492:	bf18      	it	ne
 8009494:	b22d      	sxthne	r5, r5
 8009496:	e7ef      	b.n	8009478 <_printf_i+0xbc>
 8009498:	680b      	ldr	r3, [r1, #0]
 800949a:	6825      	ldr	r5, [r4, #0]
 800949c:	1d18      	adds	r0, r3, #4
 800949e:	6008      	str	r0, [r1, #0]
 80094a0:	0628      	lsls	r0, r5, #24
 80094a2:	d501      	bpl.n	80094a8 <_printf_i+0xec>
 80094a4:	681d      	ldr	r5, [r3, #0]
 80094a6:	e002      	b.n	80094ae <_printf_i+0xf2>
 80094a8:	0669      	lsls	r1, r5, #25
 80094aa:	d5fb      	bpl.n	80094a4 <_printf_i+0xe8>
 80094ac:	881d      	ldrh	r5, [r3, #0]
 80094ae:	4854      	ldr	r0, [pc, #336]	; (8009600 <_printf_i+0x244>)
 80094b0:	2f6f      	cmp	r7, #111	; 0x6f
 80094b2:	bf0c      	ite	eq
 80094b4:	2308      	moveq	r3, #8
 80094b6:	230a      	movne	r3, #10
 80094b8:	2100      	movs	r1, #0
 80094ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80094be:	6866      	ldr	r6, [r4, #4]
 80094c0:	60a6      	str	r6, [r4, #8]
 80094c2:	2e00      	cmp	r6, #0
 80094c4:	bfa2      	ittt	ge
 80094c6:	6821      	ldrge	r1, [r4, #0]
 80094c8:	f021 0104 	bicge.w	r1, r1, #4
 80094cc:	6021      	strge	r1, [r4, #0]
 80094ce:	b90d      	cbnz	r5, 80094d4 <_printf_i+0x118>
 80094d0:	2e00      	cmp	r6, #0
 80094d2:	d04d      	beq.n	8009570 <_printf_i+0x1b4>
 80094d4:	4616      	mov	r6, r2
 80094d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80094da:	fb03 5711 	mls	r7, r3, r1, r5
 80094de:	5dc7      	ldrb	r7, [r0, r7]
 80094e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80094e4:	462f      	mov	r7, r5
 80094e6:	42bb      	cmp	r3, r7
 80094e8:	460d      	mov	r5, r1
 80094ea:	d9f4      	bls.n	80094d6 <_printf_i+0x11a>
 80094ec:	2b08      	cmp	r3, #8
 80094ee:	d10b      	bne.n	8009508 <_printf_i+0x14c>
 80094f0:	6823      	ldr	r3, [r4, #0]
 80094f2:	07df      	lsls	r7, r3, #31
 80094f4:	d508      	bpl.n	8009508 <_printf_i+0x14c>
 80094f6:	6923      	ldr	r3, [r4, #16]
 80094f8:	6861      	ldr	r1, [r4, #4]
 80094fa:	4299      	cmp	r1, r3
 80094fc:	bfde      	ittt	le
 80094fe:	2330      	movle	r3, #48	; 0x30
 8009500:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009504:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009508:	1b92      	subs	r2, r2, r6
 800950a:	6122      	str	r2, [r4, #16]
 800950c:	f8cd a000 	str.w	sl, [sp]
 8009510:	464b      	mov	r3, r9
 8009512:	aa03      	add	r2, sp, #12
 8009514:	4621      	mov	r1, r4
 8009516:	4640      	mov	r0, r8
 8009518:	f7ff fee2 	bl	80092e0 <_printf_common>
 800951c:	3001      	adds	r0, #1
 800951e:	d14c      	bne.n	80095ba <_printf_i+0x1fe>
 8009520:	f04f 30ff 	mov.w	r0, #4294967295
 8009524:	b004      	add	sp, #16
 8009526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800952a:	4835      	ldr	r0, [pc, #212]	; (8009600 <_printf_i+0x244>)
 800952c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009530:	6823      	ldr	r3, [r4, #0]
 8009532:	680e      	ldr	r6, [r1, #0]
 8009534:	061f      	lsls	r7, r3, #24
 8009536:	f856 5b04 	ldr.w	r5, [r6], #4
 800953a:	600e      	str	r6, [r1, #0]
 800953c:	d514      	bpl.n	8009568 <_printf_i+0x1ac>
 800953e:	07d9      	lsls	r1, r3, #31
 8009540:	bf44      	itt	mi
 8009542:	f043 0320 	orrmi.w	r3, r3, #32
 8009546:	6023      	strmi	r3, [r4, #0]
 8009548:	b91d      	cbnz	r5, 8009552 <_printf_i+0x196>
 800954a:	6823      	ldr	r3, [r4, #0]
 800954c:	f023 0320 	bic.w	r3, r3, #32
 8009550:	6023      	str	r3, [r4, #0]
 8009552:	2310      	movs	r3, #16
 8009554:	e7b0      	b.n	80094b8 <_printf_i+0xfc>
 8009556:	6823      	ldr	r3, [r4, #0]
 8009558:	f043 0320 	orr.w	r3, r3, #32
 800955c:	6023      	str	r3, [r4, #0]
 800955e:	2378      	movs	r3, #120	; 0x78
 8009560:	4828      	ldr	r0, [pc, #160]	; (8009604 <_printf_i+0x248>)
 8009562:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009566:	e7e3      	b.n	8009530 <_printf_i+0x174>
 8009568:	065e      	lsls	r6, r3, #25
 800956a:	bf48      	it	mi
 800956c:	b2ad      	uxthmi	r5, r5
 800956e:	e7e6      	b.n	800953e <_printf_i+0x182>
 8009570:	4616      	mov	r6, r2
 8009572:	e7bb      	b.n	80094ec <_printf_i+0x130>
 8009574:	680b      	ldr	r3, [r1, #0]
 8009576:	6826      	ldr	r6, [r4, #0]
 8009578:	6960      	ldr	r0, [r4, #20]
 800957a:	1d1d      	adds	r5, r3, #4
 800957c:	600d      	str	r5, [r1, #0]
 800957e:	0635      	lsls	r5, r6, #24
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	d501      	bpl.n	8009588 <_printf_i+0x1cc>
 8009584:	6018      	str	r0, [r3, #0]
 8009586:	e002      	b.n	800958e <_printf_i+0x1d2>
 8009588:	0671      	lsls	r1, r6, #25
 800958a:	d5fb      	bpl.n	8009584 <_printf_i+0x1c8>
 800958c:	8018      	strh	r0, [r3, #0]
 800958e:	2300      	movs	r3, #0
 8009590:	6123      	str	r3, [r4, #16]
 8009592:	4616      	mov	r6, r2
 8009594:	e7ba      	b.n	800950c <_printf_i+0x150>
 8009596:	680b      	ldr	r3, [r1, #0]
 8009598:	1d1a      	adds	r2, r3, #4
 800959a:	600a      	str	r2, [r1, #0]
 800959c:	681e      	ldr	r6, [r3, #0]
 800959e:	6862      	ldr	r2, [r4, #4]
 80095a0:	2100      	movs	r1, #0
 80095a2:	4630      	mov	r0, r6
 80095a4:	f7f6 fe2c 	bl	8000200 <memchr>
 80095a8:	b108      	cbz	r0, 80095ae <_printf_i+0x1f2>
 80095aa:	1b80      	subs	r0, r0, r6
 80095ac:	6060      	str	r0, [r4, #4]
 80095ae:	6863      	ldr	r3, [r4, #4]
 80095b0:	6123      	str	r3, [r4, #16]
 80095b2:	2300      	movs	r3, #0
 80095b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095b8:	e7a8      	b.n	800950c <_printf_i+0x150>
 80095ba:	6923      	ldr	r3, [r4, #16]
 80095bc:	4632      	mov	r2, r6
 80095be:	4649      	mov	r1, r9
 80095c0:	4640      	mov	r0, r8
 80095c2:	47d0      	blx	sl
 80095c4:	3001      	adds	r0, #1
 80095c6:	d0ab      	beq.n	8009520 <_printf_i+0x164>
 80095c8:	6823      	ldr	r3, [r4, #0]
 80095ca:	079b      	lsls	r3, r3, #30
 80095cc:	d413      	bmi.n	80095f6 <_printf_i+0x23a>
 80095ce:	68e0      	ldr	r0, [r4, #12]
 80095d0:	9b03      	ldr	r3, [sp, #12]
 80095d2:	4298      	cmp	r0, r3
 80095d4:	bfb8      	it	lt
 80095d6:	4618      	movlt	r0, r3
 80095d8:	e7a4      	b.n	8009524 <_printf_i+0x168>
 80095da:	2301      	movs	r3, #1
 80095dc:	4632      	mov	r2, r6
 80095de:	4649      	mov	r1, r9
 80095e0:	4640      	mov	r0, r8
 80095e2:	47d0      	blx	sl
 80095e4:	3001      	adds	r0, #1
 80095e6:	d09b      	beq.n	8009520 <_printf_i+0x164>
 80095e8:	3501      	adds	r5, #1
 80095ea:	68e3      	ldr	r3, [r4, #12]
 80095ec:	9903      	ldr	r1, [sp, #12]
 80095ee:	1a5b      	subs	r3, r3, r1
 80095f0:	42ab      	cmp	r3, r5
 80095f2:	dcf2      	bgt.n	80095da <_printf_i+0x21e>
 80095f4:	e7eb      	b.n	80095ce <_printf_i+0x212>
 80095f6:	2500      	movs	r5, #0
 80095f8:	f104 0619 	add.w	r6, r4, #25
 80095fc:	e7f5      	b.n	80095ea <_printf_i+0x22e>
 80095fe:	bf00      	nop
 8009600:	080099d9 	.word	0x080099d9
 8009604:	080099ea 	.word	0x080099ea

08009608 <_read_r>:
 8009608:	b538      	push	{r3, r4, r5, lr}
 800960a:	4d07      	ldr	r5, [pc, #28]	; (8009628 <_read_r+0x20>)
 800960c:	4604      	mov	r4, r0
 800960e:	4608      	mov	r0, r1
 8009610:	4611      	mov	r1, r2
 8009612:	2200      	movs	r2, #0
 8009614:	602a      	str	r2, [r5, #0]
 8009616:	461a      	mov	r2, r3
 8009618:	f7f8 f9ae 	bl	8001978 <_read>
 800961c:	1c43      	adds	r3, r0, #1
 800961e:	d102      	bne.n	8009626 <_read_r+0x1e>
 8009620:	682b      	ldr	r3, [r5, #0]
 8009622:	b103      	cbz	r3, 8009626 <_read_r+0x1e>
 8009624:	6023      	str	r3, [r4, #0]
 8009626:	bd38      	pop	{r3, r4, r5, pc}
 8009628:	20002a10 	.word	0x20002a10

0800962c <_fstat_r>:
 800962c:	b538      	push	{r3, r4, r5, lr}
 800962e:	4d07      	ldr	r5, [pc, #28]	; (800964c <_fstat_r+0x20>)
 8009630:	2300      	movs	r3, #0
 8009632:	4604      	mov	r4, r0
 8009634:	4608      	mov	r0, r1
 8009636:	4611      	mov	r1, r2
 8009638:	602b      	str	r3, [r5, #0]
 800963a:	f7f8 f9c6 	bl	80019ca <_fstat>
 800963e:	1c43      	adds	r3, r0, #1
 8009640:	d102      	bne.n	8009648 <_fstat_r+0x1c>
 8009642:	682b      	ldr	r3, [r5, #0]
 8009644:	b103      	cbz	r3, 8009648 <_fstat_r+0x1c>
 8009646:	6023      	str	r3, [r4, #0]
 8009648:	bd38      	pop	{r3, r4, r5, pc}
 800964a:	bf00      	nop
 800964c:	20002a10 	.word	0x20002a10

08009650 <_isatty_r>:
 8009650:	b538      	push	{r3, r4, r5, lr}
 8009652:	4d06      	ldr	r5, [pc, #24]	; (800966c <_isatty_r+0x1c>)
 8009654:	2300      	movs	r3, #0
 8009656:	4604      	mov	r4, r0
 8009658:	4608      	mov	r0, r1
 800965a:	602b      	str	r3, [r5, #0]
 800965c:	f7f8 f9c5 	bl	80019ea <_isatty>
 8009660:	1c43      	adds	r3, r0, #1
 8009662:	d102      	bne.n	800966a <_isatty_r+0x1a>
 8009664:	682b      	ldr	r3, [r5, #0]
 8009666:	b103      	cbz	r3, 800966a <_isatty_r+0x1a>
 8009668:	6023      	str	r3, [r4, #0]
 800966a:	bd38      	pop	{r3, r4, r5, pc}
 800966c:	20002a10 	.word	0x20002a10

08009670 <memmove>:
 8009670:	4288      	cmp	r0, r1
 8009672:	b510      	push	{r4, lr}
 8009674:	eb01 0402 	add.w	r4, r1, r2
 8009678:	d902      	bls.n	8009680 <memmove+0x10>
 800967a:	4284      	cmp	r4, r0
 800967c:	4623      	mov	r3, r4
 800967e:	d807      	bhi.n	8009690 <memmove+0x20>
 8009680:	1e43      	subs	r3, r0, #1
 8009682:	42a1      	cmp	r1, r4
 8009684:	d008      	beq.n	8009698 <memmove+0x28>
 8009686:	f811 2b01 	ldrb.w	r2, [r1], #1
 800968a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800968e:	e7f8      	b.n	8009682 <memmove+0x12>
 8009690:	4402      	add	r2, r0
 8009692:	4601      	mov	r1, r0
 8009694:	428a      	cmp	r2, r1
 8009696:	d100      	bne.n	800969a <memmove+0x2a>
 8009698:	bd10      	pop	{r4, pc}
 800969a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800969e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80096a2:	e7f7      	b.n	8009694 <memmove+0x24>

080096a4 <_realloc_r>:
 80096a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096a6:	4607      	mov	r7, r0
 80096a8:	4614      	mov	r4, r2
 80096aa:	460e      	mov	r6, r1
 80096ac:	b921      	cbnz	r1, 80096b8 <_realloc_r+0x14>
 80096ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80096b2:	4611      	mov	r1, r2
 80096b4:	f7ff b894 	b.w	80087e0 <_malloc_r>
 80096b8:	b922      	cbnz	r2, 80096c4 <_realloc_r+0x20>
 80096ba:	f7ff fc65 	bl	8008f88 <_free_r>
 80096be:	4625      	mov	r5, r4
 80096c0:	4628      	mov	r0, r5
 80096c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096c4:	f000 f814 	bl	80096f0 <_malloc_usable_size_r>
 80096c8:	42a0      	cmp	r0, r4
 80096ca:	d20f      	bcs.n	80096ec <_realloc_r+0x48>
 80096cc:	4621      	mov	r1, r4
 80096ce:	4638      	mov	r0, r7
 80096d0:	f7ff f886 	bl	80087e0 <_malloc_r>
 80096d4:	4605      	mov	r5, r0
 80096d6:	2800      	cmp	r0, #0
 80096d8:	d0f2      	beq.n	80096c0 <_realloc_r+0x1c>
 80096da:	4631      	mov	r1, r6
 80096dc:	4622      	mov	r2, r4
 80096de:	f7ff f868 	bl	80087b2 <memcpy>
 80096e2:	4631      	mov	r1, r6
 80096e4:	4638      	mov	r0, r7
 80096e6:	f7ff fc4f 	bl	8008f88 <_free_r>
 80096ea:	e7e9      	b.n	80096c0 <_realloc_r+0x1c>
 80096ec:	4635      	mov	r5, r6
 80096ee:	e7e7      	b.n	80096c0 <_realloc_r+0x1c>

080096f0 <_malloc_usable_size_r>:
 80096f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096f4:	1f18      	subs	r0, r3, #4
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	bfbc      	itt	lt
 80096fa:	580b      	ldrlt	r3, [r1, r0]
 80096fc:	18c0      	addlt	r0, r0, r3
 80096fe:	4770      	bx	lr

08009700 <_init>:
 8009700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009702:	bf00      	nop
 8009704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009706:	bc08      	pop	{r3}
 8009708:	469e      	mov	lr, r3
 800970a:	4770      	bx	lr

0800970c <_fini>:
 800970c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800970e:	bf00      	nop
 8009710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009712:	bc08      	pop	{r3}
 8009714:	469e      	mov	lr, r3
 8009716:	4770      	bx	lr
